
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000019d8  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002394  00002914  2**0
                  ALLOC
  9 .bss          00000070  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da78  00000588  00000588  00000000  2**0
                  ALLOC
 11 .comment      000000bc  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005d0  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000b17  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c529  00000000  00000000  00003ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000209c  00000000  00000000  0000ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000447e  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c38  00000000  00000000  000164fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001cdc  00000000  00000000  00017134  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018ea  00000000  00000000  00018e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00532b9e  00000000  00000000  0001a6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000510  00000000  00000000  0054d298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	11 b0       	ld.ub	r0,r8[0x3]

Disassembly of section .text:

80000008 <insert_after>:
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <usart_options>:
80000070:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
80000080:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 35     ....tsk3....tsk5
80000090:	00 00 00 00                                         ....

80000094 <task3>:
/*************************************************************
 * Task3
 * LED2 toggles
 ************************************************************/
void task3(void)
{
80000094:	eb cd 40 80 	pushm	r7,lr
80000098:	1a 97       	mov	r7,sp
	//uint64_t currentTime = ROSA_getTickCount();
	while(1) {
		ledToggle(LED2_GPIO);
8000009a:	33 dc       	mov	r12,61
8000009c:	f0 1f 00 05 	mcall	800000b0 <task3+0x1c>
		ROSA_delay(30);
800000a0:	31 ea       	mov	r10,30
800000a2:	30 0b       	mov	r11,0
800000a4:	f0 1f 00 04 	mcall	800000b4 <task3+0x20>
		//ROSA_delayUntil(&currentTime, 30);
		
		//delay_ms(100);
		ROSA_yield();
800000a8:	f0 1f 00 04 	mcall	800000b8 <task3+0x24>
	}
800000ac:	cf 7b       	rjmp	8000009a <task3+0x6>
800000ae:	00 00       	add	r0,r0
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	0e 00       	add	r0,r7
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	08 28       	rsub	r8,r4
800000b8:	80 00       	ld.sh	r0,r0[0x0]
800000ba:	09 5a       	ld.sh	r10,--r4

800000bc <task4>:
/*************************************************************
 * Task4
 * LED3 toggles
 ************************************************************/
void task4(void)
{
800000bc:	eb cd 40 80 	pushm	r7,lr
800000c0:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED3_GPIO);
800000c2:	33 ec       	mov	r12,62
800000c4:	f0 1f 00 05 	mcall	800000d8 <task4+0x1c>
		delay_ms(200);
800000c8:	e0 6c 00 c8 	mov	r12,200
800000cc:	f0 1f 00 04 	mcall	800000dc <task4+0x20>
		ROSA_yield();
800000d0:	f0 1f 00 04 	mcall	800000e0 <task4+0x24>
	}
800000d4:	cf 7b       	rjmp	800000c2 <task4+0x6>
800000d6:	00 00       	add	r0,r0
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	0e 00       	add	r0,r7
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	0b 68       	ld.uh	r8,--r5
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	09 5a       	ld.sh	r10,--r4

800000e4 <task5>:
/*************************************************************
 * Task2
 * deletes task5 after some time, then turns on LED4
 ************************************************************/
void task5(void)
{
800000e4:	eb cd 40 80 	pushm	r7,lr
800000e8:	1a 97       	mov	r7,sp
	while(1)
	{
		//set green LED only
		ledOff(LED4_GPIO);
800000ea:	33 3c       	mov	r12,51
800000ec:	f0 1f 00 11 	mcall	80000130 <task5+0x4c>
		ledOn(LED5_GPIO);
800000f0:	33 4c       	mov	r12,52
800000f2:	f0 1f 00 11 	mcall	80000134 <task5+0x50>
		ROSA_taskDelete(task4_handle);
800000f6:	49 18       	lddpc	r8,80000138 <task5+0x54>
800000f8:	70 08       	ld.w	r8,r8[0x0]
800000fa:	10 9c       	mov	r12,r8
800000fc:	f0 1f 00 10 	mcall	8000013c <task5+0x58>
		//blink LED4 on board
		//ROSA_tcbUninstall(task3_handle);
		//ROSA_tcbSuspend(task3_handle);
		delay_ms(1000);
80000100:	e0 6c 03 e8 	mov	r12,1000
80000104:	f0 1f 00 0f 	mcall	80000140 <task5+0x5c>
		//ROSA_delay(10);
		
		//possibly make critical sections such that system ticks will still increment properly (if possible)
		
		
		ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 4); 
80000108:	30 48       	mov	r8,4
8000010a:	34 09       	mov	r9,64
8000010c:	48 ea       	lddpc	r10,80000144 <task5+0x60>
8000010e:	48 fb       	lddpc	r11,80000148 <task5+0x64>
80000110:	48 ac       	lddpc	r12,80000138 <task5+0x54>
80000112:	f0 1f 00 0f 	mcall	8000014c <task5+0x68>
		 //stop blinking LED4 on board
		//ROSA_tcbUnsuspend(task3_handle);
		//ROSA_tcbInstall(task3_handle);
		ledOff(LED5_GPIO);	//set red LED only
80000116:	33 4c       	mov	r12,52
80000118:	f0 1f 00 06 	mcall	80000130 <task5+0x4c>
		ledOn(LED4_GPIO);
8000011c:	33 3c       	mov	r12,51
8000011e:	f0 1f 00 06 	mcall	80000134 <task5+0x50>
		//delay_ms(1000);
		ROSA_delay(10);
80000122:	30 aa       	mov	r10,10
80000124:	30 0b       	mov	r11,0
80000126:	f0 1f 00 0b 	mcall	80000150 <task5+0x6c>
		ROSA_yield();
8000012a:	f0 1f 00 0b 	mcall	80000154 <task5+0x70>
	}
8000012e:	cd eb       	rjmp	800000ea <task5+0x6>
80000130:	80 00       	ld.sh	r0,r0[0x0]
80000132:	0d e0       	ld.ub	r0,r6[0x6]
80000134:	80 00       	ld.sh	r0,r0[0x0]
80000136:	0d c0       	ld.ub	r0,r6[0x4]
80000138:	00 00       	add	r0,r0
8000013a:	05 78       	ld.ub	r8,--r2
8000013c:	80 00       	ld.sh	r0,r0[0x0]
8000013e:	07 74       	ld.ub	r4,--r3
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	0b 68       	ld.uh	r8,--r5
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	00 bc       	st.h	r0++,r12
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	00 7c       	tst	r12,r0
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	06 ac       	st.w	r3++,r12
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	08 28       	rsub	r8,r4
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	09 5a       	ld.sh	r10,--r4

80000158 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000158:	eb cd 40 80 	pushm	r7,lr
8000015c:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000015e:	f0 1f 00 0a 	mcall	80000184 <main+0x2c>


	//ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 5);
	//ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
	ROSA_taskCreate(& task3_handle, "tsk3", task3, 0x40, 1);
80000162:	30 18       	mov	r8,1
80000164:	34 09       	mov	r9,64
80000166:	48 9a       	lddpc	r10,80000188 <main+0x30>
80000168:	48 9b       	lddpc	r11,8000018c <main+0x34>
8000016a:	48 ac       	lddpc	r12,80000190 <main+0x38>
8000016c:	f0 1f 00 0a 	mcall	80000194 <main+0x3c>
	//ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 1);
	ROSA_taskCreate(& task5_handle, "tsk5", task5, 0x40, 1);
80000170:	30 18       	mov	r8,1
80000172:	34 09       	mov	r9,64
80000174:	48 9a       	lddpc	r10,80000198 <main+0x40>
80000176:	48 ab       	lddpc	r11,8000019c <main+0x44>
80000178:	48 ac       	lddpc	r12,800001a0 <main+0x48>
8000017a:	f0 1f 00 07 	mcall	80000194 <main+0x3c>
	
	//Start the ROSA kernel
	ROSA_start();
8000017e:	f0 1f 00 0a 	mcall	800001a4 <main+0x4c>
	/* Execution will never return here */
	while(1);
80000182:	c0 08       	rjmp	80000182 <main+0x2a>
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	02 14       	sub	r4,r1
80000188:	80 00       	ld.sh	r0,r0[0x0]
8000018a:	00 94       	mov	r4,r0
8000018c:	80 00       	ld.sh	r0,r0[0x0]
8000018e:	00 84       	andn	r4,r0
80000190:	00 00       	add	r0,r0
80000192:	05 74       	ld.ub	r4,--r2
80000194:	80 00       	ld.sh	r0,r0[0x0]
80000196:	06 ac       	st.w	r3++,r12
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	00 e4       	st.h	--r0,r4
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	00 8c       	andn	r12,r0
800001a0:	00 00       	add	r0,r0
800001a2:	05 70       	ld.ub	r0,--r2
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	08 98       	mov	r8,r4

800001a8 <ROSA_yieldFromISR>:
800001a8:	eb cd 40 80 	pushm	r7,lr
800001ac:	1a 97       	mov	r7,sp
800001ae:	f0 1f 00 0d 	mcall	800001e0 <ROSA_yieldFromISR+0x38>
800001b2:	f0 1f 00 0d 	mcall	800001e4 <ROSA_yieldFromISR+0x3c>
800001b6:	48 d8       	lddpc	r8,800001e8 <ROSA_yieldFromISR+0x40>
800001b8:	f0 ea 00 00 	ld.d	r10,r8[0]
800001bc:	30 18       	mov	r8,1
800001be:	30 09       	mov	r9,0
800001c0:	f4 08 00 08 	add	r8,r10,r8
800001c4:	f6 09 00 49 	adc	r9,r11,r9
800001c8:	48 8a       	lddpc	r10,800001e8 <ROSA_yieldFromISR+0x40>
800001ca:	f4 e9 00 00 	st.d	r10[0],r8
800001ce:	f0 1f 00 08 	mcall	800001ec <ROSA_yieldFromISR+0x44>
800001d2:	f0 1f 00 08 	mcall	800001f0 <ROSA_yieldFromISR+0x48>
800001d6:	f0 1f 00 08 	mcall	800001f4 <ROSA_yieldFromISR+0x4c>
800001da:	e3 cd 80 80 	ldm	sp++,r7,pc
800001de:	00 00       	add	r0,r0
800001e0:	80 00       	ld.sh	r0,r0[0x0]
800001e2:	1b 66       	ld.uh	r6,--sp
800001e4:	80 00       	ld.sh	r0,r0[0x0]
800001e6:	1b 7e       	ld.ub	lr,--sp
800001e8:	00 00       	add	r0,r0
800001ea:	05 68       	ld.uh	r8,--r2
800001ec:	80 00       	ld.sh	r0,r0[0x0]
800001ee:	09 78       	ld.ub	r8,--r4
800001f0:	80 00       	ld.sh	r0,r0[0x0]
800001f2:	1b b8       	ld.ub	r8,sp[0x3]
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	1b 6a       	ld.uh	r10,--sp

800001f8 <usart_options>:
800001f8:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000208:	00 00 00 00                                         ....

8000020c <IDLE_TASK>:
tcb * EXECTASK;

//Idle task creation
ROSA_taskHandle_t idle_task_handle;
void IDLE_TASK (void)
{
8000020c:	eb cd 40 80 	pushm	r7,lr
80000210:	1a 97       	mov	r7,sp
	while(1);
80000212:	c0 08       	rjmp	80000212 <IDLE_TASK+0x6>

80000214 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000214:	eb cd 40 80 	pushm	r7,lr
80000218:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000021a:	f0 1f 00 17 	mcall	80000274 <ROSA_init+0x60>
	buttonInit();								//Buttons
8000021e:	f0 1f 00 17 	mcall	80000278 <ROSA_init+0x64>
	joystickInit();								//Joystick
80000222:	f0 1f 00 17 	mcall	8000027c <ROSA_init+0x68>
	potInit();									//Potentiometer
80000226:	f0 1f 00 17 	mcall	80000280 <ROSA_init+0x6c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000022a:	e0 6a 1b 00 	mov	r10,6912
8000022e:	ea 1a 00 b7 	orh	r10,0xb7
80000232:	49 5b       	lddpc	r11,80000284 <ROSA_init+0x70>
80000234:	fe 7c 14 00 	mov	r12,-60416
80000238:	f0 1f 00 14 	mcall	80000288 <ROSA_init+0x74>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
8000023c:	49 48       	lddpc	r8,8000028c <ROSA_init+0x78>
8000023e:	30 09       	mov	r9,0
80000240:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000242:	49 48       	lddpc	r8,80000290 <ROSA_init+0x7c>
80000244:	30 09       	mov	r9,0
80000246:	91 09       	st.w	r8[0x0],r9
	
	ROSA_taskCreate(& idle_task_handle, "idle", IDLE_TASK, 0x40, 255);
80000248:	e0 68 00 ff 	mov	r8,255
8000024c:	34 09       	mov	r9,64
8000024e:	49 2a       	lddpc	r10,80000294 <ROSA_init+0x80>
80000250:	49 2b       	lddpc	r11,80000298 <ROSA_init+0x84>
80000252:	49 3c       	lddpc	r12,8000029c <ROSA_init+0x88>
80000254:	f0 1f 00 13 	mcall	800002a0 <ROSA_init+0x8c>

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
80000258:	f0 1f 00 13 	mcall	800002a4 <ROSA_init+0x90>
	system_ticks = 0;
8000025c:	49 3a       	lddpc	r10,800002a8 <ROSA_init+0x94>
8000025e:	30 08       	mov	r8,0
80000260:	30 09       	mov	r9,0
80000262:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(1);
80000266:	30 1c       	mov	r12,1
80000268:	f0 1f 00 11 	mcall	800002ac <ROSA_init+0x98>
	timerStart();
8000026c:	f0 1f 00 11 	mcall	800002b0 <ROSA_init+0x9c>
	//...
}
80000270:	e3 cd 80 80 	ldm	sp++,r7,pc
80000274:	80 00       	ld.sh	r0,r0[0x0]
80000276:	0d 34       	ld.ub	r4,r6++
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	0b 08       	ld.w	r8,r5++
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	0b 30       	ld.ub	r0,r5++
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	0e 20       	rsub	r0,r7
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	01 f8       	ld.ub	r8,r0[0x7]
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	0f d4       	ld.ub	r4,r7[0x5]
8000028c:	00 00       	add	r0,r0
8000028e:	05 50       	ld.sh	r0,--r2
80000290:	00 00       	add	r0,r0
80000292:	05 80       	ld.ub	r0,r2[0x0]
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	02 0c       	add	r12,r1
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	02 04       	add	r4,r1
8000029c:	00 00       	add	r0,r0
8000029e:	05 7c       	ld.ub	r12,--r2
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	06 ac       	st.w	r3++,r12
800002a4:	80 00       	ld.sh	r0,r0[0x0]
800002a6:	1b 48       	ld.w	r8,--sp
800002a8:	00 00       	add	r0,r0
800002aa:	05 68       	ld.uh	r8,--r2
800002ac:	80 00       	ld.sh	r0,r0[0x0]
800002ae:	10 f8       	st.b	--r8,r8
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	11 26       	ld.uh	r6,r8++

800002b4 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800002b4:	eb cd 40 80 	pushm	r7,lr
800002b8:	1a 97       	mov	r7,sp
800002ba:	20 6d       	sub	sp,24
800002bc:	ef 4c ff f8 	st.w	r7[-8],r12
800002c0:	ef 4b ff f4 	st.w	r7[-12],r11
800002c4:	ef 4a ff f0 	st.w	r7[-16],r10
800002c8:	ef 49 ff ec 	st.w	r7[-20],r9
800002cc:	ef 48 ff e8 	st.w	r7[-24],r8
	interruptDisable();
800002d0:	f0 1f 00 27 	mcall	8000036c <ROSA_tcbCreate+0xb8>
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800002d4:	30 08       	mov	r8,0
800002d6:	ef 48 ff fc 	st.w	r7[-4],r8
800002da:	c1 48       	rjmp	80000302 <ROSA_tcbCreate+0x4e>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800002dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002e4:	ee fa ff f4 	ld.w	r10,r7[-12]
800002e8:	f4 08 00 08 	add	r8,r10,r8
800002ec:	11 88       	ld.ub	r8,r8[0x0]
800002ee:	ee fa ff f8 	ld.w	r10,r7[-8]
800002f2:	f4 09 00 09 	add	r9,r10,r9
800002f6:	b2 c8       	st.b	r9[0x4],r8
{
	interruptDisable();
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800002f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002fc:	2f f8       	sub	r8,-1
800002fe:	ef 48 ff fc 	st.w	r7[-4],r8
80000302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000306:	58 38       	cp.w	r8,3
80000308:	fe 9a ff ea 	brle	800002dc <ROSA_tcbCreate+0x28>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
8000030c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000310:	30 09       	mov	r9,0
80000312:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000314:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000031c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000031e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000326:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000032c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000330:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000332:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000336:	a3 68       	lsl	r8,0x2
80000338:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000033c:	10 09       	add	r9,r8
8000033e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000342:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000348:	70 39       	ld.w	r9,r8[0xc]
8000034a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000034e:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000354:	fc 19 00 1c 	movh	r9,0x1c
80000358:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000035a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000035e:	f0 1f 00 05 	mcall	80000370 <ROSA_tcbCreate+0xbc>
	interruptEnable();
80000362:	f0 1f 00 05 	mcall	80000374 <ROSA_tcbCreate+0xc0>
}
80000366:	2f ad       	sub	sp,-24
80000368:	e3 cd 80 80 	ldm	sp++,r7,pc
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	1b 66       	ld.uh	r6,--sp
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	08 ce       	st.b	r4++,lr
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	1b 6a       	ld.uh	r10,--sp

80000378 <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
80000378:	eb cd 40 80 	pushm	r7,lr
8000037c:	1a 97       	mov	r7,sp
8000037e:	20 2d       	sub	sp,8
80000380:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000384:	f0 1f 00 35 	mcall	80000458 <ROSA_tcbInstall+0xe0>
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
80000388:	4b 58       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
8000038a:	70 08       	ld.w	r8,r8[0x0]
8000038c:	58 08       	cp.w	r8,0
8000038e:	c1 51       	brne	800003b8 <ROSA_tcbInstall+0x40>
	{
		TCBLIST = tcbTask;
80000390:	4b 38       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
80000392:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000396:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000039c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003a0:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
800003a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003aa:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
800003ae:	4a d8       	lddpc	r8,80000460 <ROSA_tcbInstall+0xe8>
800003b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003b4:	91 09       	st.w	r8[0x0],r9
800003b6:	c4 b8       	rjmp	8000044c <ROSA_tcbInstall+0xd4>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
800003b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003bc:	f1 39 00 65 	ld.ub	r9,r8[101]
800003c0:	4a 78       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
800003c2:	70 08       	ld.w	r8,r8[0x0]
800003c4:	f1 38 00 65 	ld.ub	r8,r8[101]
800003c8:	f0 09 18 00 	cp.b	r9,r8
800003cc:	c0 d2       	brcc	800003e6 <ROSA_tcbInstall+0x6e>
	{
		insert_after(TCBLIST_end, tcbTask);
800003ce:	4a 58       	lddpc	r8,80000460 <ROSA_tcbInstall+0xe8>
800003d0:	70 08       	ld.w	r8,r8[0x0]
800003d2:	ee fb ff f8 	ld.w	r11,r7[-8]
800003d6:	10 9c       	mov	r12,r8
800003d8:	f0 1f 00 23 	mcall	80000464 <ROSA_tcbInstall+0xec>
		TCBLIST = tcbTask;
800003dc:	4a 08       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
800003de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003e2:	91 09       	st.w	r8[0x0],r9
800003e4:	c3 48       	rjmp	8000044c <ROSA_tcbInstall+0xd4>
	}
	else
	{
		tcb * iterator = TCBLIST;
800003e6:	49 e8       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
800003e8:	70 08       	ld.w	r8,r8[0x0]
800003ea:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
800003ee:	c0 68       	rjmp	800003fa <ROSA_tcbInstall+0x82>
		{
			iterator = iterator->nexttcb;
800003f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003f4:	70 08       	ld.w	r8,r8[0x0]
800003f6:	ef 48 ff fc 	st.w	r7[-4],r8
		TCBLIST = tcbTask;
	}
	else
	{
		tcb * iterator = TCBLIST;
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
800003fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fe:	58 08       	cp.w	r8,0
80000400:	c1 30       	breq	80000426 <ROSA_tcbInstall+0xae>
80000402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000406:	f1 39 00 65 	ld.ub	r9,r8[101]
8000040a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000040e:	f1 38 00 65 	ld.ub	r8,r8[101]
80000412:	f0 09 18 00 	cp.b	r9,r8
80000416:	e0 8b 00 08 	brhi	80000426 <ROSA_tcbInstall+0xae>
8000041a:	49 28       	lddpc	r8,80000460 <ROSA_tcbInstall+0xe8>
8000041c:	70 08       	ld.w	r8,r8[0x0]
8000041e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000422:	10 39       	cp.w	r9,r8
80000424:	ce 61       	brne	800003f0 <ROSA_tcbInstall+0x78>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
80000426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000042a:	71 c8       	ld.w	r8,r8[0x70]
8000042c:	ee fb ff f8 	ld.w	r11,r7[-8]
80000430:	10 9c       	mov	r12,r8
80000432:	f0 1f 00 0d 	mcall	80000464 <ROSA_tcbInstall+0xec>
		//insert_by_priority(TCBLIST, tcbTask);
		if(TCBLIST->prevtcb == tcbTask)
80000436:	48 a8       	lddpc	r8,8000045c <ROSA_tcbInstall+0xe4>
80000438:	70 08       	ld.w	r8,r8[0x0]
8000043a:	71 c9       	ld.w	r9,r8[0x70]
8000043c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000440:	10 39       	cp.w	r9,r8
80000442:	c0 51       	brne	8000044c <ROSA_tcbInstall+0xd4>
		{
			TCBLIST_end = tcbTask;
80000444:	48 78       	lddpc	r8,80000460 <ROSA_tcbInstall+0xe8>
80000446:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000044a:	91 09       	st.w	r8[0x0],r9
		}		
	}
	interruptEnable();
8000044c:	f0 1f 00 07 	mcall	80000468 <ROSA_tcbInstall+0xf0>
}
80000450:	2f ed       	sub	sp,-8
80000452:	e3 cd 80 80 	ldm	sp++,r7,pc
80000456:	00 00       	add	r0,r0
80000458:	80 00       	ld.sh	r0,r0[0x0]
8000045a:	1b 66       	ld.uh	r6,--sp
8000045c:	00 00       	add	r0,r0
8000045e:	05 50       	ld.sh	r0,--r2
80000460:	00 00       	add	r0,r0
80000462:	05 60       	ld.uh	r0,--r2
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	00 08       	add	r8,r0
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	1b 6a       	ld.uh	r10,--sp

8000046c <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
8000046c:	eb cd 40 80 	pushm	r7,lr
80000470:	1a 97       	mov	r7,sp
80000472:	20 1d       	sub	sp,4
80000474:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
80000478:	f0 1f 00 22 	mcall	80000500 <ROSA_tcbUninstall+0x94>
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
8000047c:	4a 28       	lddpc	r8,80000504 <ROSA_tcbUninstall+0x98>
8000047e:	70 09       	ld.w	r9,r8[0x0]
80000480:	4a 28       	lddpc	r8,80000508 <ROSA_tcbUninstall+0x9c>
80000482:	70 08       	ld.w	r8,r8[0x0]
80000484:	10 39       	cp.w	r9,r8
80000486:	c0 81       	brne	80000496 <ROSA_tcbUninstall+0x2a>
	{
		TCBLIST = NULL;
80000488:	49 f8       	lddpc	r8,80000504 <ROSA_tcbUninstall+0x98>
8000048a:	30 09       	mov	r9,0
8000048c:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
8000048e:	49 f8       	lddpc	r8,80000508 <ROSA_tcbUninstall+0x9c>
80000490:	30 09       	mov	r9,0
80000492:	91 09       	st.w	r8[0x0],r9
80000494:	c3 08       	rjmp	800004f4 <ROSA_tcbUninstall+0x88>
	}
	else 
	{
		if(TCBLIST_end == tcbTask)
80000496:	49 d8       	lddpc	r8,80000508 <ROSA_tcbUninstall+0x9c>
80000498:	70 09       	ld.w	r9,r8[0x0]
8000049a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000049e:	10 39       	cp.w	r9,r8
800004a0:	c0 71       	brne	800004ae <ROSA_tcbUninstall+0x42>
		{
			TCBLIST_end = tcbTask->prevtcb;
800004a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a6:	71 c9       	ld.w	r9,r8[0x70]
800004a8:	49 88       	lddpc	r8,80000508 <ROSA_tcbUninstall+0x9c>
800004aa:	91 09       	st.w	r8[0x0],r9
800004ac:	c0 c8       	rjmp	800004c4 <ROSA_tcbUninstall+0x58>
		}
		else if(TCBLIST == tcbTask)
800004ae:	49 68       	lddpc	r8,80000504 <ROSA_tcbUninstall+0x98>
800004b0:	70 09       	ld.w	r9,r8[0x0]
800004b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004b6:	10 39       	cp.w	r9,r8
800004b8:	c0 61       	brne	800004c4 <ROSA_tcbUninstall+0x58>
		{
			TCBLIST = tcbTask->nexttcb;
800004ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004be:	70 09       	ld.w	r9,r8[0x0]
800004c0:	49 18       	lddpc	r8,80000504 <ROSA_tcbUninstall+0x98>
800004c2:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
800004c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004c8:	71 c8       	ld.w	r8,r8[0x70]
800004ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004ce:	72 09       	ld.w	r9,r9[0x0]
800004d0:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
800004d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d6:	70 08       	ld.w	r8,r8[0x0]
800004d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004dc:	73 c9       	ld.w	r9,r9[0x70]
800004de:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
800004e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e6:	30 09       	mov	r9,0
800004e8:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
800004ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ee:	30 09       	mov	r9,0
800004f0:	f1 49 00 70 	st.w	r8[112],r9
	}
	interruptEnable();
800004f4:	f0 1f 00 06 	mcall	8000050c <ROSA_tcbUninstall+0xa0>
}
800004f8:	2f fd       	sub	sp,-4
800004fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800004fe:	00 00       	add	r0,r0
80000500:	80 00       	ld.sh	r0,r0[0x0]
80000502:	1b 66       	ld.uh	r6,--sp
80000504:	00 00       	add	r0,r0
80000506:	05 50       	ld.sh	r0,--r2
80000508:	00 00       	add	r0,r0
8000050a:	05 60       	ld.uh	r0,--r2
8000050c:	80 00       	ld.sh	r0,r0[0x0]
8000050e:	1b 6a       	ld.uh	r10,--sp

80000510 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
80000510:	eb cd 40 80 	pushm	r7,lr
80000514:	1a 97       	mov	r7,sp
80000516:	20 2d       	sub	sp,8
80000518:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
8000051c:	f0 1f 00 36 	mcall	800005f4 <ROSA_tcbSuspend+0xe4>
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
80000520:	4b 68       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
80000522:	70 08       	ld.w	r8,r8[0x0]
80000524:	58 08       	cp.w	r8,0
80000526:	c1 51       	brne	80000550 <ROSA_tcbSuspend+0x40>
	{
		SUSPENDEDLIST = tcbTask;
80000528:	4b 48       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
8000052a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000052e:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000530:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000534:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000538:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
8000053a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000053e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000542:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
80000546:	4a e8       	lddpc	r8,800005fc <ROSA_tcbSuspend+0xec>
80000548:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000054c:	91 09       	st.w	r8[0x0],r9
8000054e:	c4 d8       	rjmp	800005e8 <ROSA_tcbSuspend+0xd8>
	}
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
80000550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000554:	f0 ea 00 68 	ld.d	r10,r8[104]
80000558:	4a 88       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
8000055a:	70 08       	ld.w	r8,r8[0x0]
8000055c:	f0 e8 00 68 	ld.d	r8,r8[104]
80000560:	10 3a       	cp.w	r10,r8
80000562:	f2 0b 13 00 	cpc	r11,r9
80000566:	c0 d2       	brcc	80000580 <ROSA_tcbSuspend+0x70>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
80000568:	4a 58       	lddpc	r8,800005fc <ROSA_tcbSuspend+0xec>
8000056a:	70 08       	ld.w	r8,r8[0x0]
8000056c:	ee fb ff f8 	ld.w	r11,r7[-8]
80000570:	10 9c       	mov	r12,r8
80000572:	f0 1f 00 24 	mcall	80000600 <ROSA_tcbSuspend+0xf0>
		SUSPENDEDLIST = tcbTask;
80000576:	4a 18       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
80000578:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000057c:	91 09       	st.w	r8[0x0],r9
8000057e:	c3 58       	rjmp	800005e8 <ROSA_tcbSuspend+0xd8>
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
80000580:	49 e8       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
80000582:	70 08       	ld.w	r8,r8[0x0]
80000584:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
80000588:	c0 68       	rjmp	80000594 <ROSA_tcbSuspend+0x84>
		{
			iterator = iterator->nexttcb;
8000058a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000058e:	70 08       	ld.w	r8,r8[0x0]
80000590:	ef 48 ff fc 	st.w	r7[-4],r8
		SUSPENDEDLIST = tcbTask;
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
80000594:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000598:	58 08       	cp.w	r8,0
8000059a:	c1 40       	breq	800005c2 <ROSA_tcbSuspend+0xb2>
8000059c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a0:	f0 ea 00 68 	ld.d	r10,r8[104]
800005a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005a8:	f0 e8 00 68 	ld.d	r8,r8[104]
800005ac:	10 3a       	cp.w	r10,r8
800005ae:	f2 0b 13 00 	cpc	r11,r9
800005b2:	e0 8b 00 08 	brhi	800005c2 <ROSA_tcbSuspend+0xb2>
800005b6:	49 28       	lddpc	r8,800005fc <ROSA_tcbSuspend+0xec>
800005b8:	70 08       	ld.w	r8,r8[0x0]
800005ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005be:	10 39       	cp.w	r9,r8
800005c0:	ce 51       	brne	8000058a <ROSA_tcbSuspend+0x7a>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
800005c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005c6:	71 c8       	ld.w	r8,r8[0x70]
800005c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800005cc:	10 9c       	mov	r12,r8
800005ce:	f0 1f 00 0d 	mcall	80000600 <ROSA_tcbSuspend+0xf0>
		//insert_by_back_online_time(SUSPENDEDLIST, tcbTask);
		if(SUSPENDEDLIST->prevtcb == tcbTask)
800005d2:	48 a8       	lddpc	r8,800005f8 <ROSA_tcbSuspend+0xe8>
800005d4:	70 08       	ld.w	r8,r8[0x0]
800005d6:	71 c9       	ld.w	r9,r8[0x70]
800005d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005dc:	10 39       	cp.w	r9,r8
800005de:	c0 51       	brne	800005e8 <ROSA_tcbSuspend+0xd8>
		{
			SUSPENDEDLIST_end = tcbTask;
800005e0:	48 78       	lddpc	r8,800005fc <ROSA_tcbSuspend+0xec>
800005e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005e6:	91 09       	st.w	r8[0x0],r9
		}
	}
	interruptEnable();
800005e8:	f0 1f 00 07 	mcall	80000604 <ROSA_tcbSuspend+0xf4>
}
800005ec:	2f ed       	sub	sp,-8
800005ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800005f2:	00 00       	add	r0,r0
800005f4:	80 00       	ld.sh	r0,r0[0x0]
800005f6:	1b 66       	ld.uh	r6,--sp
800005f8:	00 00       	add	r0,r0
800005fa:	05 58       	ld.sh	r8,--r2
800005fc:	00 00       	add	r0,r0
800005fe:	05 64       	ld.uh	r4,--r2
80000600:	80 00       	ld.sh	r0,r0[0x0]
80000602:	00 08       	add	r8,r0
80000604:	80 00       	ld.sh	r0,r0[0x0]
80000606:	1b 6a       	ld.uh	r10,--sp

80000608 <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
80000608:	eb cd 40 80 	pushm	r7,lr
8000060c:	1a 97       	mov	r7,sp
8000060e:	20 1d       	sub	sp,4
80000610:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
80000614:	f0 1f 00 22 	mcall	8000069c <ROSA_tcbUnsuspend+0x94>
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
80000618:	4a 28       	lddpc	r8,800006a0 <ROSA_tcbUnsuspend+0x98>
8000061a:	70 09       	ld.w	r9,r8[0x0]
8000061c:	4a 28       	lddpc	r8,800006a4 <ROSA_tcbUnsuspend+0x9c>
8000061e:	70 08       	ld.w	r8,r8[0x0]
80000620:	10 39       	cp.w	r9,r8
80000622:	c0 81       	brne	80000632 <ROSA_tcbUnsuspend+0x2a>
	{
		SUSPENDEDLIST = NULL;
80000624:	49 f8       	lddpc	r8,800006a0 <ROSA_tcbUnsuspend+0x98>
80000626:	30 09       	mov	r9,0
80000628:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
8000062a:	49 f8       	lddpc	r8,800006a4 <ROSA_tcbUnsuspend+0x9c>
8000062c:	30 09       	mov	r9,0
8000062e:	91 09       	st.w	r8[0x0],r9
80000630:	c3 08       	rjmp	80000690 <ROSA_tcbUnsuspend+0x88>
	}
	else
	{
		if(SUSPENDEDLIST == tcbTask)
80000632:	49 c8       	lddpc	r8,800006a0 <ROSA_tcbUnsuspend+0x98>
80000634:	70 09       	ld.w	r9,r8[0x0]
80000636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000063a:	10 39       	cp.w	r9,r8
8000063c:	c0 71       	brne	8000064a <ROSA_tcbUnsuspend+0x42>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
8000063e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000642:	70 09       	ld.w	r9,r8[0x0]
80000644:	49 78       	lddpc	r8,800006a0 <ROSA_tcbUnsuspend+0x98>
80000646:	91 09       	st.w	r8[0x0],r9
80000648:	c0 c8       	rjmp	80000660 <ROSA_tcbUnsuspend+0x58>
		}
		else if(SUSPENDEDLIST_end == tcbTask)
8000064a:	49 78       	lddpc	r8,800006a4 <ROSA_tcbUnsuspend+0x9c>
8000064c:	70 09       	ld.w	r9,r8[0x0]
8000064e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000652:	10 39       	cp.w	r9,r8
80000654:	c0 61       	brne	80000660 <ROSA_tcbUnsuspend+0x58>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
80000656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000065a:	71 c9       	ld.w	r9,r8[0x70]
8000065c:	49 28       	lddpc	r8,800006a4 <ROSA_tcbUnsuspend+0x9c>
8000065e:	91 09       	st.w	r8[0x0],r9
		}
		
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000664:	71 c8       	ld.w	r8,r8[0x70]
80000666:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000066a:	72 09       	ld.w	r9,r9[0x0]
8000066c:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
8000066e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000672:	70 08       	ld.w	r8,r8[0x0]
80000674:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000678:	73 c9       	ld.w	r9,r9[0x70]
8000067a:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
8000067e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000682:	30 09       	mov	r9,0
80000684:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
80000686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000068a:	30 09       	mov	r9,0
8000068c:	f1 49 00 70 	st.w	r8[112],r9
	}
	interruptEnable();
80000690:	f0 1f 00 06 	mcall	800006a8 <ROSA_tcbUnsuspend+0xa0>
}
80000694:	2f fd       	sub	sp,-4
80000696:	e3 cd 80 80 	ldm	sp++,r7,pc
8000069a:	00 00       	add	r0,r0
8000069c:	80 00       	ld.sh	r0,r0[0x0]
8000069e:	1b 66       	ld.uh	r6,--sp
800006a0:	00 00       	add	r0,r0
800006a2:	05 58       	ld.sh	r8,--r2
800006a4:	00 00       	add	r0,r0
800006a6:	05 64       	ld.uh	r4,--r2
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	1b 6a       	ld.uh	r10,--sp

800006ac <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
800006ac:	eb cd 40 80 	pushm	r7,lr
800006b0:	1a 97       	mov	r7,sp
800006b2:	20 7d       	sub	sp,28
800006b4:	ef 4c ff f4 	st.w	r7[-12],r12
800006b8:	ef 4b ff f0 	st.w	r7[-16],r11
800006bc:	ef 4a ff ec 	st.w	r7[-20],r10
800006c0:	ef 49 ff e8 	st.w	r7[-24],r9
800006c4:	ef 68 ff e4 	st.b	r7[-28],r8
	interruptDisable();
800006c8:	f0 1f 00 26 	mcall	80000760 <ROSA_taskCreate+0xb4>
	int16_t result = -1;
800006cc:	3f f8       	mov	r8,-1
800006ce:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
800006d2:	37 4b       	mov	r11,116
800006d4:	30 1c       	mov	r12,1
800006d6:	f0 1f 00 24 	mcall	80000764 <ROSA_taskCreate+0xb8>
800006da:	18 98       	mov	r8,r12
800006dc:	10 99       	mov	r9,r8
800006de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006e2:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
800006e4:	30 4b       	mov	r11,4
800006e6:	ee fc ff e8 	ld.w	r12,r7[-24]
800006ea:	f0 1f 00 1f 	mcall	80000764 <ROSA_taskCreate+0xb8>
800006ee:	18 98       	mov	r8,r12
800006f0:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
800006f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006f8:	70 09       	ld.w	r9,r8[0x0]
800006fa:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800006fe:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
80000702:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000706:	70 09       	ld.w	r9,r8[0x0]
80000708:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000070c:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
80000710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000714:	70 09       	ld.w	r9,r8[0x0]
80000716:	30 18       	mov	r8,1
80000718:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
8000071c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000720:	70 0a       	ld.w	r10,r8[0x0]
80000722:	30 08       	mov	r8,0
80000724:	30 09       	mov	r9,0
80000726:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
8000072a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000072e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000732:	72 0c       	ld.w	r12,r9[0x0]
80000734:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000738:	ee fa ff ec 	ld.w	r10,r7[-20]
8000073c:	ee fb ff f0 	ld.w	r11,r7[-16]
80000740:	f0 1f 00 0a 	mcall	80000768 <ROSA_taskCreate+0xbc>
	ROSA_tcbInstall(*th);
80000744:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000748:	70 08       	ld.w	r8,r8[0x0]
8000074a:	10 9c       	mov	r12,r8
8000074c:	f0 1f 00 08 	mcall	8000076c <ROSA_taskCreate+0xc0>
	interruptEnable();
80000750:	f0 1f 00 08 	mcall	80000770 <ROSA_taskCreate+0xc4>
	return result;
80000754:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000758:	10 9c       	mov	r12,r8
8000075a:	2f 9d       	sub	sp,-28
8000075c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000760:	80 00       	ld.sh	r0,r0[0x0]
80000762:	1b 66       	ld.uh	r6,--sp
80000764:	80 00       	ld.sh	r0,r0[0x0]
80000766:	12 30       	cp.w	r0,r9
80000768:	80 00       	ld.sh	r0,r0[0x0]
8000076a:	02 b4       	st.h	r1++,r4
8000076c:	80 00       	ld.sh	r0,r0[0x0]
8000076e:	03 78       	ld.ub	r8,--r1
80000770:	80 00       	ld.sh	r0,r0[0x0]
80000772:	1b 6a       	ld.uh	r10,--sp

80000774 <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t th)
{
80000774:	eb cd 40 80 	pushm	r7,lr
80000778:	1a 97       	mov	r7,sp
8000077a:	20 2d       	sub	sp,8
8000077c:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000780:	f0 1f 00 25 	mcall	80000814 <ROSA_taskDelete+0xa0>
	uint16_t result = -1;
80000784:	3f f8       	mov	r8,-1
80000786:	ef 58 ff fe 	st.h	r7[-2],r8
		
	if( th )
8000078a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000078e:	58 08       	cp.w	r8,0
80000790:	c3 a0       	breq	80000804 <ROSA_taskDelete+0x90>
		//{
			//TCBLIST_end = NULL;
			//TCBLIST_end = NULL;
		//}
		
		if(TCBLIST_end == th)
80000792:	4a 28       	lddpc	r8,80000818 <ROSA_taskDelete+0xa4>
80000794:	70 09       	ld.w	r9,r8[0x0]
80000796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000079a:	10 39       	cp.w	r9,r8
8000079c:	c0 61       	brne	800007a8 <ROSA_taskDelete+0x34>
		{
			TCBLIST_end = th->prevtcb;
8000079e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007a2:	71 c9       	ld.w	r9,r8[0x70]
800007a4:	49 d8       	lddpc	r8,80000818 <ROSA_taskDelete+0xa4>
800007a6:	91 09       	st.w	r8[0x0],r9
		}
		if(TCBLIST == th)
800007a8:	49 d8       	lddpc	r8,8000081c <ROSA_taskDelete+0xa8>
800007aa:	70 09       	ld.w	r9,r8[0x0]
800007ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b0:	10 39       	cp.w	r9,r8
800007b2:	c0 61       	brne	800007be <ROSA_taskDelete+0x4a>
		{
			TCBLIST = th->nexttcb;
800007b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b8:	70 09       	ld.w	r9,r8[0x0]
800007ba:	49 98       	lddpc	r8,8000081c <ROSA_taskDelete+0xa8>
800007bc:	91 09       	st.w	r8[0x0],r9
		}
		
		th->prevtcb->nexttcb = th->nexttcb;
800007be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007c2:	71 c8       	ld.w	r8,r8[0x70]
800007c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007c8:	72 09       	ld.w	r9,r9[0x0]
800007ca:	91 09       	st.w	r8[0x0],r9
		th->nexttcb->prevtcb = th->prevtcb;
800007cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007d0:	70 08       	ld.w	r8,r8[0x0]
800007d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007d6:	73 c9       	ld.w	r9,r9[0x70]
800007d8:	f1 49 00 70 	st.w	r8[112],r9
		
		free(th->dataarea - th->datasize);
800007dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007e0:	70 39       	ld.w	r9,r8[0xc]
800007e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007e6:	70 48       	ld.w	r8,r8[0x10]
800007e8:	a3 68       	lsl	r8,0x2
800007ea:	5c 38       	neg	r8
800007ec:	f2 08 00 08 	add	r8,r9,r8
800007f0:	10 9c       	mov	r12,r8
800007f2:	f0 1f 00 0c 	mcall	80000820 <ROSA_taskDelete+0xac>
		free(th);
800007f6:	ee fc ff f8 	ld.w	r12,r7[-8]
800007fa:	f0 1f 00 0a 	mcall	80000820 <ROSA_taskDelete+0xac>
		
		result = 0;
800007fe:	30 08       	mov	r8,0
80000800:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	interruptEnable();
80000804:	f0 1f 00 08 	mcall	80000824 <ROSA_taskDelete+0xb0>
	return result;
80000808:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000080c:	10 9c       	mov	r12,r8
8000080e:	2f ed       	sub	sp,-8
80000810:	e3 cd 80 80 	ldm	sp++,r7,pc
80000814:	80 00       	ld.sh	r0,r0[0x0]
80000816:	1b 66       	ld.uh	r6,--sp
80000818:	00 00       	add	r0,r0
8000081a:	05 60       	ld.uh	r0,--r2
8000081c:	00 00       	add	r0,r0
8000081e:	05 50       	ld.sh	r0,--r2
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	12 a8       	st.w	r9++,r8
80000824:	80 00       	ld.sh	r0,r0[0x0]
80000826:	1b 6a       	ld.uh	r10,--sp

80000828 <ROSA_delay>:


int16_t ROSA_delay(uint64_t ticks)
{
80000828:	eb cd 40 c0 	pushm	r6-r7,lr
8000082c:	1a 97       	mov	r7,sp
8000082e:	20 2d       	sub	sp,8
80000830:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
80000834:	f0 1f 00 12 	mcall	8000087c <ROSA_delay+0x54>
	ROSA_tcbUninstall(EXECTASK);
80000838:	49 28       	lddpc	r8,80000880 <ROSA_delay+0x58>
8000083a:	70 08       	ld.w	r8,r8[0x0]
8000083c:	10 9c       	mov	r12,r8
8000083e:	f0 1f 00 12 	mcall	80000884 <ROSA_delay+0x5c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
80000842:	49 08       	lddpc	r8,80000880 <ROSA_delay+0x58>
80000844:	70 06       	ld.w	r6,r8[0x0]
80000846:	f0 1f 00 11 	mcall	80000888 <ROSA_delay+0x60>
8000084a:	14 98       	mov	r8,r10
8000084c:	16 99       	mov	r9,r11
8000084e:	10 9a       	mov	r10,r8
80000850:	12 9b       	mov	r11,r9
80000852:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000856:	f4 08 00 08 	add	r8,r10,r8
8000085a:	f6 09 00 49 	adc	r9,r11,r9
8000085e:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
80000862:	48 88       	lddpc	r8,80000880 <ROSA_delay+0x58>
80000864:	70 08       	ld.w	r8,r8[0x0]
80000866:	10 9c       	mov	r12,r8
80000868:	f0 1f 00 09 	mcall	8000088c <ROSA_delay+0x64>
	interruptEnable();
8000086c:	f0 1f 00 09 	mcall	80000890 <ROSA_delay+0x68>
	ROSA_yield();
80000870:	f0 1f 00 09 	mcall	80000894 <ROSA_delay+0x6c>
}
80000874:	2f ed       	sub	sp,-8
80000876:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000087a:	00 00       	add	r0,r0
8000087c:	80 00       	ld.sh	r0,r0[0x0]
8000087e:	1b 66       	ld.uh	r6,--sp
80000880:	00 00       	add	r0,r0
80000882:	05 80       	ld.ub	r0,r2[0x0]
80000884:	80 00       	ld.sh	r0,r0[0x0]
80000886:	04 6c       	and	r12,r2
80000888:	80 00       	ld.sh	r0,r0[0x0]
8000088a:	0a f0       	st.b	--r5,r0
8000088c:	80 00       	ld.sh	r0,r0[0x0]
8000088e:	05 10       	ld.sh	r0,r2++
80000890:	80 00       	ld.sh	r0,r0[0x0]
80000892:	1b 6a       	ld.uh	r10,--sp
80000894:	80 00       	ld.sh	r0,r0[0x0]
80000896:	09 5a       	ld.sh	r10,--r4

80000898 <ROSA_start>:
80000898:	4b 5c       	lddpc	r12,8000096c <_yield+0xa>
8000089a:	4b 6b       	lddpc	r11,80000970 <_yield+0xe>
8000089c:	78 0c       	ld.w	r12,r12[0x0]
8000089e:	97 0c       	st.w	r11[0x0],r12
800008a0:	78 50       	ld.w	r0,r12[0x14]
800008a2:	1a d0       	st.w	--sp,r0
800008a4:	e5 cd 20 00 	ldmts	sp,sp
800008a8:	1b 00       	ld.w	r0,sp++
800008aa:	78 2e       	ld.w	lr,r12[0x8]
800008ac:	78 80       	ld.w	r0,r12[0x20]
800008ae:	e3 b0 00 00 	mtsr	0x0,r0
800008b2:	79 80       	ld.w	r0,r12[0x60]
800008b4:	79 71       	ld.w	r1,r12[0x5c]
800008b6:	79 62       	ld.w	r2,r12[0x58]
800008b8:	79 53       	ld.w	r3,r12[0x54]
800008ba:	79 44       	ld.w	r4,r12[0x50]
800008bc:	79 35       	ld.w	r5,r12[0x4c]
800008be:	79 26       	ld.w	r6,r12[0x48]
800008c0:	79 17       	ld.w	r7,r12[0x44]
800008c2:	79 08       	ld.w	r8,r12[0x40]
800008c4:	78 f9       	ld.w	r9,r12[0x3c]
800008c6:	78 ea       	ld.w	r10,r12[0x38]
800008c8:	78 db       	ld.w	r11,r12[0x34]
800008ca:	78 cc       	ld.w	r12,r12[0x30]
800008cc:	1c 9f       	mov	pc,lr

800008ce <contextInit>:
800008ce:	78 20       	ld.w	r0,r12[0x8]
800008d0:	99 a0       	st.w	r12[0x28],r0
800008d2:	30 00       	mov	r0,0
800008d4:	f9 40 00 60 	st.w	r12[96],r0
800008d8:	f9 40 00 5c 	st.w	r12[92],r0
800008dc:	f9 40 00 58 	st.w	r12[88],r0
800008e0:	f9 40 00 54 	st.w	r12[84],r0
800008e4:	f9 40 00 50 	st.w	r12[80],r0
800008e8:	f9 40 00 4c 	st.w	r12[76],r0
800008ec:	f9 40 00 48 	st.w	r12[72],r0
800008f0:	f9 40 00 44 	st.w	r12[68],r0
800008f4:	f9 40 00 40 	st.w	r12[64],r0
800008f8:	99 f0       	st.w	r12[0x3c],r0
800008fa:	99 e0       	st.w	r12[0x38],r0
800008fc:	99 d0       	st.w	r12[0x34],r0
800008fe:	99 c0       	st.w	r12[0x30],r0
80000900:	1c 9f       	mov	pc,lr

80000902 <contextSave>:
80000902:	d2 01       	pushm	r12
80000904:	49 bc       	lddpc	r12,80000970 <_yield+0xe>
80000906:	78 0c       	ld.w	r12,r12[0x0]
80000908:	99 60       	st.w	r12[0x18],r0
8000090a:	99 71       	st.w	r12[0x1c],r1
8000090c:	1b 00       	ld.w	r0,sp++
8000090e:	99 c0       	st.w	r12[0x30],r0
80000910:	7a 00       	ld.w	r0,sp[0x0]
80000912:	99 80       	st.w	r12[0x20],r0
80000914:	33 40       	mov	r0,52
80000916:	18 00       	add	r0,r12
80000918:	ed c0 0f ff 	stmts	r0,r0-r11
8000091c:	1a 90       	mov	r0,sp
8000091e:	1a d0       	st.w	--sp,r0
80000920:	ed cd 20 00 	stmts	sp,sp
80000924:	1b 01       	ld.w	r1,sp++
80000926:	62 00       	ld.w	r0,r1[0x0]
80000928:	99 90       	st.w	r12[0x24],r0
8000092a:	99 a0       	st.w	r12[0x28],r0
8000092c:	2f c1       	sub	r1,-4
8000092e:	99 51       	st.w	r12[0x14],r1
80000930:	1c 9f       	mov	pc,lr

80000932 <contextRestore>:
80000932:	49 0c       	lddpc	r12,80000970 <_yield+0xe>
80000934:	78 0c       	ld.w	r12,r12[0x0]
80000936:	78 51       	ld.w	r1,r12[0x14]
80000938:	1a d1       	st.w	--sp,r1
8000093a:	e5 cd 20 00 	ldmts	sp,sp
8000093e:	1b 01       	ld.w	r1,sp++
80000940:	78 ae       	ld.w	lr,r12[0x28]
80000942:	78 90       	ld.w	r0,r12[0x24]
80000944:	9b 10       	st.w	sp[0x4],r0
80000946:	33 40       	mov	r0,52
80000948:	18 00       	add	r0,r12
8000094a:	e5 c0 0f ff 	ldmts	r0,r0-r11
8000094e:	78 80       	ld.w	r0,r12[0x20]
80000950:	9b 00       	st.w	sp[0x0],r0
80000952:	78 60       	ld.w	r0,r12[0x18]
80000954:	78 71       	ld.w	r1,r12[0x1c]
80000956:	78 cc       	ld.w	r12,r12[0x30]
80000958:	d6 13       	rets

8000095a <ROSA_yield>:
8000095a:	d4 01       	pushm	lr
8000095c:	fe ce ff fa 	sub	lr,pc,-6
80000960:	d7 33       	scall

80000962 <_yield>:
80000962:	cd 0f       	rcall	80000902 <contextSave>
80000964:	f0 1f 00 04 	mcall	80000974 <_yield+0x12>
80000968:	ce 5f       	rcall	80000932 <contextRestore>
8000096a:	00 00       	add	r0,r0
8000096c:	00 00       	add	r0,r0
8000096e:	05 50       	ld.sh	r0,--r2
80000970:	00 00       	add	r0,r0
80000972:	05 80       	ld.ub	r0,r2[0x0]
80000974:	80 00       	ld.sh	r0,r0[0x0]
80000976:	09 78       	ld.ub	r8,--r4

80000978 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000978:	eb cd 40 80 	pushm	r7,lr
8000097c:	1a 97       	mov	r7,sp
8000097e:	20 3d       	sub	sp,12
	interruptDisable();
80000980:	f0 1f 00 19 	mcall	800009e4 <scheduler+0x6c>
	tcb * iterator = SUSPENDEDLIST;
80000984:	49 98       	lddpc	r8,800009e8 <scheduler+0x70>
80000986:	70 08       	ld.w	r8,r8[0x0]
80000988:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
8000098c:	f0 1f 00 18 	mcall	800009ec <scheduler+0x74>
80000990:	14 98       	mov	r8,r10
80000992:	16 99       	mov	r9,r11
80000994:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000998:	c0 d8       	rjmp	800009b2 <scheduler+0x3a>
	{
		ROSA_tcbUnsuspend(iterator);
8000099a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000099e:	f0 1f 00 15 	mcall	800009f0 <scheduler+0x78>
		ROSA_tcbInstall(iterator);
800009a2:	ee fc ff f4 	ld.w	r12,r7[-12]
800009a6:	f0 1f 00 14 	mcall	800009f4 <scheduler+0x7c>
		iterator = SUSPENDEDLIST;
800009aa:	49 08       	lddpc	r8,800009e8 <scheduler+0x70>
800009ac:	70 08       	ld.w	r8,r8[0x0]
800009ae:	ef 48 ff f4 	st.w	r7[-12],r8
void scheduler(void)
{
	interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
800009b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009b6:	58 08       	cp.w	r8,0
800009b8:	c0 c0       	breq	800009d0 <scheduler+0x58>
800009ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009be:	f0 ea 00 68 	ld.d	r10,r8[104]
800009c2:	ee e8 ff f8 	ld.d	r8,r7[-8]
800009c6:	10 3a       	cp.w	r10,r8
800009c8:	f2 0b 13 00 	cpc	r11,r9
800009cc:	fe 98 ff e7 	brls	8000099a <scheduler+0x22>
			//iterator = NULL;
		//}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	EXECTASK=TCBLIST;
800009d0:	48 a8       	lddpc	r8,800009f8 <scheduler+0x80>
800009d2:	70 09       	ld.w	r9,r8[0x0]
800009d4:	48 a8       	lddpc	r8,800009fc <scheduler+0x84>
800009d6:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
800009d8:	f0 1f 00 0a 	mcall	80000a00 <scheduler+0x88>
}
800009dc:	2f dd       	sub	sp,-12
800009de:	e3 cd 80 80 	ldm	sp++,r7,pc
800009e2:	00 00       	add	r0,r0
800009e4:	80 00       	ld.sh	r0,r0[0x0]
800009e6:	1b 66       	ld.uh	r6,--sp
800009e8:	00 00       	add	r0,r0
800009ea:	05 58       	ld.sh	r8,--r2
800009ec:	80 00       	ld.sh	r0,r0[0x0]
800009ee:	0a f0       	st.b	--r5,r0
800009f0:	80 00       	ld.sh	r0,r0[0x0]
800009f2:	06 08       	add	r8,r3
800009f4:	80 00       	ld.sh	r0,r0[0x0]
800009f6:	03 78       	ld.ub	r8,--r1
800009f8:	00 00       	add	r0,r0
800009fa:	05 50       	ld.sh	r0,--r2
800009fc:	00 00       	add	r0,r0
800009fe:	05 80       	ld.ub	r0,r2[0x0]
80000a00:	80 00       	ld.sh	r0,r0[0x0]
80000a02:	1b 6a       	ld.uh	r10,--sp

80000a04 <C.0.9448>:
80000a04:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000a14 <timerISR>:
80000a14:	eb cd 40 80 	pushm	r7,lr
80000a18:	1a 97       	mov	r7,sp
80000a1a:	20 2d       	sub	sp,8
80000a1c:	fe 78 38 00 	mov	r8,-51200
80000a20:	ef 48 ff fc 	st.w	r7[-4],r8
80000a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a28:	70 88       	ld.w	r8,r8[0x20]
80000a2a:	ef 48 ff f8 	st.w	r7[-8],r8
80000a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a32:	e2 18 00 10 	andl	r8,0x10,COH
80000a36:	c0 30       	breq	80000a3c <timerISR+0x28>
80000a38:	f0 1f 00 03 	mcall	80000a44 <timerISR+0x30>
80000a3c:	2f ed       	sub	sp,-8
80000a3e:	e3 cd 40 80 	ldm	sp++,r7,lr
80000a42:	d6 03       	rete
80000a44:	80 00       	ld.sh	r0,r0[0x0]
80000a46:	01 a8       	ld.ub	r8,r0[0x2]

80000a48 <timerPeriodSet>:
80000a48:	eb cd 40 80 	pushm	r7,lr
80000a4c:	1a 97       	mov	r7,sp
80000a4e:	20 7d       	sub	sp,28
80000a50:	ef 4c ff e4 	st.w	r7[-28],r12
80000a54:	4a 48       	lddpc	r8,80000ae4 <timerPeriodSet+0x9c>
80000a56:	ee ca 00 18 	sub	r10,r7,24
80000a5a:	10 9b       	mov	r11,r8
80000a5c:	f6 e8 00 00 	ld.d	r8,r11[0]
80000a60:	f4 e9 00 00 	st.d	r10[0],r8
80000a64:	f6 e8 00 08 	ld.d	r8,r11[8]
80000a68:	f4 e9 00 08 	st.d	r10[8],r8
80000a6c:	30 48       	mov	r8,4
80000a6e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a76:	20 18       	sub	r8,1
80000a78:	a3 68       	lsl	r8,0x2
80000a7a:	ee 08 00 08 	add	r8,r7,r8
80000a7e:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000a82:	e0 68 1b 00 	mov	r8,6912
80000a86:	ea 18 00 b7 	orh	r8,0xb7
80000a8a:	f0 09 0c 08 	divs	r8,r8,r9
80000a8e:	10 99       	mov	r9,r8
80000a90:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000a94:	b1 39       	mul	r9,r8
80000a96:	e0 68 4d d3 	mov	r8,19923
80000a9a:	ea 18 10 62 	orh	r8,0x1062
80000a9e:	f2 08 06 48 	mulu.d	r8,r9,r8
80000aa2:	f2 08 16 06 	lsr	r8,r9,0x6
80000aa6:	ef 48 ff f8 	st.w	r7[-8],r8
80000aaa:	ee fc ff fc 	ld.w	r12,r7[-4]
80000aae:	f0 1f 00 0f 	mcall	80000ae8 <timerPeriodSet+0xa0>
80000ab2:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ab6:	f0 1f 00 0e 	mcall	80000aec <timerPeriodSet+0xa4>
80000aba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ac2:	f2 08 02 4a 	mul	r10,r9,r8
80000ac6:	e0 68 9f 81 	mov	r8,40833
80000aca:	ea 18 16 5e 	orh	r8,0x165e
80000ace:	f4 08 04 48 	muls.d	r8,r10,r8
80000ad2:	b5 49       	asr	r9,0x14
80000ad4:	f4 08 14 1f 	asr	r8,r10,0x1f
80000ad8:	f2 08 01 08 	sub	r8,r9,r8
80000adc:	10 9c       	mov	r12,r8
80000ade:	2f 9d       	sub	sp,-28
80000ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ae4:	80 00       	ld.sh	r0,r0[0x0]
80000ae6:	0a 04       	add	r4,r5
80000ae8:	80 00       	ld.sh	r0,r0[0x0]
80000aea:	11 6c       	ld.uh	r12,--r8
80000aec:	80 00       	ld.sh	r0,r0[0x0]
80000aee:	11 56       	ld.sh	r6,--r8

80000af0 <ROSA_getTickCount>:
80000af0:	eb cd 40 80 	pushm	r7,lr
80000af4:	1a 97       	mov	r7,sp
80000af6:	48 48       	lddpc	r8,80000b04 <ROSA_getTickCount+0x14>
80000af8:	f0 e8 00 00 	ld.d	r8,r8[0]
80000afc:	10 9a       	mov	r10,r8
80000afe:	12 9b       	mov	r11,r9
80000b00:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b04:	00 00       	add	r0,r0
80000b06:	05 68       	ld.uh	r8,--r2

80000b08 <buttonInit>:
80000b08:	eb cd 40 80 	pushm	r7,lr
80000b0c:	1a 97       	mov	r7,sp
80000b0e:	30 1b       	mov	r11,1
80000b10:	35 8c       	mov	r12,88
80000b12:	f0 1f 00 07 	mcall	80000b2c <buttonInit+0x24>
80000b16:	30 1b       	mov	r11,1
80000b18:	35 5c       	mov	r12,85
80000b1a:	f0 1f 00 05 	mcall	80000b2c <buttonInit+0x24>
80000b1e:	30 1b       	mov	r11,1
80000b20:	35 2c       	mov	r12,82
80000b22:	f0 1f 00 03 	mcall	80000b2c <buttonInit+0x24>
80000b26:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b2a:	00 00       	add	r0,r0
80000b2c:	80 00       	ld.sh	r0,r0[0x0]
80000b2e:	0b 9c       	ld.ub	r12,r5[0x1]

80000b30 <joystickInit>:
80000b30:	eb cd 40 80 	pushm	r7,lr
80000b34:	1a 97       	mov	r7,sp
80000b36:	30 1b       	mov	r11,1
80000b38:	31 bc       	mov	r12,27
80000b3a:	f0 1f 00 0b 	mcall	80000b64 <joystickInit+0x34>
80000b3e:	30 1b       	mov	r11,1
80000b40:	31 9c       	mov	r12,25
80000b42:	f0 1f 00 09 	mcall	80000b64 <joystickInit+0x34>
80000b46:	30 1b       	mov	r11,1
80000b48:	31 cc       	mov	r12,28
80000b4a:	f0 1f 00 07 	mcall	80000b64 <joystickInit+0x34>
80000b4e:	30 1b       	mov	r11,1
80000b50:	31 4c       	mov	r12,20
80000b52:	f0 1f 00 05 	mcall	80000b64 <joystickInit+0x34>
80000b56:	30 1b       	mov	r11,1
80000b58:	31 ac       	mov	r12,26
80000b5a:	f0 1f 00 03 	mcall	80000b64 <joystickInit+0x34>
80000b5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b62:	00 00       	add	r0,r0
80000b64:	80 00       	ld.sh	r0,r0[0x0]
80000b66:	0b 9c       	ld.ub	r12,r5[0x1]

80000b68 <delay_ms>:
80000b68:	eb cd 40 80 	pushm	r7,lr
80000b6c:	1a 97       	mov	r7,sp
80000b6e:	20 2d       	sub	sp,8
80000b70:	ef 4c ff f8 	st.w	r7[-8],r12
80000b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b78:	e0 69 04 42 	mov	r9,1090
80000b7c:	b3 38       	mul	r8,r9
80000b7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000b82:	c0 68       	rjmp	80000b8e <delay_ms+0x26>
80000b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b88:	20 18       	sub	r8,1
80000b8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b92:	58 08       	cp.w	r8,0
80000b94:	cf 81       	brne	80000b84 <delay_ms+0x1c>
80000b96:	2f ed       	sub	sp,-8
80000b98:	e3 cd 80 80 	ldm	sp++,r7,pc

80000b9c <gpioInit>:
80000b9c:	eb cd 40 80 	pushm	r7,lr
80000ba0:	1a 97       	mov	r7,sp
80000ba2:	20 7d       	sub	sp,28
80000ba4:	ef 4c ff ec 	st.w	r7[-20],r12
80000ba8:	ef 4b ff e8 	st.w	r7[-24],r11
80000bac:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bb0:	a5 58       	asr	r8,0x5
80000bb2:	ef 48 ff f4 	st.w	r7[-12],r8
80000bb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000bba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000bbe:	ef 48 ff fc 	st.w	r7[-4],r8
80000bc2:	30 19       	mov	r9,1
80000bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc8:	f2 08 09 48 	lsl	r8,r9,r8
80000bcc:	ef 48 ff f8 	st.w	r7[-8],r8
80000bd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000bd4:	a9 68       	lsl	r8,0x8
80000bd6:	e0 28 f0 00 	sub	r8,61440
80000bda:	ef 48 ff f0 	st.w	r7[-16],r8
80000bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000be2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000be6:	91 19       	st.w	r8[0x4],r9
80000be8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bf0:	91 69       	st.w	r8[0x18],r9
80000bf2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000bf6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000bfa:	91 a9       	st.w	r8[0x28],r9
80000bfc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c00:	ef 48 ff e4 	st.w	r7[-28],r8
80000c04:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c08:	58 08       	cp.w	r8,0
80000c0a:	c0 60       	breq	80000c16 <gpioInit+0x7a>
80000c0c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c10:	58 18       	cp.w	r8,1
80000c12:	c0 90       	breq	80000c24 <gpioInit+0x88>
80000c14:	c0 f8       	rjmp	80000c32 <gpioInit+0x96>
80000c16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c1e:	f1 49 00 44 	st.w	r8[68],r9
80000c22:	c0 e8       	rjmp	80000c3e <gpioInit+0xa2>
80000c24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c2c:	f1 49 00 48 	st.w	r8[72],r9
80000c30:	c0 78       	rjmp	80000c3e <gpioInit+0xa2>
80000c32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c3a:	f1 49 00 48 	st.w	r8[72],r9
80000c3e:	2f 9d       	sub	sp,-28
80000c40:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c44 <gpioClear>:
80000c44:	eb cd 40 80 	pushm	r7,lr
80000c48:	1a 97       	mov	r7,sp
80000c4a:	20 5d       	sub	sp,20
80000c4c:	ef 4c ff ec 	st.w	r7[-20],r12
80000c50:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c54:	a5 58       	asr	r8,0x5
80000c56:	ef 48 ff f4 	st.w	r7[-12],r8
80000c5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c5e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c62:	ef 48 ff fc 	st.w	r7[-4],r8
80000c66:	30 19       	mov	r9,1
80000c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c6c:	f2 08 09 48 	lsl	r8,r9,r8
80000c70:	ef 48 ff f8 	st.w	r7[-8],r8
80000c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c78:	a9 68       	lsl	r8,0x8
80000c7a:	e0 28 f0 00 	sub	r8,61440
80000c7e:	ef 48 ff f0 	st.w	r7[-16],r8
80000c82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c8a:	f1 49 00 58 	st.w	r8[88],r9
80000c8e:	2f bd       	sub	sp,-20
80000c90:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c94 <gpioSet>:
80000c94:	eb cd 40 80 	pushm	r7,lr
80000c98:	1a 97       	mov	r7,sp
80000c9a:	20 5d       	sub	sp,20
80000c9c:	ef 4c ff ec 	st.w	r7[-20],r12
80000ca0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ca4:	a5 58       	asr	r8,0x5
80000ca6:	ef 48 ff f4 	st.w	r7[-12],r8
80000caa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000cb2:	ef 48 ff fc 	st.w	r7[-4],r8
80000cb6:	30 19       	mov	r9,1
80000cb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cbc:	f2 08 09 48 	lsl	r8,r9,r8
80000cc0:	ef 48 ff f8 	st.w	r7[-8],r8
80000cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cc8:	a9 68       	lsl	r8,0x8
80000cca:	e0 28 f0 00 	sub	r8,61440
80000cce:	ef 48 ff f0 	st.w	r7[-16],r8
80000cd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cda:	f1 49 00 54 	st.w	r8[84],r9
80000cde:	2f bd       	sub	sp,-20
80000ce0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ce4 <gpioToggle>:
80000ce4:	eb cd 40 80 	pushm	r7,lr
80000ce8:	1a 97       	mov	r7,sp
80000cea:	20 5d       	sub	sp,20
80000cec:	ef 4c ff ec 	st.w	r7[-20],r12
80000cf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cf4:	a5 58       	asr	r8,0x5
80000cf6:	ef 48 ff f4 	st.w	r7[-12],r8
80000cfa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cfe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d02:	ef 48 ff fc 	st.w	r7[-4],r8
80000d06:	30 19       	mov	r9,1
80000d08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d0c:	f2 08 09 48 	lsl	r8,r9,r8
80000d10:	ef 48 ff f8 	st.w	r7[-8],r8
80000d14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d18:	a9 68       	lsl	r8,0x8
80000d1a:	e0 28 f0 00 	sub	r8,61440
80000d1e:	ef 48 ff f0 	st.w	r7[-16],r8
80000d22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d2a:	f1 49 00 5c 	st.w	r8[92],r9
80000d2e:	2f bd       	sub	sp,-20
80000d30:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d34 <ledInit>:
80000d34:	eb cd 40 80 	pushm	r7,lr
80000d38:	1a 97       	mov	r7,sp
80000d3a:	20 9d       	sub	sp,36
80000d3c:	49 e8       	lddpc	r8,80000db4 <ledInit+0x80>
80000d3e:	ee cb 00 24 	sub	r11,r7,36
80000d42:	10 9a       	mov	r10,r8
80000d44:	f4 e8 00 00 	ld.d	r8,r10[0]
80000d48:	f6 e9 00 00 	st.d	r11[0],r8
80000d4c:	f4 e8 00 08 	ld.d	r8,r10[8]
80000d50:	f6 e9 00 08 	st.d	r11[8],r8
80000d54:	f4 e8 00 10 	ld.d	r8,r10[16]
80000d58:	f6 e9 00 10 	st.d	r11[16],r8
80000d5c:	f4 e8 00 18 	ld.d	r8,r10[24]
80000d60:	f6 e9 00 18 	st.d	r11[24],r8
80000d64:	30 08       	mov	r8,0
80000d66:	ef 48 ff fc 	st.w	r7[-4],r8
80000d6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d6e:	a3 68       	lsl	r8,0x2
80000d70:	ee 08 00 08 	add	r8,r7,r8
80000d74:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d78:	10 9c       	mov	r12,r8
80000d7a:	f0 1f 00 10 	mcall	80000db8 <ledInit+0x84>
80000d7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d82:	a3 68       	lsl	r8,0x2
80000d84:	ee 08 00 08 	add	r8,r7,r8
80000d88:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d8c:	30 0b       	mov	r11,0
80000d8e:	10 9c       	mov	r12,r8
80000d90:	f0 1f 00 0b 	mcall	80000dbc <ledInit+0x88>
80000d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d98:	58 78       	cp.w	r8,7
80000d9a:	5f 18       	srne	r8
80000d9c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000da4:	2f f8       	sub	r8,-1
80000da6:	ef 48 ff fc 	st.w	r7[-4],r8
80000daa:	58 09       	cp.w	r9,0
80000dac:	cd f1       	brne	80000d6a <ledInit+0x36>
80000dae:	2f 7d       	sub	sp,-36
80000db0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000db4:	80 00       	ld.sh	r0,r0[0x0]
80000db6:	1e 00       	add	r0,pc
80000db8:	80 00       	ld.sh	r0,r0[0x0]
80000dba:	0d e0       	ld.ub	r0,r6[0x6]
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	0b 9c       	ld.ub	r12,r5[0x1]

80000dc0 <ledOn>:
80000dc0:	eb cd 40 80 	pushm	r7,lr
80000dc4:	1a 97       	mov	r7,sp
80000dc6:	20 1d       	sub	sp,4
80000dc8:	ef 4c ff fc 	st.w	r7[-4],r12
80000dcc:	ee fc ff fc 	ld.w	r12,r7[-4]
80000dd0:	f0 1f 00 03 	mcall	80000ddc <ledOn+0x1c>
80000dd4:	2f fd       	sub	sp,-4
80000dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dda:	00 00       	add	r0,r0
80000ddc:	80 00       	ld.sh	r0,r0[0x0]
80000dde:	0c 44       	or	r4,r6

80000de0 <ledOff>:
80000de0:	eb cd 40 80 	pushm	r7,lr
80000de4:	1a 97       	mov	r7,sp
80000de6:	20 1d       	sub	sp,4
80000de8:	ef 4c ff fc 	st.w	r7[-4],r12
80000dec:	ee fc ff fc 	ld.w	r12,r7[-4]
80000df0:	f0 1f 00 03 	mcall	80000dfc <ledOff+0x1c>
80000df4:	2f fd       	sub	sp,-4
80000df6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dfa:	00 00       	add	r0,r0
80000dfc:	80 00       	ld.sh	r0,r0[0x0]
80000dfe:	0c 94       	mov	r4,r6

80000e00 <ledToggle>:
80000e00:	eb cd 40 80 	pushm	r7,lr
80000e04:	1a 97       	mov	r7,sp
80000e06:	20 1d       	sub	sp,4
80000e08:	ef 4c ff fc 	st.w	r7[-4],r12
80000e0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e10:	f0 1f 00 03 	mcall	80000e1c <ledToggle+0x1c>
80000e14:	2f fd       	sub	sp,-4
80000e16:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e1a:	00 00       	add	r0,r0
80000e1c:	80 00       	ld.sh	r0,r0[0x0]
80000e1e:	0c e4       	st.h	--r6,r4

80000e20 <potInit>:
80000e20:	d3 01       	pushm	r11-r12
80000e22:	e0 6c 10 00 	mov	r12,4096
80000e26:	ea 1c ff ff 	orh	r12,0xffff
80000e2a:	31 6b       	mov	r11,22
80000e2c:	99 2b       	st.w	r12[0x8],r11
80000e2e:	99 6b       	st.w	r12[0x18],r11
80000e30:	99 6b       	st.w	r12[0x18],r11
80000e32:	e0 6c 3c 00 	mov	r12,15360
80000e36:	ea 1c ff ff 	orh	r12,0xffff
80000e3a:	30 1b       	mov	r11,1
80000e3c:	99 0b       	st.w	r12[0x0],r11
80000e3e:	e0 6b 0f 1f 	mov	r11,3871
80000e42:	b1 6b       	lsl	r11,0x10
80000e44:	99 1b       	st.w	r12[0x4],r11
80000e46:	30 2b       	mov	r11,2
80000e48:	99 4b       	st.w	r12[0x10],r11
80000e4a:	d3 02       	popm	r11-r12
80000e4c:	1c 9f       	mov	pc,lr

80000e4e <potGetValue>:
80000e4e:	d1 81       	pushm	r10-r11
80000e50:	e0 6c 3c 00 	mov	r12,15360
80000e54:	ea 1c ff ff 	orh	r12,0xffff
80000e58:	30 2b       	mov	r11,2
80000e5a:	99 0b       	st.w	r12[0x0],r11

80000e5c <a1>:
80000e5c:	78 7a       	ld.w	r10,r12[0x1c]
80000e5e:	16 7a       	tst	r10,r11
80000e60:	cf e0       	breq	80000e5c <a1>
80000e62:	78 dc       	ld.w	r12,r12[0x34]
80000e64:	d1 82       	popm	r10-r11
80000e66:	1c 9f       	mov	pc,lr

80000e68 <usartReset>:
80000e68:	eb cd 40 80 	pushm	r7,lr
80000e6c:	1a 97       	mov	r7,sp
80000e6e:	20 3d       	sub	sp,12
80000e70:	ef 4c ff f8 	st.w	r7[-8],r12
80000e74:	f0 1f 00 16 	mcall	80000ecc <usartReset+0x64>
80000e78:	18 98       	mov	r8,r12
80000e7a:	ef 48 ff fc 	st.w	r7[-4],r8
80000e7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e82:	58 08       	cp.w	r8,0
80000e84:	c0 30       	breq	80000e8a <usartReset+0x22>
80000e86:	f0 1f 00 13 	mcall	80000ed0 <usartReset+0x68>
80000e8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e8e:	3f f8       	mov	r8,-1
80000e90:	93 38       	st.w	r9[0xc],r8
80000e92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e96:	70 58       	ld.w	r8,r8[0x14]
80000e98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e9c:	58 08       	cp.w	r8,0
80000e9e:	c0 30       	breq	80000ea4 <usartReset+0x3c>
80000ea0:	f0 1f 00 0d 	mcall	80000ed4 <usartReset+0x6c>
80000ea4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ea8:	30 08       	mov	r8,0
80000eaa:	93 18       	st.w	r9[0x4],r8
80000eac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eb0:	30 08       	mov	r8,0
80000eb2:	93 98       	st.w	r9[0x24],r8
80000eb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eb8:	30 08       	mov	r8,0
80000eba:	93 a8       	st.w	r9[0x28],r8
80000ebc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ec0:	ea 68 61 0c 	mov	r8,680204
80000ec4:	93 08       	st.w	r9[0x0],r8
80000ec6:	2f dd       	sub	sp,-12
80000ec8:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ecc:	80 00       	ld.sh	r0,r0[0x0]
80000ece:	1b 6e       	ld.uh	lr,--sp
80000ed0:	80 00       	ld.sh	r0,r0[0x0]
80000ed2:	1b 66       	ld.uh	r6,--sp
80000ed4:	80 00       	ld.sh	r0,r0[0x0]
80000ed6:	1b 6a       	ld.uh	r10,--sp

80000ed8 <usartSetBaudrate>:
80000ed8:	eb cd 40 80 	pushm	r7,lr
80000edc:	1a 97       	mov	r7,sp
80000ede:	20 bd       	sub	sp,44
80000ee0:	ef 4c ff ec 	st.w	r7[-20],r12
80000ee4:	ef 4b ff e8 	st.w	r7[-24],r11
80000ee8:	ef 4a ff e4 	st.w	r7[-28],r10
80000eec:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ef0:	f0 09 15 04 	lsl	r9,r8,0x4
80000ef4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ef8:	10 39       	cp.w	r9,r8
80000efa:	e0 8b 00 06 	brhi	80000f06 <usartSetBaudrate+0x2e>
80000efe:	31 09       	mov	r9,16
80000f00:	ef 49 ff d4 	st.w	r7[-44],r9
80000f04:	c0 48       	rjmp	80000f0c <usartSetBaudrate+0x34>
80000f06:	30 88       	mov	r8,8
80000f08:	ef 48 ff d4 	st.w	r7[-44],r8
80000f0c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000f10:	ef 49 ff f0 	st.w	r7[-16],r9
80000f14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f18:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f1c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f24:	f2 08 02 48 	mul	r8,r9,r8
80000f28:	a1 98       	lsr	r8,0x1
80000f2a:	10 0a       	add	r10,r8
80000f2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f34:	f2 08 02 48 	mul	r8,r9,r8
80000f38:	f4 08 0d 08 	divu	r8,r10,r8
80000f3c:	ef 48 ff f4 	st.w	r7[-12],r8
80000f40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f44:	a3 98       	lsr	r8,0x3
80000f46:	ef 48 ff f8 	st.w	r7[-8],r8
80000f4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f4e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000f52:	ef 48 ff fc 	st.w	r7[-4],r8
80000f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f5a:	58 08       	cp.w	r8,0
80000f5c:	c0 70       	breq	80000f6a <usartSetBaudrate+0x92>
80000f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f62:	e0 48 ff ff 	cp.w	r8,65535
80000f66:	e0 88 00 06 	brls	80000f72 <usartSetBaudrate+0x9a>
80000f6a:	30 18       	mov	r8,1
80000f6c:	ef 48 ff d8 	st.w	r7[-40],r8
80000f70:	c2 c8       	rjmp	80000fc8 <usartSetBaudrate+0xf0>
80000f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f76:	70 18       	ld.w	r8,r8[0x4]
80000f78:	10 99       	mov	r9,r8
80000f7a:	e4 19 ff f7 	andh	r9,0xfff7
80000f7e:	e0 19 fe cf 	andl	r9,0xfecf
80000f82:	ef 49 ff dc 	st.w	r7[-36],r9
80000f86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f8a:	59 08       	cp.w	r8,16
80000f8c:	c0 60       	breq	80000f98 <usartSetBaudrate+0xc0>
80000f8e:	e8 68 00 00 	mov	r8,524288
80000f92:	ef 48 ff e0 	st.w	r7[-32],r8
80000f96:	c0 48       	rjmp	80000f9e <usartSetBaudrate+0xc6>
80000f98:	30 09       	mov	r9,0
80000f9a:	ef 49 ff e0 	st.w	r7[-32],r9
80000f9e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000fa2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000fa6:	10 49       	or	r9,r8
80000fa8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fac:	91 19       	st.w	r8[0x4],r9
80000fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fb2:	f0 09 15 10 	lsl	r9,r8,0x10
80000fb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fba:	10 49       	or	r9,r8
80000fbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fc0:	91 89       	st.w	r8[0x20],r9
80000fc2:	30 09       	mov	r9,0
80000fc4:	ef 49 ff d8 	st.w	r7[-40],r9
80000fc8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000fcc:	10 9c       	mov	r12,r8
80000fce:	2f 5d       	sub	sp,-44
80000fd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fd4 <usartInit>:
80000fd4:	eb cd 40 80 	pushm	r7,lr
80000fd8:	1a 97       	mov	r7,sp
80000fda:	20 4d       	sub	sp,16
80000fdc:	ef 4c ff f8 	st.w	r7[-8],r12
80000fe0:	ef 4b ff f4 	st.w	r7[-12],r11
80000fe4:	ef 4a ff f0 	st.w	r7[-16],r10
80000fe8:	fe 78 10 00 	mov	r8,-61440
80000fec:	ef 48 ff fc 	st.w	r7[-4],r8
80000ff0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000ff4:	30 18       	mov	r8,1
80000ff6:	93 28       	st.w	r9[0x8],r8
80000ff8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000ffc:	30 28       	mov	r8,2
80000ffe:	93 28       	st.w	r9[0x8],r8
80001000:	ee fc ff f8 	ld.w	r12,r7[-8]
80001004:	f0 1f 00 3b 	mcall	800010f0 <usartInit+0x11c>
80001008:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000100c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001010:	70 08       	ld.w	r8,r8[0x0]
80001012:	12 9a       	mov	r10,r9
80001014:	10 9b       	mov	r11,r8
80001016:	ee fc ff f8 	ld.w	r12,r7[-8]
8000101a:	f0 1f 00 37 	mcall	800010f4 <usartInit+0x120>
8000101e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001022:	11 c9       	ld.ub	r9,r8[0x4]
80001024:	30 98       	mov	r8,9
80001026:	f0 09 18 00 	cp.b	r9,r8
8000102a:	c0 a1       	brne	8000103e <usartInit+0x6a>
8000102c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001030:	70 18       	ld.w	r8,r8[0x4]
80001032:	10 99       	mov	r9,r8
80001034:	b1 b9       	sbr	r9,0x11
80001036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103a:	91 19       	st.w	r8[0x4],r9
8000103c:	c0 d8       	rjmp	80001056 <usartInit+0x82>
8000103e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001042:	70 19       	ld.w	r9,r8[0x4]
80001044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001048:	11 c8       	ld.ub	r8,r8[0x4]
8000104a:	20 58       	sub	r8,5
8000104c:	a7 68       	lsl	r8,0x6
8000104e:	10 49       	or	r9,r8
80001050:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001054:	91 19       	st.w	r8[0x4],r9
80001056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000105a:	70 1a       	ld.w	r10,r8[0x4]
8000105c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001060:	11 d8       	ld.ub	r8,r8[0x5]
80001062:	f0 09 15 09 	lsl	r9,r8,0x9
80001066:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000106a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000106e:	af 68       	lsl	r8,0xe
80001070:	f3 e8 10 08 	or	r8,r9,r8
80001074:	f5 e8 10 09 	or	r9,r10,r8
80001078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000107c:	91 19       	st.w	r8[0x4],r9
8000107e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001082:	90 39       	ld.sh	r9,r8[0x6]
80001084:	30 28       	mov	r8,2
80001086:	f0 09 19 00 	cp.h	r9,r8
8000108a:	e0 88 00 14 	brls	800010b2 <usartInit+0xde>
8000108e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001092:	70 18       	ld.w	r8,r8[0x4]
80001094:	10 99       	mov	r9,r8
80001096:	ad b9       	sbr	r9,0xd
80001098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109c:	91 19       	st.w	r8[0x4],r9
8000109e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010a2:	90 38       	ld.sh	r8,r8[0x6]
800010a4:	5c 78       	castu.h	r8
800010a6:	20 28       	sub	r8,2
800010a8:	10 99       	mov	r9,r8
800010aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ae:	91 a9       	st.w	r8[0x28],r9
800010b0:	c0 d8       	rjmp	800010ca <usartInit+0xf6>
800010b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b6:	70 19       	ld.w	r9,r8[0x4]
800010b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010bc:	90 38       	ld.sh	r8,r8[0x6]
800010be:	5c 78       	castu.h	r8
800010c0:	ad 68       	lsl	r8,0xc
800010c2:	10 49       	or	r9,r8
800010c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010c8:	91 19       	st.w	r8[0x4],r9
800010ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ce:	70 18       	ld.w	r8,r8[0x4]
800010d0:	10 99       	mov	r9,r8
800010d2:	e0 19 ff f0 	andl	r9,0xfff0
800010d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010da:	91 19       	st.w	r8[0x4],r9
800010dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010e0:	35 08       	mov	r8,80
800010e2:	93 08       	st.w	r9[0x0],r8
800010e4:	30 08       	mov	r8,0
800010e6:	10 9c       	mov	r12,r8
800010e8:	2f cd       	sub	sp,-16
800010ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800010ee:	00 00       	add	r0,r0
800010f0:	80 00       	ld.sh	r0,r0[0x0]
800010f2:	0e 68       	and	r8,r7
800010f4:	80 00       	ld.sh	r0,r0[0x0]
800010f6:	0e d8       	st.w	--r7,r8

800010f8 <timerInit>:
800010f8:	d5 01       	pushm	r11,lr
800010fa:	d2 01       	pushm	r12
800010fc:	f0 1f 00 28 	mcall	8000119c <timerClearInterrupt+0x10>
80001100:	f0 1f 00 28 	mcall	800011a0 <timerClearInterrupt+0x14>
80001104:	e0 6c 38 00 	mov	r12,14336
80001108:	ea 1c ff ff 	orh	r12,0xffff
8000110c:	e0 6b c0 00 	mov	r11,49152
80001110:	ea 1b 00 00 	orh	r11,0x0
80001114:	99 1b       	st.w	r12[0x4],r11
80001116:	30 1b       	mov	r11,1
80001118:	a5 6b       	lsl	r11,0x4
8000111a:	99 9b       	st.w	r12[0x24],r11
8000111c:	d2 02       	popm	r12
8000111e:	f0 1f 00 22 	mcall	800011a4 <timerClearInterrupt+0x18>
80001122:	d5 02       	popm	r11,lr
80001124:	1c 9f       	mov	pc,lr

80001126 <timerReset>:
80001126:	d3 01       	pushm	r11-r12
80001128:	e0 6c 38 00 	mov	r12,14336
8000112c:	ea 1c ff ff 	orh	r12,0xffff
80001130:	30 5b       	mov	r11,5
80001132:	99 0b       	st.w	r12[0x0],r11
80001134:	e0 6b 00 08 	mov	r11,8
80001138:	ea 1b 00 00 	orh	r11,0x0
8000113c:	76 0b       	ld.w	r11,r11[0x0]
8000113e:	99 7b       	st.w	r12[0x1c],r11
80001140:	d3 02       	popm	r11-r12
80001142:	1c 9f       	mov	pc,lr

80001144 <timerStop>:
80001144:	d3 01       	pushm	r11-r12
80001146:	e0 6c 38 00 	mov	r12,14336
8000114a:	ea 1c ff ff 	orh	r12,0xffff
8000114e:	30 2b       	mov	r11,2
80001150:	99 0b       	st.w	r12[0x0],r11
80001152:	d3 02       	popm	r11-r12
80001154:	1c 9f       	mov	pc,lr

80001156 <timerRCSet>:
80001156:	d3 01       	pushm	r11-r12
80001158:	49 4b       	lddpc	r11,800011a8 <timerClearInterrupt+0x1c>
8000115a:	97 0c       	st.w	r11[0x0],r12
8000115c:	e0 6c 38 00 	mov	r12,14336
80001160:	ea 1c ff ff 	orh	r12,0xffff
80001164:	76 0b       	ld.w	r11,r11[0x0]
80001166:	99 7b       	st.w	r12[0x1c],r11
80001168:	d3 02       	popm	r11-r12
8000116a:	1c 9f       	mov	pc,lr

8000116c <timerPrescaleSet>:
8000116c:	d3 81       	pushm	r10-r12
8000116e:	49 0b       	lddpc	r11,800011ac <timerClearInterrupt+0x20>
80001170:	97 0c       	st.w	r11[0x0],r12
80001172:	e0 6c 38 00 	mov	r12,14336
80001176:	ea 1c ff ff 	orh	r12,0xffff
8000117a:	78 1a       	ld.w	r10,r12[0x4]
8000117c:	3f 8b       	mov	r11,-8
8000117e:	16 6a       	and	r10,r11
80001180:	48 bb       	lddpc	r11,800011ac <timerClearInterrupt+0x20>
80001182:	76 0b       	ld.w	r11,r11[0x0]
80001184:	14 4b       	or	r11,r10
80001186:	99 1b       	st.w	r12[0x4],r11
80001188:	d3 82       	popm	r10-r12
8000118a:	1c 9f       	mov	pc,lr

8000118c <timerClearInterrupt>:
8000118c:	d2 01       	pushm	r12
8000118e:	e0 6c 38 00 	mov	r12,14336
80001192:	ea 1c ff ff 	orh	r12,0xffff
80001196:	78 8c       	ld.w	r12,r12[0x20]
80001198:	d2 02       	popm	r12
8000119a:	1c 9f       	mov	pc,lr
8000119c:	80 00       	ld.sh	r0,r0[0x0]
8000119e:	1b 66       	ld.uh	r6,--sp
800011a0:	80 00       	ld.sh	r0,r0[0x0]
800011a2:	11 8c       	ld.ub	r12,r8[0x0]
800011a4:	80 00       	ld.sh	r0,r0[0x0]
800011a6:	0a 48       	or	r8,r5
800011a8:	00 00       	add	r0,r0
800011aa:	00 08       	add	r8,r0
800011ac:	00 00       	add	r0,r0
800011ae:	00 0c       	add	r12,r0

800011b0 <_stext>:
800011b0:	49 7d       	lddpc	sp,8000120c <udata_end+0x4>
800011b2:	49 80       	lddpc	r0,80001210 <udata_end+0x8>
800011b4:	1a d0       	st.w	--sp,r0
800011b6:	e5 cd 20 00 	ldmts	sp,sp
800011ba:	1b 00       	ld.w	r0,sp++
800011bc:	49 60       	lddpc	r0,80001214 <udata_end+0xc>
800011be:	e3 b0 00 01 	mtsr	0x4,r0
800011c2:	d5 53       	csrf	0x15
800011c4:	e0 6c 0c 00 	mov	r12,3072
800011c8:	ea 1c ff ff 	orh	r12,0xffff
800011cc:	e0 6b 01 07 	mov	r11,263
800011d0:	99 ab       	st.w	r12[0x28],r11
800011d2:	30 4b       	mov	r11,4
800011d4:	99 0b       	st.w	r12[0x0],r11
800011d6:	e0 6a 00 80 	mov	r10,128

800011da <xw8>:
800011da:	79 5b       	ld.w	r11,r12[0x54]
800011dc:	14 7b       	tst	r11,r10
800011de:	cf e0       	breq	800011da <xw8>
800011e0:	30 5b       	mov	r11,5
800011e2:	99 0b       	st.w	r12[0x0],r11

800011e4 <idata_>:
800011e4:	48 d0       	lddpc	r0,80001218 <udata_end+0x10>
800011e6:	48 e1       	lddpc	r1,8000121c <udata_end+0x14>
800011e8:	02 30       	cp.w	r0,r1
800011ea:	c0 62       	brcc	800011f6 <idata_end>
800011ec:	48 d2       	lddpc	r2,80001220 <udata_end+0x18>

800011ee <idata_loop>:
800011ee:	05 04       	ld.w	r4,r2++
800011f0:	00 a4       	st.w	r0++,r4
800011f2:	02 30       	cp.w	r0,r1
800011f4:	cf d3       	brcs	800011ee <idata_loop>

800011f6 <idata_end>:
800011f6:	48 c0       	lddpc	r0,80001224 <udata_end+0x1c>
800011f8:	48 c1       	lddpc	r1,80001228 <udata_end+0x20>
800011fa:	02 30       	cp.w	r0,r1
800011fc:	c0 62       	brcc	80001208 <udata_end>
800011fe:	30 02       	mov	r2,0
80001200:	30 03       	mov	r3,0

80001202 <udata_loop>:
80001202:	00 a2       	st.w	r0++,r2
80001204:	02 30       	cp.w	r0,r1
80001206:	cf e3       	brcs	80001202 <udata_loop>

80001208 <udata_end>:
80001208:	48 9f       	lddpc	pc,8000122c <udata_end+0x24>
8000120a:	00 00       	add	r0,r0
8000120c:	00 01       	add	r1,r0
8000120e:	00 00       	add	r0,r0
80001210:	00 00       	add	r0,r0
80001212:	f0 00       	*unknown*
80001214:	80 00       	ld.sh	r0,r0[0x0]
80001216:	1a 00       	add	r0,sp
80001218:	00 00       	add	r0,r0
8000121a:	00 08       	add	r8,r0
8000121c:	00 00       	add	r0,r0
8000121e:	05 18       	ld.sh	r8,r2++
80001220:	80 00       	ld.sh	r0,r0[0x0]
80001222:	1e 88       	andn	r8,pc
80001224:	00 00       	add	r0,r0
80001226:	05 18       	ld.sh	r8,r2++
80001228:	00 00       	add	r0,r0
8000122a:	05 88       	ld.ub	r8,r2[0x0]
8000122c:	80 00       	ld.sh	r0,r0[0x0]
8000122e:	01 58       	ld.sh	r8,--r0

80001230 <calloc>:
80001230:	d4 01       	pushm	lr
80001232:	48 48       	lddpc	r8,80001240 <calloc+0x10>
80001234:	16 9a       	mov	r10,r11
80001236:	18 9b       	mov	r11,r12
80001238:	70 0c       	ld.w	r12,r8[0x0]
8000123a:	f0 1f 00 03 	mcall	80001244 <calloc+0x14>
8000123e:	d8 02       	popm	pc
80001240:	00 00       	add	r0,r0
80001242:	01 00       	ld.w	r0,r0++
80001244:	80 00       	ld.sh	r0,r0[0x0]
80001246:	12 48       	or	r8,r9

80001248 <_calloc_r>:
80001248:	d4 21       	pushm	r4-r7,lr
8000124a:	f4 0b 02 4b 	mul	r11,r10,r11
8000124e:	f0 1f 00 15 	mcall	800012a0 <_calloc_r+0x58>
80001252:	18 97       	mov	r7,r12
80001254:	c2 30       	breq	8000129a <_calloc_r+0x52>
80001256:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000125a:	e0 1a ff fc 	andl	r10,0xfffc
8000125e:	20 4a       	sub	r10,4
80001260:	e0 4a 00 24 	cp.w	r10,36
80001264:	e0 8b 00 18 	brhi	80001294 <_calloc_r+0x4c>
80001268:	18 98       	mov	r8,r12
8000126a:	59 3a       	cp.w	r10,19
8000126c:	e0 88 00 0f 	brls	8000128a <_calloc_r+0x42>
80001270:	30 09       	mov	r9,0
80001272:	10 a9       	st.w	r8++,r9
80001274:	10 a9       	st.w	r8++,r9
80001276:	59 ba       	cp.w	r10,27
80001278:	e0 88 00 09 	brls	8000128a <_calloc_r+0x42>
8000127c:	10 a9       	st.w	r8++,r9
8000127e:	10 a9       	st.w	r8++,r9
80001280:	e0 4a 00 24 	cp.w	r10,36
80001284:	c0 31       	brne	8000128a <_calloc_r+0x42>
80001286:	10 a9       	st.w	r8++,r9
80001288:	10 a9       	st.w	r8++,r9
8000128a:	30 09       	mov	r9,0
8000128c:	10 a9       	st.w	r8++,r9
8000128e:	91 19       	st.w	r8[0x4],r9
80001290:	91 09       	st.w	r8[0x0],r9
80001292:	c0 48       	rjmp	8000129a <_calloc_r+0x52>
80001294:	30 0b       	mov	r11,0
80001296:	f0 1f 00 04 	mcall	800012a4 <_calloc_r+0x5c>
8000129a:	0e 9c       	mov	r12,r7
8000129c:	d8 22       	popm	r4-r7,pc
8000129e:	00 00       	add	r0,r0
800012a0:	80 00       	ld.sh	r0,r0[0x0]
800012a2:	12 c0       	st.b	r9++,r0
800012a4:	80 00       	ld.sh	r0,r0[0x0]
800012a6:	17 10       	ld.sh	r0,r11++

800012a8 <free>:
800012a8:	d4 01       	pushm	lr
800012aa:	48 48       	lddpc	r8,800012b8 <free+0x10>
800012ac:	18 9b       	mov	r11,r12
800012ae:	70 0c       	ld.w	r12,r8[0x0]
800012b0:	f0 1f 00 03 	mcall	800012bc <free+0x14>
800012b4:	d8 02       	popm	pc
800012b6:	00 00       	add	r0,r0
800012b8:	00 00       	add	r0,r0
800012ba:	01 00       	ld.w	r0,r0++
800012bc:	80 00       	ld.sh	r0,r0[0x0]
800012be:	18 40       	or	r0,r12

800012c0 <_malloc_r>:
800012c0:	d4 31       	pushm	r0-r7,lr
800012c2:	f6 c8 ff f5 	sub	r8,r11,-11
800012c6:	18 95       	mov	r5,r12
800012c8:	10 97       	mov	r7,r8
800012ca:	e0 17 ff f8 	andl	r7,0xfff8
800012ce:	59 68       	cp.w	r8,22
800012d0:	f9 b7 08 10 	movls	r7,16
800012d4:	16 37       	cp.w	r7,r11
800012d6:	5f 38       	srlo	r8
800012d8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800012dc:	c0 50       	breq	800012e6 <_malloc_r+0x26>
800012de:	30 c8       	mov	r8,12
800012e0:	99 38       	st.w	r12[0xc],r8
800012e2:	e0 8f 01 f3 	bral	800016c8 <_malloc_r+0x408>
800012e6:	f0 1f 00 50 	mcall	80001424 <_malloc_r+0x164>
800012ea:	e0 47 01 f7 	cp.w	r7,503
800012ee:	e0 8b 00 1c 	brhi	80001326 <_malloc_r+0x66>
800012f2:	ee 03 16 03 	lsr	r3,r7,0x3
800012f6:	4c d8       	lddpc	r8,80001428 <_malloc_r+0x168>
800012f8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800012fc:	70 36       	ld.w	r6,r8[0xc]
800012fe:	10 36       	cp.w	r6,r8
80001300:	c0 61       	brne	8000130c <_malloc_r+0x4c>
80001302:	ec c8 ff f8 	sub	r8,r6,-8
80001306:	70 36       	ld.w	r6,r8[0xc]
80001308:	10 36       	cp.w	r6,r8
8000130a:	c0 c0       	breq	80001322 <_malloc_r+0x62>
8000130c:	6c 18       	ld.w	r8,r6[0x4]
8000130e:	e0 18 ff fc 	andl	r8,0xfffc
80001312:	6c 3a       	ld.w	r10,r6[0xc]
80001314:	ec 08 00 09 	add	r9,r6,r8
80001318:	0a 9c       	mov	r12,r5
8000131a:	6c 28       	ld.w	r8,r6[0x8]
8000131c:	95 28       	st.w	r10[0x8],r8
8000131e:	91 3a       	st.w	r8[0xc],r10
80001320:	c4 68       	rjmp	800013ac <_malloc_r+0xec>
80001322:	2f e3       	sub	r3,-2
80001324:	c4 c8       	rjmp	800013bc <_malloc_r+0xfc>
80001326:	ee 03 16 09 	lsr	r3,r7,0x9
8000132a:	c0 41       	brne	80001332 <_malloc_r+0x72>
8000132c:	ee 03 16 03 	lsr	r3,r7,0x3
80001330:	c2 68       	rjmp	8000137c <_malloc_r+0xbc>
80001332:	58 43       	cp.w	r3,4
80001334:	e0 8b 00 06 	brhi	80001340 <_malloc_r+0x80>
80001338:	ee 03 16 06 	lsr	r3,r7,0x6
8000133c:	2c 83       	sub	r3,-56
8000133e:	c1 f8       	rjmp	8000137c <_malloc_r+0xbc>
80001340:	59 43       	cp.w	r3,20
80001342:	e0 8b 00 04 	brhi	8000134a <_malloc_r+0x8a>
80001346:	2a 53       	sub	r3,-91
80001348:	c1 a8       	rjmp	8000137c <_malloc_r+0xbc>
8000134a:	e0 43 00 54 	cp.w	r3,84
8000134e:	e0 8b 00 06 	brhi	8000135a <_malloc_r+0x9a>
80001352:	ee 03 16 0c 	lsr	r3,r7,0xc
80001356:	29 23       	sub	r3,-110
80001358:	c1 28       	rjmp	8000137c <_malloc_r+0xbc>
8000135a:	e0 43 01 54 	cp.w	r3,340
8000135e:	e0 8b 00 06 	brhi	8000136a <_malloc_r+0xaa>
80001362:	ee 03 16 0f 	lsr	r3,r7,0xf
80001366:	28 93       	sub	r3,-119
80001368:	c0 a8       	rjmp	8000137c <_malloc_r+0xbc>
8000136a:	e0 43 05 54 	cp.w	r3,1364
8000136e:	e0 88 00 04 	brls	80001376 <_malloc_r+0xb6>
80001372:	37 e3       	mov	r3,126
80001374:	c0 48       	rjmp	8000137c <_malloc_r+0xbc>
80001376:	ee 03 16 12 	lsr	r3,r7,0x12
8000137a:	28 43       	sub	r3,-124
8000137c:	4a ba       	lddpc	r10,80001428 <_malloc_r+0x168>
8000137e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80001382:	74 36       	ld.w	r6,r10[0xc]
80001384:	c1 98       	rjmp	800013b6 <_malloc_r+0xf6>
80001386:	6c 19       	ld.w	r9,r6[0x4]
80001388:	e0 19 ff fc 	andl	r9,0xfffc
8000138c:	f2 07 01 0b 	sub	r11,r9,r7
80001390:	58 fb       	cp.w	r11,15
80001392:	e0 8a 00 04 	brle	8000139a <_malloc_r+0xda>
80001396:	20 13       	sub	r3,1
80001398:	c1 18       	rjmp	800013ba <_malloc_r+0xfa>
8000139a:	6c 38       	ld.w	r8,r6[0xc]
8000139c:	58 0b       	cp.w	r11,0
8000139e:	c0 b5       	brlt	800013b4 <_malloc_r+0xf4>
800013a0:	6c 2a       	ld.w	r10,r6[0x8]
800013a2:	ec 09 00 09 	add	r9,r6,r9
800013a6:	0a 9c       	mov	r12,r5
800013a8:	91 2a       	st.w	r8[0x8],r10
800013aa:	95 38       	st.w	r10[0xc],r8
800013ac:	72 18       	ld.w	r8,r9[0x4]
800013ae:	a1 a8       	sbr	r8,0x0
800013b0:	93 18       	st.w	r9[0x4],r8
800013b2:	cb c8       	rjmp	8000152a <_malloc_r+0x26a>
800013b4:	10 96       	mov	r6,r8
800013b6:	14 36       	cp.w	r6,r10
800013b8:	ce 71       	brne	80001386 <_malloc_r+0xc6>
800013ba:	2f f3       	sub	r3,-1
800013bc:	49 ba       	lddpc	r10,80001428 <_malloc_r+0x168>
800013be:	f4 cc ff f8 	sub	r12,r10,-8
800013c2:	78 26       	ld.w	r6,r12[0x8]
800013c4:	18 36       	cp.w	r6,r12
800013c6:	c6 e0       	breq	800014a2 <_malloc_r+0x1e2>
800013c8:	6c 19       	ld.w	r9,r6[0x4]
800013ca:	e0 19 ff fc 	andl	r9,0xfffc
800013ce:	f2 07 01 08 	sub	r8,r9,r7
800013d2:	58 f8       	cp.w	r8,15
800013d4:	e0 89 00 90 	brgt	800014f4 <_malloc_r+0x234>
800013d8:	99 3c       	st.w	r12[0xc],r12
800013da:	99 2c       	st.w	r12[0x8],r12
800013dc:	58 08       	cp.w	r8,0
800013de:	c0 55       	brlt	800013e8 <_malloc_r+0x128>
800013e0:	ec 09 00 09 	add	r9,r6,r9
800013e4:	0a 9c       	mov	r12,r5
800013e6:	ce 3b       	rjmp	800013ac <_malloc_r+0xec>
800013e8:	e0 49 01 ff 	cp.w	r9,511
800013ec:	e0 8b 00 13 	brhi	80001412 <_malloc_r+0x152>
800013f0:	a3 99       	lsr	r9,0x3
800013f2:	f4 09 00 38 	add	r8,r10,r9<<0x3
800013f6:	70 2b       	ld.w	r11,r8[0x8]
800013f8:	8d 38       	st.w	r6[0xc],r8
800013fa:	8d 2b       	st.w	r6[0x8],r11
800013fc:	97 36       	st.w	r11[0xc],r6
800013fe:	91 26       	st.w	r8[0x8],r6
80001400:	a3 49       	asr	r9,0x2
80001402:	74 18       	ld.w	r8,r10[0x4]
80001404:	30 1b       	mov	r11,1
80001406:	f6 09 09 49 	lsl	r9,r11,r9
8000140a:	f1 e9 10 09 	or	r9,r8,r9
8000140e:	95 19       	st.w	r10[0x4],r9
80001410:	c4 98       	rjmp	800014a2 <_malloc_r+0x1e2>
80001412:	f2 0a 16 09 	lsr	r10,r9,0x9
80001416:	58 4a       	cp.w	r10,4
80001418:	e0 8b 00 0a 	brhi	8000142c <_malloc_r+0x16c>
8000141c:	f2 0a 16 06 	lsr	r10,r9,0x6
80001420:	2c 8a       	sub	r10,-56
80001422:	c2 38       	rjmp	80001468 <_malloc_r+0x1a8>
80001424:	80 00       	ld.sh	r0,r0[0x0]
80001426:	17 1e       	ld.sh	lr,r11++
80001428:	00 00       	add	r0,r0
8000142a:	01 04       	ld.w	r4,r0++
8000142c:	59 4a       	cp.w	r10,20
8000142e:	e0 8b 00 04 	brhi	80001436 <_malloc_r+0x176>
80001432:	2a 5a       	sub	r10,-91
80001434:	c1 a8       	rjmp	80001468 <_malloc_r+0x1a8>
80001436:	e0 4a 00 54 	cp.w	r10,84
8000143a:	e0 8b 00 06 	brhi	80001446 <_malloc_r+0x186>
8000143e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80001442:	29 2a       	sub	r10,-110
80001444:	c1 28       	rjmp	80001468 <_malloc_r+0x1a8>
80001446:	e0 4a 01 54 	cp.w	r10,340
8000144a:	e0 8b 00 06 	brhi	80001456 <_malloc_r+0x196>
8000144e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80001452:	28 9a       	sub	r10,-119
80001454:	c0 a8       	rjmp	80001468 <_malloc_r+0x1a8>
80001456:	e0 4a 05 54 	cp.w	r10,1364
8000145a:	e0 88 00 04 	brls	80001462 <_malloc_r+0x1a2>
8000145e:	37 ea       	mov	r10,126
80001460:	c0 48       	rjmp	80001468 <_malloc_r+0x1a8>
80001462:	f2 0a 16 12 	lsr	r10,r9,0x12
80001466:	28 4a       	sub	r10,-124
80001468:	4c 8b       	lddpc	r11,80001588 <_malloc_r+0x2c8>
8000146a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000146e:	68 28       	ld.w	r8,r4[0x8]
80001470:	08 38       	cp.w	r8,r4
80001472:	c0 e1       	brne	8000148e <_malloc_r+0x1ce>
80001474:	76 19       	ld.w	r9,r11[0x4]
80001476:	a3 4a       	asr	r10,0x2
80001478:	30 1e       	mov	lr,1
8000147a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000147e:	f3 ea 10 0a 	or	r10,r9,r10
80001482:	10 99       	mov	r9,r8
80001484:	97 1a       	st.w	r11[0x4],r10
80001486:	c0 a8       	rjmp	8000149a <_malloc_r+0x1da>
80001488:	70 28       	ld.w	r8,r8[0x8]
8000148a:	08 38       	cp.w	r8,r4
8000148c:	c0 60       	breq	80001498 <_malloc_r+0x1d8>
8000148e:	70 1a       	ld.w	r10,r8[0x4]
80001490:	e0 1a ff fc 	andl	r10,0xfffc
80001494:	14 39       	cp.w	r9,r10
80001496:	cf 93       	brcs	80001488 <_malloc_r+0x1c8>
80001498:	70 39       	ld.w	r9,r8[0xc]
8000149a:	8d 39       	st.w	r6[0xc],r9
8000149c:	8d 28       	st.w	r6[0x8],r8
8000149e:	91 36       	st.w	r8[0xc],r6
800014a0:	93 26       	st.w	r9[0x8],r6
800014a2:	e6 08 14 02 	asr	r8,r3,0x2
800014a6:	30 1b       	mov	r11,1
800014a8:	4b 84       	lddpc	r4,80001588 <_malloc_r+0x2c8>
800014aa:	f6 08 09 4b 	lsl	r11,r11,r8
800014ae:	68 18       	ld.w	r8,r4[0x4]
800014b0:	10 3b       	cp.w	r11,r8
800014b2:	e0 8b 00 6f 	brhi	80001590 <_malloc_r+0x2d0>
800014b6:	f7 e8 00 09 	and	r9,r11,r8
800014ba:	c0 b1       	brne	800014d0 <_malloc_r+0x210>
800014bc:	e0 13 ff fc 	andl	r3,0xfffc
800014c0:	a1 7b       	lsl	r11,0x1
800014c2:	2f c3       	sub	r3,-4
800014c4:	c0 38       	rjmp	800014ca <_malloc_r+0x20a>
800014c6:	2f c3       	sub	r3,-4
800014c8:	a1 7b       	lsl	r11,0x1
800014ca:	f7 e8 00 09 	and	r9,r11,r8
800014ce:	cf c0       	breq	800014c6 <_malloc_r+0x206>
800014d0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800014d4:	06 92       	mov	r2,r3
800014d6:	1c 91       	mov	r1,lr
800014d8:	62 36       	ld.w	r6,r1[0xc]
800014da:	c2 e8       	rjmp	80001536 <_malloc_r+0x276>
800014dc:	6c 1a       	ld.w	r10,r6[0x4]
800014de:	e0 1a ff fc 	andl	r10,0xfffc
800014e2:	f4 07 01 08 	sub	r8,r10,r7
800014e6:	58 f8       	cp.w	r8,15
800014e8:	e0 8a 00 15 	brle	80001512 <_malloc_r+0x252>
800014ec:	6c 3a       	ld.w	r10,r6[0xc]
800014ee:	6c 29       	ld.w	r9,r6[0x8]
800014f0:	95 29       	st.w	r10[0x8],r9
800014f2:	93 3a       	st.w	r9[0xc],r10
800014f4:	0e 99       	mov	r9,r7
800014f6:	ec 07 00 07 	add	r7,r6,r7
800014fa:	a1 a9       	sbr	r9,0x0
800014fc:	99 37       	st.w	r12[0xc],r7
800014fe:	99 27       	st.w	r12[0x8],r7
80001500:	8d 19       	st.w	r6[0x4],r9
80001502:	ee 08 09 08 	st.w	r7[r8],r8
80001506:	8f 2c       	st.w	r7[0x8],r12
80001508:	8f 3c       	st.w	r7[0xc],r12
8000150a:	a1 a8       	sbr	r8,0x0
8000150c:	0a 9c       	mov	r12,r5
8000150e:	8f 18       	st.w	r7[0x4],r8
80001510:	c0 d8       	rjmp	8000152a <_malloc_r+0x26a>
80001512:	6c 39       	ld.w	r9,r6[0xc]
80001514:	58 08       	cp.w	r8,0
80001516:	c0 f5       	brlt	80001534 <_malloc_r+0x274>
80001518:	ec 0a 00 0a 	add	r10,r6,r10
8000151c:	74 18       	ld.w	r8,r10[0x4]
8000151e:	a1 a8       	sbr	r8,0x0
80001520:	0a 9c       	mov	r12,r5
80001522:	95 18       	st.w	r10[0x4],r8
80001524:	6c 28       	ld.w	r8,r6[0x8]
80001526:	93 28       	st.w	r9[0x8],r8
80001528:	91 39       	st.w	r8[0xc],r9
8000152a:	f0 1f 00 19 	mcall	8000158c <_malloc_r+0x2cc>
8000152e:	ec cc ff f8 	sub	r12,r6,-8
80001532:	d8 32       	popm	r0-r7,pc
80001534:	12 96       	mov	r6,r9
80001536:	02 36       	cp.w	r6,r1
80001538:	cd 21       	brne	800014dc <_malloc_r+0x21c>
8000153a:	2f f2       	sub	r2,-1
8000153c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001540:	c0 30       	breq	80001546 <_malloc_r+0x286>
80001542:	2f 81       	sub	r1,-8
80001544:	cc ab       	rjmp	800014d8 <_malloc_r+0x218>
80001546:	1c 98       	mov	r8,lr
80001548:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000154c:	c0 81       	brne	8000155c <_malloc_r+0x29c>
8000154e:	68 19       	ld.w	r9,r4[0x4]
80001550:	f6 08 11 ff 	rsub	r8,r11,-1
80001554:	f3 e8 00 08 	and	r8,r9,r8
80001558:	89 18       	st.w	r4[0x4],r8
8000155a:	c0 78       	rjmp	80001568 <_malloc_r+0x2a8>
8000155c:	f0 c9 00 08 	sub	r9,r8,8
80001560:	20 13       	sub	r3,1
80001562:	70 08       	ld.w	r8,r8[0x0]
80001564:	12 38       	cp.w	r8,r9
80001566:	cf 10       	breq	80001548 <_malloc_r+0x288>
80001568:	a1 7b       	lsl	r11,0x1
8000156a:	68 18       	ld.w	r8,r4[0x4]
8000156c:	10 3b       	cp.w	r11,r8
8000156e:	e0 8b 00 11 	brhi	80001590 <_malloc_r+0x2d0>
80001572:	58 0b       	cp.w	r11,0
80001574:	c0 e0       	breq	80001590 <_malloc_r+0x2d0>
80001576:	04 93       	mov	r3,r2
80001578:	c0 38       	rjmp	8000157e <_malloc_r+0x2be>
8000157a:	2f c3       	sub	r3,-4
8000157c:	a1 7b       	lsl	r11,0x1
8000157e:	f7 e8 00 09 	and	r9,r11,r8
80001582:	ca 71       	brne	800014d0 <_malloc_r+0x210>
80001584:	cf bb       	rjmp	8000157a <_malloc_r+0x2ba>
80001586:	00 00       	add	r0,r0
80001588:	00 00       	add	r0,r0
8000158a:	01 04       	ld.w	r4,r0++
8000158c:	80 00       	ld.sh	r0,r0[0x0]
8000158e:	17 20       	ld.uh	r0,r11++
80001590:	68 23       	ld.w	r3,r4[0x8]
80001592:	66 12       	ld.w	r2,r3[0x4]
80001594:	e0 12 ff fc 	andl	r2,0xfffc
80001598:	0e 32       	cp.w	r2,r7
8000159a:	5f 39       	srlo	r9
8000159c:	e4 07 01 08 	sub	r8,r2,r7
800015a0:	58 f8       	cp.w	r8,15
800015a2:	5f aa       	srle	r10
800015a4:	f5 e9 10 09 	or	r9,r10,r9
800015a8:	e0 80 00 a2 	breq	800016ec <_malloc_r+0x42c>
800015ac:	4c 88       	lddpc	r8,800016cc <_malloc_r+0x40c>
800015ae:	70 01       	ld.w	r1,r8[0x0]
800015b0:	4c 88       	lddpc	r8,800016d0 <_malloc_r+0x410>
800015b2:	2f 01       	sub	r1,-16
800015b4:	70 08       	ld.w	r8,r8[0x0]
800015b6:	0e 01       	add	r1,r7
800015b8:	5b f8       	cp.w	r8,-1
800015ba:	c0 40       	breq	800015c2 <_malloc_r+0x302>
800015bc:	28 11       	sub	r1,-127
800015be:	e0 11 ff 80 	andl	r1,0xff80
800015c2:	02 9b       	mov	r11,r1
800015c4:	0a 9c       	mov	r12,r5
800015c6:	f0 1f 00 44 	mcall	800016d4 <_malloc_r+0x414>
800015ca:	18 96       	mov	r6,r12
800015cc:	5b fc       	cp.w	r12,-1
800015ce:	c6 e0       	breq	800016aa <_malloc_r+0x3ea>
800015d0:	e6 02 00 08 	add	r8,r3,r2
800015d4:	10 3c       	cp.w	r12,r8
800015d6:	c0 32       	brcc	800015dc <_malloc_r+0x31c>
800015d8:	08 33       	cp.w	r3,r4
800015da:	c6 81       	brne	800016aa <_malloc_r+0x3ea>
800015dc:	4b fa       	lddpc	r10,800016d8 <_malloc_r+0x418>
800015de:	74 09       	ld.w	r9,r10[0x0]
800015e0:	e2 09 00 09 	add	r9,r1,r9
800015e4:	95 09       	st.w	r10[0x0],r9
800015e6:	10 36       	cp.w	r6,r8
800015e8:	c0 a1       	brne	800015fc <_malloc_r+0x33c>
800015ea:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800015ee:	c0 71       	brne	800015fc <_malloc_r+0x33c>
800015f0:	e2 02 00 02 	add	r2,r1,r2
800015f4:	68 28       	ld.w	r8,r4[0x8]
800015f6:	a1 a2       	sbr	r2,0x0
800015f8:	91 12       	st.w	r8[0x4],r2
800015fa:	c4 c8       	rjmp	80001692 <_malloc_r+0x3d2>
800015fc:	4b 5a       	lddpc	r10,800016d0 <_malloc_r+0x410>
800015fe:	74 0b       	ld.w	r11,r10[0x0]
80001600:	5b fb       	cp.w	r11,-1
80001602:	c0 31       	brne	80001608 <_malloc_r+0x348>
80001604:	95 06       	st.w	r10[0x0],r6
80001606:	c0 68       	rjmp	80001612 <_malloc_r+0x352>
80001608:	ec 09 00 09 	add	r9,r6,r9
8000160c:	4b 3a       	lddpc	r10,800016d8 <_malloc_r+0x418>
8000160e:	10 19       	sub	r9,r8
80001610:	95 09       	st.w	r10[0x0],r9
80001612:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001616:	f0 09 11 08 	rsub	r9,r8,8
8000161a:	58 08       	cp.w	r8,0
8000161c:	f2 08 17 10 	movne	r8,r9
80001620:	ed d8 e1 06 	addne	r6,r6,r8
80001624:	28 08       	sub	r8,-128
80001626:	ec 01 00 01 	add	r1,r6,r1
8000162a:	0a 9c       	mov	r12,r5
8000162c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001630:	f0 01 01 01 	sub	r1,r8,r1
80001634:	02 9b       	mov	r11,r1
80001636:	f0 1f 00 28 	mcall	800016d4 <_malloc_r+0x414>
8000163a:	4a 88       	lddpc	r8,800016d8 <_malloc_r+0x418>
8000163c:	5b fc       	cp.w	r12,-1
8000163e:	ec 0c 17 00 	moveq	r12,r6
80001642:	f9 b1 00 00 	moveq	r1,0
80001646:	70 09       	ld.w	r9,r8[0x0]
80001648:	0c 1c       	sub	r12,r6
8000164a:	89 26       	st.w	r4[0x8],r6
8000164c:	02 0c       	add	r12,r1
8000164e:	12 01       	add	r1,r9
80001650:	a1 ac       	sbr	r12,0x0
80001652:	91 01       	st.w	r8[0x0],r1
80001654:	8d 1c       	st.w	r6[0x4],r12
80001656:	08 33       	cp.w	r3,r4
80001658:	c1 d0       	breq	80001692 <_malloc_r+0x3d2>
8000165a:	58 f2       	cp.w	r2,15
8000165c:	e0 8b 00 05 	brhi	80001666 <_malloc_r+0x3a6>
80001660:	30 18       	mov	r8,1
80001662:	8d 18       	st.w	r6[0x4],r8
80001664:	c2 38       	rjmp	800016aa <_malloc_r+0x3ea>
80001666:	30 59       	mov	r9,5
80001668:	20 c2       	sub	r2,12
8000166a:	e0 12 ff f8 	andl	r2,0xfff8
8000166e:	e6 02 00 08 	add	r8,r3,r2
80001672:	91 29       	st.w	r8[0x8],r9
80001674:	91 19       	st.w	r8[0x4],r9
80001676:	66 18       	ld.w	r8,r3[0x4]
80001678:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000167c:	e5 e8 10 08 	or	r8,r2,r8
80001680:	87 18       	st.w	r3[0x4],r8
80001682:	58 f2       	cp.w	r2,15
80001684:	e0 88 00 07 	brls	80001692 <_malloc_r+0x3d2>
80001688:	e6 cb ff f8 	sub	r11,r3,-8
8000168c:	0a 9c       	mov	r12,r5
8000168e:	f0 1f 00 14 	mcall	800016dc <_malloc_r+0x41c>
80001692:	49 49       	lddpc	r9,800016e0 <_malloc_r+0x420>
80001694:	72 0a       	ld.w	r10,r9[0x0]
80001696:	49 18       	lddpc	r8,800016d8 <_malloc_r+0x418>
80001698:	70 08       	ld.w	r8,r8[0x0]
8000169a:	14 38       	cp.w	r8,r10
8000169c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800016a0:	49 19       	lddpc	r9,800016e4 <_malloc_r+0x424>
800016a2:	72 0a       	ld.w	r10,r9[0x0]
800016a4:	14 38       	cp.w	r8,r10
800016a6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800016aa:	68 28       	ld.w	r8,r4[0x8]
800016ac:	70 18       	ld.w	r8,r8[0x4]
800016ae:	e0 18 ff fc 	andl	r8,0xfffc
800016b2:	0e 38       	cp.w	r8,r7
800016b4:	5f 39       	srlo	r9
800016b6:	0e 18       	sub	r8,r7
800016b8:	58 f8       	cp.w	r8,15
800016ba:	5f aa       	srle	r10
800016bc:	f5 e9 10 09 	or	r9,r10,r9
800016c0:	c1 60       	breq	800016ec <_malloc_r+0x42c>
800016c2:	0a 9c       	mov	r12,r5
800016c4:	f0 1f 00 09 	mcall	800016e8 <_malloc_r+0x428>
800016c8:	d8 3a       	popm	r0-r7,pc,r12=0
800016ca:	00 00       	add	r0,r0
800016cc:	00 00       	add	r0,r0
800016ce:	05 20       	ld.uh	r0,r2++
800016d0:	00 00       	add	r0,r0
800016d2:	05 10       	ld.sh	r0,r2++
800016d4:	80 00       	ld.sh	r0,r0[0x0]
800016d6:	17 24       	ld.uh	r4,r11++
800016d8:	00 00       	add	r0,r0
800016da:	05 24       	ld.uh	r4,r2++
800016dc:	80 00       	ld.sh	r0,r0[0x0]
800016de:	18 40       	or	r0,r12
800016e0:	00 00       	add	r0,r0
800016e2:	05 1c       	ld.sh	r12,r2++
800016e4:	00 00       	add	r0,r0
800016e6:	05 18       	ld.sh	r8,r2++
800016e8:	80 00       	ld.sh	r0,r0[0x0]
800016ea:	17 20       	ld.uh	r0,r11++
800016ec:	68 26       	ld.w	r6,r4[0x8]
800016ee:	a1 a8       	sbr	r8,0x0
800016f0:	0e 99       	mov	r9,r7
800016f2:	a1 a9       	sbr	r9,0x0
800016f4:	8d 19       	st.w	r6[0x4],r9
800016f6:	ec 07 00 07 	add	r7,r6,r7
800016fa:	0a 9c       	mov	r12,r5
800016fc:	89 27       	st.w	r4[0x8],r7
800016fe:	8f 18       	st.w	r7[0x4],r8
80001700:	f0 1f 00 03 	mcall	8000170c <_malloc_r+0x44c>
80001704:	ec cc ff f8 	sub	r12,r6,-8
80001708:	d8 32       	popm	r0-r7,pc
8000170a:	00 00       	add	r0,r0
8000170c:	80 00       	ld.sh	r0,r0[0x0]
8000170e:	17 20       	ld.uh	r0,r11++

80001710 <memset>:
80001710:	18 98       	mov	r8,r12
80001712:	c0 38       	rjmp	80001718 <memset+0x8>
80001714:	10 cb       	st.b	r8++,r11
80001716:	20 1a       	sub	r10,1
80001718:	58 0a       	cp.w	r10,0
8000171a:	cf d1       	brne	80001714 <memset+0x4>
8000171c:	5e fc       	retal	r12

8000171e <__malloc_lock>:
8000171e:	5e fc       	retal	r12

80001720 <__malloc_unlock>:
80001720:	5e fc       	retal	r12
80001722:	d7 03       	nop

80001724 <_sbrk_r>:
80001724:	d4 21       	pushm	r4-r7,lr
80001726:	30 08       	mov	r8,0
80001728:	18 97       	mov	r7,r12
8000172a:	48 76       	lddpc	r6,80001744 <_sbrk_r+0x20>
8000172c:	16 9c       	mov	r12,r11
8000172e:	8d 08       	st.w	r6[0x0],r8
80001730:	f0 1f 00 06 	mcall	80001748 <_sbrk_r+0x24>
80001734:	5b fc       	cp.w	r12,-1
80001736:	c0 51       	brne	80001740 <_sbrk_r+0x1c>
80001738:	6c 08       	ld.w	r8,r6[0x0]
8000173a:	58 08       	cp.w	r8,0
8000173c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001740:	d8 22       	popm	r4-r7,pc
80001742:	00 00       	add	r0,r0
80001744:	00 00       	add	r0,r0
80001746:	05 84       	ld.ub	r4,r2[0x0]
80001748:	80 00       	ld.sh	r0,r0[0x0]
8000174a:	17 4c       	ld.w	r12,--r11

8000174c <_sbrk>:
8000174c:	d4 01       	pushm	lr
8000174e:	48 c8       	lddpc	r8,8000177c <_sbrk+0x30>
80001750:	70 09       	ld.w	r9,r8[0x0]
80001752:	58 09       	cp.w	r9,0
80001754:	c0 31       	brne	8000175a <_sbrk+0xe>
80001756:	48 b9       	lddpc	r9,80001780 <_sbrk+0x34>
80001758:	91 09       	st.w	r8[0x0],r9
8000175a:	48 99       	lddpc	r9,8000177c <_sbrk+0x30>
8000175c:	48 aa       	lddpc	r10,80001784 <_sbrk+0x38>
8000175e:	72 08       	ld.w	r8,r9[0x0]
80001760:	f0 0c 00 0c 	add	r12,r8,r12
80001764:	14 3c       	cp.w	r12,r10
80001766:	e0 8b 00 04 	brhi	8000176e <_sbrk+0x22>
8000176a:	93 0c       	st.w	r9[0x0],r12
8000176c:	c0 68       	rjmp	80001778 <_sbrk+0x2c>
8000176e:	f0 1f 00 07 	mcall	80001788 <_sbrk+0x3c>
80001772:	30 c8       	mov	r8,12
80001774:	99 08       	st.w	r12[0x0],r8
80001776:	3f f8       	mov	r8,-1
80001778:	10 9c       	mov	r12,r8
8000177a:	d8 02       	popm	pc
8000177c:	00 00       	add	r0,r0
8000177e:	05 4c       	ld.w	r12,--r2
80001780:	00 00       	add	r0,r0
80001782:	05 88       	ld.ub	r8,r2[0x0]
80001784:	00 00       	add	r0,r0
80001786:	e0 00       	*unknown*
80001788:	80 00       	ld.sh	r0,r0[0x0]
8000178a:	17 8c       	ld.ub	r12,r11[0x0]

8000178c <__errno>:
8000178c:	48 28       	lddpc	r8,80001794 <__errno+0x8>
8000178e:	70 0c       	ld.w	r12,r8[0x0]
80001790:	2f 4c       	sub	r12,-12
80001792:	5e fc       	retal	r12
80001794:	00 00       	add	r0,r0
80001796:	01 00       	ld.w	r0,r0++

80001798 <_malloc_trim_r>:
80001798:	d4 21       	pushm	r4-r7,lr
8000179a:	16 95       	mov	r5,r11
8000179c:	18 97       	mov	r7,r12
8000179e:	f0 1f 00 23 	mcall	80001828 <_malloc_trim_r+0x90>
800017a2:	4a 34       	lddpc	r4,8000182c <_malloc_trim_r+0x94>
800017a4:	68 28       	ld.w	r8,r4[0x8]
800017a6:	70 16       	ld.w	r6,r8[0x4]
800017a8:	e0 16 ff fc 	andl	r6,0xfffc
800017ac:	ec c8 ff 91 	sub	r8,r6,-111
800017b0:	f0 05 01 05 	sub	r5,r8,r5
800017b4:	e0 15 ff 80 	andl	r5,0xff80
800017b8:	ea c5 00 80 	sub	r5,r5,128
800017bc:	e0 45 00 7f 	cp.w	r5,127
800017c0:	e0 8a 00 23 	brle	80001806 <_malloc_trim_r+0x6e>
800017c4:	30 0b       	mov	r11,0
800017c6:	0e 9c       	mov	r12,r7
800017c8:	f0 1f 00 1a 	mcall	80001830 <_malloc_trim_r+0x98>
800017cc:	68 28       	ld.w	r8,r4[0x8]
800017ce:	0c 08       	add	r8,r6
800017d0:	10 3c       	cp.w	r12,r8
800017d2:	c1 a1       	brne	80001806 <_malloc_trim_r+0x6e>
800017d4:	ea 0b 11 00 	rsub	r11,r5,0
800017d8:	0e 9c       	mov	r12,r7
800017da:	f0 1f 00 16 	mcall	80001830 <_malloc_trim_r+0x98>
800017de:	5b fc       	cp.w	r12,-1
800017e0:	c1 71       	brne	8000180e <_malloc_trim_r+0x76>
800017e2:	30 0b       	mov	r11,0
800017e4:	0e 9c       	mov	r12,r7
800017e6:	f0 1f 00 13 	mcall	80001830 <_malloc_trim_r+0x98>
800017ea:	68 28       	ld.w	r8,r4[0x8]
800017ec:	f8 08 01 09 	sub	r9,r12,r8
800017f0:	58 f9       	cp.w	r9,15
800017f2:	e0 8a 00 0a 	brle	80001806 <_malloc_trim_r+0x6e>
800017f6:	a1 a9       	sbr	r9,0x0
800017f8:	91 19       	st.w	r8[0x4],r9
800017fa:	48 f8       	lddpc	r8,80001834 <_malloc_trim_r+0x9c>
800017fc:	70 09       	ld.w	r9,r8[0x0]
800017fe:	48 f8       	lddpc	r8,80001838 <_malloc_trim_r+0xa0>
80001800:	f8 09 01 09 	sub	r9,r12,r9
80001804:	91 09       	st.w	r8[0x0],r9
80001806:	0e 9c       	mov	r12,r7
80001808:	f0 1f 00 0d 	mcall	8000183c <_malloc_trim_r+0xa4>
8000180c:	d8 2a       	popm	r4-r7,pc,r12=0
8000180e:	68 28       	ld.w	r8,r4[0x8]
80001810:	0a 16       	sub	r6,r5
80001812:	a1 a6       	sbr	r6,0x0
80001814:	91 16       	st.w	r8[0x4],r6
80001816:	48 98       	lddpc	r8,80001838 <_malloc_trim_r+0xa0>
80001818:	70 09       	ld.w	r9,r8[0x0]
8000181a:	0a 19       	sub	r9,r5
8000181c:	0e 9c       	mov	r12,r7
8000181e:	91 09       	st.w	r8[0x0],r9
80001820:	f0 1f 00 07 	mcall	8000183c <_malloc_trim_r+0xa4>
80001824:	da 2a       	popm	r4-r7,pc,r12=1
80001826:	00 00       	add	r0,r0
80001828:	80 00       	ld.sh	r0,r0[0x0]
8000182a:	17 1e       	ld.sh	lr,r11++
8000182c:	00 00       	add	r0,r0
8000182e:	01 04       	ld.w	r4,r0++
80001830:	80 00       	ld.sh	r0,r0[0x0]
80001832:	17 24       	ld.uh	r4,r11++
80001834:	00 00       	add	r0,r0
80001836:	05 10       	ld.sh	r0,r2++
80001838:	00 00       	add	r0,r0
8000183a:	05 24       	ld.uh	r4,r2++
8000183c:	80 00       	ld.sh	r0,r0[0x0]
8000183e:	17 20       	ld.uh	r0,r11++

80001840 <_free_r>:
80001840:	d4 21       	pushm	r4-r7,lr
80001842:	16 96       	mov	r6,r11
80001844:	18 97       	mov	r7,r12
80001846:	58 0b       	cp.w	r11,0
80001848:	e0 80 00 c8 	breq	800019d8 <_free_r+0x198>
8000184c:	f0 1f 00 4c 	mcall	8000197c <_free_r+0x13c>
80001850:	20 86       	sub	r6,8
80001852:	4c ca       	lddpc	r10,80001980 <_free_r+0x140>
80001854:	6c 18       	ld.w	r8,r6[0x4]
80001856:	74 2e       	ld.w	lr,r10[0x8]
80001858:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000185c:	a1 c8       	cbr	r8,0x0
8000185e:	ec 08 00 09 	add	r9,r6,r8
80001862:	72 1b       	ld.w	r11,r9[0x4]
80001864:	e0 1b ff fc 	andl	r11,0xfffc
80001868:	1c 39       	cp.w	r9,lr
8000186a:	c1 d1       	brne	800018a4 <_free_r+0x64>
8000186c:	f6 08 00 08 	add	r8,r11,r8
80001870:	58 0c       	cp.w	r12,0
80001872:	c0 81       	brne	80001882 <_free_r+0x42>
80001874:	6c 09       	ld.w	r9,r6[0x0]
80001876:	12 16       	sub	r6,r9
80001878:	12 08       	add	r8,r9
8000187a:	6c 3b       	ld.w	r11,r6[0xc]
8000187c:	6c 29       	ld.w	r9,r6[0x8]
8000187e:	97 29       	st.w	r11[0x8],r9
80001880:	93 3b       	st.w	r9[0xc],r11
80001882:	10 99       	mov	r9,r8
80001884:	95 26       	st.w	r10[0x8],r6
80001886:	a1 a9       	sbr	r9,0x0
80001888:	8d 19       	st.w	r6[0x4],r9
8000188a:	4b f9       	lddpc	r9,80001984 <_free_r+0x144>
8000188c:	72 09       	ld.w	r9,r9[0x0]
8000188e:	12 38       	cp.w	r8,r9
80001890:	c0 63       	brcs	8000189c <_free_r+0x5c>
80001892:	4b e8       	lddpc	r8,80001988 <_free_r+0x148>
80001894:	0e 9c       	mov	r12,r7
80001896:	70 0b       	ld.w	r11,r8[0x0]
80001898:	f0 1f 00 3d 	mcall	8000198c <_free_r+0x14c>
8000189c:	0e 9c       	mov	r12,r7
8000189e:	f0 1f 00 3d 	mcall	80001990 <_free_r+0x150>
800018a2:	d8 22       	popm	r4-r7,pc
800018a4:	93 1b       	st.w	r9[0x4],r11
800018a6:	58 0c       	cp.w	r12,0
800018a8:	c0 30       	breq	800018ae <_free_r+0x6e>
800018aa:	30 0c       	mov	r12,0
800018ac:	c1 08       	rjmp	800018cc <_free_r+0x8c>
800018ae:	6c 0e       	ld.w	lr,r6[0x0]
800018b0:	f4 c5 ff f8 	sub	r5,r10,-8
800018b4:	1c 16       	sub	r6,lr
800018b6:	1c 08       	add	r8,lr
800018b8:	6c 2e       	ld.w	lr,r6[0x8]
800018ba:	0a 3e       	cp.w	lr,r5
800018bc:	f9 bc 00 01 	moveq	r12,1
800018c0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800018c4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800018c8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800018cc:	f2 0b 00 0e 	add	lr,r9,r11
800018d0:	7c 1e       	ld.w	lr,lr[0x4]
800018d2:	ed be 00 00 	bld	lr,0x0
800018d6:	c1 30       	breq	800018fc <_free_r+0xbc>
800018d8:	16 08       	add	r8,r11
800018da:	58 0c       	cp.w	r12,0
800018dc:	c0 c1       	brne	800018f4 <_free_r+0xb4>
800018de:	4a 9e       	lddpc	lr,80001980 <_free_r+0x140>
800018e0:	72 2b       	ld.w	r11,r9[0x8]
800018e2:	2f 8e       	sub	lr,-8
800018e4:	1c 3b       	cp.w	r11,lr
800018e6:	c0 71       	brne	800018f4 <_free_r+0xb4>
800018e8:	97 36       	st.w	r11[0xc],r6
800018ea:	97 26       	st.w	r11[0x8],r6
800018ec:	8d 2b       	st.w	r6[0x8],r11
800018ee:	8d 3b       	st.w	r6[0xc],r11
800018f0:	30 1c       	mov	r12,1
800018f2:	c0 58       	rjmp	800018fc <_free_r+0xbc>
800018f4:	72 2b       	ld.w	r11,r9[0x8]
800018f6:	72 39       	ld.w	r9,r9[0xc]
800018f8:	93 2b       	st.w	r9[0x8],r11
800018fa:	97 39       	st.w	r11[0xc],r9
800018fc:	10 99       	mov	r9,r8
800018fe:	ec 08 09 08 	st.w	r6[r8],r8
80001902:	a1 a9       	sbr	r9,0x0
80001904:	8d 19       	st.w	r6[0x4],r9
80001906:	58 0c       	cp.w	r12,0
80001908:	c6 51       	brne	800019d2 <_free_r+0x192>
8000190a:	e0 48 01 ff 	cp.w	r8,511
8000190e:	e0 8b 00 13 	brhi	80001934 <_free_r+0xf4>
80001912:	a3 98       	lsr	r8,0x3
80001914:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001918:	72 2b       	ld.w	r11,r9[0x8]
8000191a:	8d 39       	st.w	r6[0xc],r9
8000191c:	8d 2b       	st.w	r6[0x8],r11
8000191e:	97 36       	st.w	r11[0xc],r6
80001920:	93 26       	st.w	r9[0x8],r6
80001922:	a3 48       	asr	r8,0x2
80001924:	74 19       	ld.w	r9,r10[0x4]
80001926:	30 1b       	mov	r11,1
80001928:	f6 08 09 48 	lsl	r8,r11,r8
8000192c:	f3 e8 10 08 	or	r8,r9,r8
80001930:	95 18       	st.w	r10[0x4],r8
80001932:	c5 08       	rjmp	800019d2 <_free_r+0x192>
80001934:	f0 0b 16 09 	lsr	r11,r8,0x9
80001938:	58 4b       	cp.w	r11,4
8000193a:	e0 8b 00 06 	brhi	80001946 <_free_r+0x106>
8000193e:	f0 0b 16 06 	lsr	r11,r8,0x6
80001942:	2c 8b       	sub	r11,-56
80001944:	c2 b8       	rjmp	8000199a <_free_r+0x15a>
80001946:	59 4b       	cp.w	r11,20
80001948:	e0 8b 00 04 	brhi	80001950 <_free_r+0x110>
8000194c:	2a 5b       	sub	r11,-91
8000194e:	c2 68       	rjmp	8000199a <_free_r+0x15a>
80001950:	e0 4b 00 54 	cp.w	r11,84
80001954:	e0 8b 00 06 	brhi	80001960 <_free_r+0x120>
80001958:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000195c:	29 2b       	sub	r11,-110
8000195e:	c1 e8       	rjmp	8000199a <_free_r+0x15a>
80001960:	e0 4b 01 54 	cp.w	r11,340
80001964:	e0 8b 00 06 	brhi	80001970 <_free_r+0x130>
80001968:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000196c:	28 9b       	sub	r11,-119
8000196e:	c1 68       	rjmp	8000199a <_free_r+0x15a>
80001970:	e0 4b 05 54 	cp.w	r11,1364
80001974:	e0 88 00 10 	brls	80001994 <_free_r+0x154>
80001978:	37 eb       	mov	r11,126
8000197a:	c1 08       	rjmp	8000199a <_free_r+0x15a>
8000197c:	80 00       	ld.sh	r0,r0[0x0]
8000197e:	17 1e       	ld.sh	lr,r11++
80001980:	00 00       	add	r0,r0
80001982:	01 04       	ld.w	r4,r0++
80001984:	00 00       	add	r0,r0
80001986:	05 0c       	ld.w	r12,r2++
80001988:	00 00       	add	r0,r0
8000198a:	05 20       	ld.uh	r0,r2++
8000198c:	80 00       	ld.sh	r0,r0[0x0]
8000198e:	17 98       	ld.ub	r8,r11[0x1]
80001990:	80 00       	ld.sh	r0,r0[0x0]
80001992:	17 20       	ld.uh	r0,r11++
80001994:	f0 0b 16 12 	lsr	r11,r8,0x12
80001998:	28 4b       	sub	r11,-124
8000199a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000199e:	78 29       	ld.w	r9,r12[0x8]
800019a0:	18 39       	cp.w	r9,r12
800019a2:	c0 e1       	brne	800019be <_free_r+0x17e>
800019a4:	74 18       	ld.w	r8,r10[0x4]
800019a6:	a3 4b       	asr	r11,0x2
800019a8:	30 1c       	mov	r12,1
800019aa:	f8 0b 09 4b 	lsl	r11,r12,r11
800019ae:	f1 eb 10 0b 	or	r11,r8,r11
800019b2:	12 98       	mov	r8,r9
800019b4:	95 1b       	st.w	r10[0x4],r11
800019b6:	c0 a8       	rjmp	800019ca <_free_r+0x18a>
800019b8:	72 29       	ld.w	r9,r9[0x8]
800019ba:	18 39       	cp.w	r9,r12
800019bc:	c0 60       	breq	800019c8 <_free_r+0x188>
800019be:	72 1a       	ld.w	r10,r9[0x4]
800019c0:	e0 1a ff fc 	andl	r10,0xfffc
800019c4:	14 38       	cp.w	r8,r10
800019c6:	cf 93       	brcs	800019b8 <_free_r+0x178>
800019c8:	72 38       	ld.w	r8,r9[0xc]
800019ca:	8d 38       	st.w	r6[0xc],r8
800019cc:	8d 29       	st.w	r6[0x8],r9
800019ce:	93 36       	st.w	r9[0xc],r6
800019d0:	91 26       	st.w	r8[0x8],r6
800019d2:	0e 9c       	mov	r12,r7
800019d4:	f0 1f 00 02 	mcall	800019dc <_free_r+0x19c>
800019d8:	d8 22       	popm	r4-r7,pc
800019da:	00 00       	add	r0,r0
800019dc:	80 00       	ld.sh	r0,r0[0x0]
800019de:	17 20       	ld.uh	r0,r11++

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
80001b02:	e0 6c 08 00 	mov	r12,2048
80001b06:	ea 1c ff ff 	orh	r12,0xffff
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
80001b0e:	e0 1c 00 01 	andl	r12,0x1
80001b12:	58 1c       	cp.w	r12,1
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
80001b1c:	d3 01       	pushm	r11-r12
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
80001b20:	16 9c       	mov	r12,r11
80001b22:	2f ec       	sub	r12,-2
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
80001b28:	18 3b       	cp.w	r11,r12
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
80001b2e:	b1 ac       	sbr	r12,0x10
80001b30:	9b 2c       	st.w	sp[0x8],r12
80001b32:	d3 02       	popm	r11-r12
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
80001b38:	18 3b       	cp.w	r11,r12
80001b3a:	c0 61       	brne	80001b46 <privexception>
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
80001b3e:	b1 cc       	cbr	r12,0x10
80001b40:	9b 2c       	st.w	sp[0x8],r12
80001b42:	d3 02       	popm	r11-r12
80001b44:	d6 03       	rete

80001b46 <privexception>:
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
80001b48:	d7 01       	pushm	r11-r12,lr
80001b4a:	fe cb 00 48 	sub	r11,pc,72
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
80001b50:	18 1b       	sub	r11,r12
80001b52:	30 0c       	mov	r12,0
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001b58:	e0 6c 08 38 	mov	r12,2104
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
80001b60:	99 0b       	st.w	r12[0x0],r11
80001b62:	d7 02       	popm	r11-r12,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
80001b66:	d3 03       	ssrf	0x10
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
80001b6a:	d5 03       	csrf	0x10
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
80001b72:	b1 8c       	lsr	r12,0x10
80001b74:	e0 1c 00 01 	andl	r12,0x1
80001b78:	ec 1c 00 01 	eorl	r12,0x1
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
80001b80:	78 0c       	ld.w	r12,r12[0x0]
80001b82:	99 60       	st.w	r12[0x18],r0
80001b84:	7a 90       	ld.w	r0,sp[0x24]
80001b86:	99 c0       	st.w	r12[0x30],r0
80001b88:	7a 60       	ld.w	r0,sp[0x18]
80001b8a:	99 80       	st.w	r12[0x20],r0
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
80001b92:	7a ab       	ld.w	r11,sp[0x28]
80001b94:	33 40       	mov	r0,52
80001b96:	18 00       	add	r0,r12
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
80001b9e:	f9 40 00 44 	st.w	r12[68],r0
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
80001ba4:	99 90       	st.w	r12[0x24],r0
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
80001ba8:	99 a0       	st.w	r12[0x28],r0
80001baa:	1a 90       	mov	r0,sp
80001bac:	1a d0       	st.w	--sp,r0
80001bae:	ed cd 20 00 	stmts	sp,sp
80001bb2:	1b 00       	ld.w	r0,sp++
80001bb4:	99 50       	st.w	r12[0x14],r0
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
80001bba:	78 0c       	ld.w	r12,r12[0x0]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
80001bbe:	1a d0       	st.w	--sp,r0
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
80001bc4:	1b 00       	ld.w	r0,sp++
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
80001bc8:	9b 80       	st.w	sp[0x20],r0
80001bca:	78 90       	ld.w	r0,r12[0x24]
80001bcc:	9b 70       	st.w	sp[0x1c],r0
80001bce:	33 40       	mov	r0,52
80001bd0:	18 00       	add	r0,r12
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11
80001bd6:	78 80       	ld.w	r0,r12[0x20]
80001bd8:	9b 60       	st.w	sp[0x18],r0
80001bda:	78 c0       	ld.w	r0,r12[0x30]
80001bdc:	9b 90       	st.w	sp[0x24],r0
80001bde:	9b ab       	st.w	sp[0x28],r11
80001be0:	9b ba       	st.w	sp[0x2c],r10
80001be2:	9b c9       	st.w	sp[0x30],r9
80001be4:	9b d8       	st.w	sp[0x34],r8
80001be6:	79 10       	ld.w	r0,r12[0x44]
80001be8:	9b 50       	st.w	sp[0x14],r0
80001bea:	78 60       	ld.w	r0,r12[0x18]
80001bec:	d4 01       	pushm	lr
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
80001bf2:	d4 02       	popm	lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	0a 14       	sub	r4,r5
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	05 80       	ld.ub	r0,r2[0x0]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	11 26       	ld.uh	r6,r8++
	...
