
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000019a4  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001a00  80001a00  00001e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001e00  80001e00  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001e84  80001e84  00002284  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000518  00000008  80001e88  00002408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000080  00000520  00000520  00000000  2**2
                  ALLOC
  9 .heap         0000da60  000005a0  000005a0  00000000  2**0
                  ALLOC
 10 .comment      000000a0  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005e0  00000000  00000000  000029c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000c66  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000c171  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000200f  00000000  00000000  0000fd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a57  00000000  00000000  00011d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000cb8  00000000  00000000  000167e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001d19  00000000  00000000  00017498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000019b3  00000000  00000000  000191b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00613b9c  00000000  00000000  0001ab64  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000528  00000000  00000000  0062e700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	11 94       	ld.ub	r4,r8[0x1]

Disassembly of section .text:

80000008 <insert_after>:
#include "include/kernel/lists.h"



int16_t insert_after( tcb * position_tcb, tcb * new_tcb )
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8

	//	printf("position tcb: %d\n", position_tcb);

	if(position_tcb != NULL && new_tcb != NULL)
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
	{
		new_tcb->nexttcb = position_tcb->nexttcb;
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
		new_tcb->prevtcb = position_tcb;
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
		position_tcb->nexttcb = new_tcb;
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
		new_tcb->nexttcb->prevtcb = new_tcb;
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
		
		result = 0;
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
	}

	return result;
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <ROSA_semaphoreCreate>:
#include "include/kernel/semaphore.h"

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 3d       	sub	sp,12
80000078:	ef 4c ff f8 	st.w	r7[-8],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f4 	st.b	r7[-12],r8
	int16_t result = -1;
80000082:	3f f8       	mov	r8,-1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
	
	(*handle) = calloc(1, sizeof(semaphore));
80000088:	31 4b       	mov	r11,20
8000008a:	30 1c       	mov	r12,1
8000008c:	f0 1f 00 13 	mcall	800000d8 <ROSA_semaphoreCreate+0x68>
80000090:	18 98       	mov	r8,r12
80000092:	10 99       	mov	r9,r8
80000094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000098:	91 09       	st.w	r8[0x0],r9
	(*handle)->flag = 0;		// 0 when semaphore is not locked, 1 when semaphore is locked
8000009a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	30 08       	mov	r8,0
800000a2:	b2 08       	st.h	r9[0x0],r8
	(*handle)->ceiling = ceiling;
800000a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000a8:	70 09       	ld.w	r9,r8[0x0]
800000aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000ae:	b2 a8       	st.b	r9[0x2],r8
	(*handle)->current_task = NULL;
800000b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	30 09       	mov	r9,0
800000b8:	91 19       	st.w	r8[0x4],r9
	(*handle)->task_priority = 15;
800000ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000be:	70 09       	ld.w	r9,r8[0x0]
800000c0:	30 f8       	mov	r8,15
800000c2:	f3 68 00 08 	st.b	r9[8],r8
	result = 0;
800000c6:	30 08       	mov	r8,0
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	return result;
800000cc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000d0:	10 9c       	mov	r12,r8
800000d2:	2f dd       	sub	sp,-12
800000d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	12 14       	sub	r4,r9

800000dc <usart_options>:
800000dc:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
800000ec:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
800000fc:	00 00 00 00                                         ....

80000100 <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
80000100:	eb cd 40 80 	pushm	r7,lr
80000104:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
80000106:	33 bc       	mov	r12,59
80000108:	f0 1f 00 06 	mcall	80000120 <task1+0x20>
		ledOff(LED1_GPIO);
8000010c:	33 cc       	mov	r12,60
8000010e:	f0 1f 00 06 	mcall	80000124 <task1+0x24>
		//delay_ms(abs(1000 - ROSA_getTickCount()));
		ROSA_delay(900);
80000112:	e0 6a 03 84 	mov	r10,900
80000116:	30 0b       	mov	r11,0
80000118:	f0 1f 00 04 	mcall	80000128 <task1+0x28>
	}
8000011c:	cf 5b       	rjmp	80000106 <task1+0x6>
8000011e:	00 00       	add	r0,r0
80000120:	80 00       	ld.sh	r0,r0[0x0]
80000122:	0d c4       	ld.ub	r4,r6[0x4]
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	0d e4       	ld.ub	r4,r6[0x6]
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	08 30       	cp.w	r0,r4

8000012c <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
8000012c:	eb cd 40 80 	pushm	r7,lr
80000130:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
80000132:	33 bc       	mov	r12,59
80000134:	f0 1f 00 06 	mcall	8000014c <task2+0x20>
		ledOn(LED1_GPIO);
80000138:	33 cc       	mov	r12,60
8000013a:	f0 1f 00 06 	mcall	80000150 <task2+0x24>
		ROSA_delay(400);
8000013e:	e0 6a 01 90 	mov	r10,400
80000142:	30 0b       	mov	r11,0
80000144:	f0 1f 00 04 	mcall	80000154 <task2+0x28>
		//delay_ms(abs(ROSA_getTickCount() - 1000));
	}
80000148:	cf 5b       	rjmp	80000132 <task2+0x6>
8000014a:	00 00       	add	r0,r0
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	0d e4       	ld.ub	r4,r6[0x6]
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	0d c4       	ld.ub	r4,r6[0x4]
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	08 30       	cp.w	r0,r4

80000158 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000158:	eb cd 40 80 	pushm	r7,lr
8000015c:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
8000015e:	f0 1f 00 0c 	mcall	8000018c <main+0x34>
	ROSA_semaphoreCreate(&S1,1);
80000162:	30 1b       	mov	r11,1
80000164:	48 bc       	lddpc	r12,80000190 <main+0x38>
80000166:	f0 1f 00 0c 	mcall	80000194 <main+0x3c>


	ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 3);
8000016a:	30 38       	mov	r8,3
8000016c:	34 09       	mov	r9,64
8000016e:	48 ba       	lddpc	r10,80000198 <main+0x40>
80000170:	48 bb       	lddpc	r11,8000019c <main+0x44>
80000172:	48 cc       	lddpc	r12,800001a0 <main+0x48>
80000174:	f0 1f 00 0c 	mcall	800001a4 <main+0x4c>
	ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
80000178:	30 38       	mov	r8,3
8000017a:	34 09       	mov	r9,64
8000017c:	48 ba       	lddpc	r10,800001a8 <main+0x50>
8000017e:	48 cb       	lddpc	r11,800001ac <main+0x54>
80000180:	48 cc       	lddpc	r12,800001b0 <main+0x58>
80000182:	f0 1f 00 09 	mcall	800001a4 <main+0x4c>
	//ROSA_taskCreate(& task5_handle, "tsk5", taskA, 0x40, 3);
	//ROSA_taskCreate(& task2_handle, "tsk5", taskB, 0x40, 2);
	//ROSA_taskCreate(& task4_handle, "tsk5", taskC, 0x40, 1);
	
	//Start the ROSA kernel
	ROSA_start();
80000186:	f0 1f 00 0c 	mcall	800001b4 <main+0x5c>
	/* Execution will never return here */
	while(1);
8000018a:	c0 08       	rjmp	8000018a <main+0x32>
8000018c:	80 00       	ld.sh	r0,r0[0x0]
8000018e:	02 24       	rsub	r4,r1
80000190:	00 00       	add	r0,r0
80000192:	05 7c       	ld.ub	r12,--r2
80000194:	80 00       	ld.sh	r0,r0[0x0]
80000196:	00 70       	tst	r0,r0
80000198:	80 00       	ld.sh	r0,r0[0x0]
8000019a:	01 00       	ld.w	r0,r0++
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	00 f0       	st.b	--r0,r0
800001a0:	00 00       	add	r0,r0
800001a2:	05 78       	ld.ub	r8,--r2
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	07 5c       	ld.sh	r12,--r3
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	01 2c       	ld.uh	r12,r0++
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	00 f8       	st.b	--r0,r8
800001b0:	00 00       	add	r0,r0
800001b2:	05 80       	ld.ub	r0,r2[0x0]
800001b4:	80 00       	ld.sh	r0,r0[0x0]
800001b6:	08 b0       	st.h	r4++,r0

800001b8 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800001b8:	eb cd 40 80 	pushm	r7,lr
800001bc:	1a 97       	mov	r7,sp
	interruptDisable();
800001be:	f0 1f 00 0d 	mcall	800001f0 <ROSA_yieldFromISR+0x38>
	contextSaveFromISR();	  //Save the task context
800001c2:	f0 1f 00 0d 	mcall	800001f4 <ROSA_yieldFromISR+0x3c>
	system_ticks ++;
800001c6:	48 d8       	lddpc	r8,800001f8 <ROSA_yieldFromISR+0x40>
800001c8:	f0 ea 00 00 	ld.d	r10,r8[0]
800001cc:	30 18       	mov	r8,1
800001ce:	30 09       	mov	r9,0
800001d0:	f4 08 00 08 	add	r8,r10,r8
800001d4:	f6 09 00 49 	adc	r9,r11,r9
800001d8:	48 8a       	lddpc	r10,800001f8 <ROSA_yieldFromISR+0x40>
800001da:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
800001de:	f0 1f 00 08 	mcall	800001fc <ROSA_yieldFromISR+0x44>
	contextRestoreFromISR();  //...and switch over to it.
800001e2:	f0 1f 00 08 	mcall	80000200 <ROSA_yieldFromISR+0x48>
	interruptEnable();
800001e6:	f0 1f 00 08 	mcall	80000204 <ROSA_yieldFromISR+0x4c>
}
800001ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800001ee:	00 00       	add	r0,r0
800001f0:	80 00       	ld.sh	r0,r0[0x0]
800001f2:	1b 66       	ld.uh	r6,--sp
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	1b 7e       	ld.ub	lr,--sp
800001f8:	00 00       	add	r0,r0
800001fa:	05 84       	ld.ub	r4,r2[0x0]
800001fc:	80 00       	ld.sh	r0,r0[0x0]
800001fe:	09 90       	ld.ub	r0,r4[0x1]
80000200:	80 00       	ld.sh	r0,r0[0x0]
80000202:	1b b8       	ld.ub	r8,sp[0x3]
80000204:	80 00       	ld.sh	r0,r0[0x0]
80000206:	1b 6a       	ld.uh	r10,--sp

80000208 <usart_options>:
80000208:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000218:	00 00 00 00                                         ....

8000021c <IDLE_TASK>:
int endCritical=1;

//Idle task creation

void IDLE_TASK (void)
{
8000021c:	eb cd 40 80 	pushm	r7,lr
80000220:	1a 97       	mov	r7,sp
	while(1);
80000222:	c0 08       	rjmp	80000222 <IDLE_TASK+0x6>

80000224 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000224:	eb cd 40 80 	pushm	r7,lr
80000228:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000022a:	f0 1f 00 17 	mcall	80000284 <ROSA_init+0x60>
	buttonInit();								//Buttons
8000022e:	f0 1f 00 17 	mcall	80000288 <ROSA_init+0x64>
	joystickInit();								//Joystick
80000232:	f0 1f 00 17 	mcall	8000028c <ROSA_init+0x68>
	potInit();									//Potentiometer
80000236:	f0 1f 00 17 	mcall	80000290 <ROSA_init+0x6c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000023a:	e0 6a 1b 00 	mov	r10,6912
8000023e:	ea 1a 00 b7 	orh	r10,0xb7
80000242:	49 5b       	lddpc	r11,80000294 <ROSA_init+0x70>
80000244:	fe 7c 14 00 	mov	r12,-60416
80000248:	f0 1f 00 14 	mcall	80000298 <ROSA_init+0x74>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
8000024c:	49 48       	lddpc	r8,8000029c <ROSA_init+0x78>
8000024e:	30 09       	mov	r9,0
80000250:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000252:	49 48       	lddpc	r8,800002a0 <ROSA_init+0x7c>
80000254:	30 09       	mov	r9,0
80000256:	91 09       	st.w	r8[0x0],r9
	
	ROSA_taskCreate(& idle_task_handle, "idle", IDLE_TASK, 0x40, 255);
80000258:	e0 68 00 ff 	mov	r8,255
8000025c:	34 09       	mov	r9,64
8000025e:	49 2a       	lddpc	r10,800002a4 <ROSA_init+0x80>
80000260:	49 2b       	lddpc	r11,800002a8 <ROSA_init+0x84>
80000262:	49 3c       	lddpc	r12,800002ac <ROSA_init+0x88>
80000264:	f0 1f 00 13 	mcall	800002b0 <ROSA_init+0x8c>

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
80000268:	f0 1f 00 13 	mcall	800002b4 <ROSA_init+0x90>
	system_ticks = 0;
8000026c:	49 3a       	lddpc	r10,800002b8 <ROSA_init+0x94>
8000026e:	30 08       	mov	r8,0
80000270:	30 09       	mov	r9,0
80000272:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(1);
80000276:	30 1c       	mov	r12,1
80000278:	f0 1f 00 11 	mcall	800002bc <ROSA_init+0x98>
	timerStart();
8000027c:	f0 1f 00 11 	mcall	800002c0 <ROSA_init+0x9c>
	//...
}
80000280:	e3 cd 80 80 	ldm	sp++,r7,pc
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	0d 38       	ld.ub	r8,r6++
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	0b 90       	ld.ub	r0,r5[0x1]
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	0b b8       	ld.ub	r8,r5[0x3]
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	0e 04       	add	r4,r7
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	02 08       	add	r8,r1
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	0f b8       	ld.ub	r8,r7[0x3]
8000029c:	00 00       	add	r0,r0
8000029e:	05 68       	ld.uh	r8,--r2
800002a0:	00 00       	add	r0,r0
800002a2:	05 98       	ld.ub	r8,r2[0x1]
800002a4:	80 00       	ld.sh	r0,r0[0x0]
800002a6:	02 1c       	sub	r12,r1
800002a8:	80 00       	ld.sh	r0,r0[0x0]
800002aa:	02 14       	sub	r4,r1
800002ac:	00 00       	add	r0,r0
800002ae:	05 64       	ld.uh	r4,--r2
800002b0:	80 00       	ld.sh	r0,r0[0x0]
800002b2:	07 5c       	ld.sh	r12,--r3
800002b4:	80 00       	ld.sh	r0,r0[0x0]
800002b6:	1b 48       	ld.w	r8,--sp
800002b8:	00 00       	add	r0,r0
800002ba:	05 84       	ld.ub	r4,r2[0x0]
800002bc:	80 00       	ld.sh	r0,r0[0x0]
800002be:	10 dc       	st.w	--r8,r12
800002c0:	80 00       	ld.sh	r0,r0[0x0]
800002c2:	11 0a       	ld.w	r10,r8++

800002c4 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800002c4:	eb cd 40 80 	pushm	r7,lr
800002c8:	1a 97       	mov	r7,sp
800002ca:	20 6d       	sub	sp,24
800002cc:	ef 4c ff f8 	st.w	r7[-8],r12
800002d0:	ef 4b ff f4 	st.w	r7[-12],r11
800002d4:	ef 4a ff f0 	st.w	r7[-16],r10
800002d8:	ef 49 ff ec 	st.w	r7[-20],r9
800002dc:	ef 48 ff e8 	st.w	r7[-24],r8
	interruptDisable();
800002e0:	f0 1f 00 27 	mcall	8000037c <ROSA_tcbCreate+0xb8>
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800002e4:	30 08       	mov	r8,0
800002e6:	ef 48 ff fc 	st.w	r7[-4],r8
800002ea:	c1 48       	rjmp	80000312 <ROSA_tcbCreate+0x4e>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800002ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002f4:	ee fa ff f4 	ld.w	r10,r7[-12]
800002f8:	f4 08 00 08 	add	r8,r10,r8
800002fc:	11 88       	ld.ub	r8,r8[0x0]
800002fe:	ee fa ff f8 	ld.w	r10,r7[-8]
80000302:	f4 09 00 09 	add	r9,r10,r9
80000306:	b2 c8       	st.b	r9[0x4],r8
{
	interruptDisable();
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000030c:	2f f8       	sub	r8,-1
8000030e:	ef 48 ff fc 	st.w	r7[-4],r8
80000312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000316:	58 38       	cp.w	r8,3
80000318:	fe 9a ff ea 	brle	800002ec <ROSA_tcbCreate+0x28>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
8000031c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000320:	30 09       	mov	r9,0
80000322:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000324:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000032c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000032e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000336:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000033c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000340:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000342:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000346:	a3 68       	lsl	r8,0x2
80000348:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000034c:	10 09       	add	r9,r8
8000034e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000352:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000358:	70 39       	ld.w	r9,r8[0xc]
8000035a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000035e:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000364:	fc 19 00 1c 	movh	r9,0x1c
80000368:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000036a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000036e:	f0 1f 00 05 	mcall	80000380 <ROSA_tcbCreate+0xbc>
	interruptEnable();
80000372:	f0 1f 00 05 	mcall	80000384 <ROSA_tcbCreate+0xc0>
}
80000376:	2f ad       	sub	sp,-24
80000378:	e3 cd 80 80 	ldm	sp++,r7,pc
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	1b 66       	ld.uh	r6,--sp
80000380:	80 00       	ld.sh	r0,r0[0x0]
80000382:	08 e6       	st.h	--r4,r6
80000384:	80 00       	ld.sh	r0,r0[0x0]
80000386:	1b 6a       	ld.uh	r10,--sp

80000388 <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
80000388:	eb cd 40 80 	pushm	r7,lr
8000038c:	1a 97       	mov	r7,sp
8000038e:	20 2d       	sub	sp,8
80000390:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000394:	f0 1f 00 40 	mcall	80000494 <ROSA_tcbInstall+0x10c>
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
80000398:	4c 08       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
8000039a:	70 08       	ld.w	r8,r8[0x0]
8000039c:	58 08       	cp.w	r8,0
8000039e:	c1 51       	brne	800003c8 <ROSA_tcbInstall+0x40>
	{
		TCBLIST = tcbTask;
800003a0:	4b e8       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
800003a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003a6:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
800003a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003b0:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
800003b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003ba:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
800003be:	4b 88       	lddpc	r8,8000049c <ROSA_tcbInstall+0x114>
800003c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003c4:	91 09       	st.w	r8[0x0],r9
800003c6:	c5 d8       	rjmp	80000480 <ROSA_tcbInstall+0xf8>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
800003c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003cc:	f1 39 00 65 	ld.ub	r9,r8[101]
800003d0:	4b 28       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
800003d2:	70 08       	ld.w	r8,r8[0x0]
800003d4:	f1 38 00 65 	ld.ub	r8,r8[101]
800003d8:	f0 09 18 00 	cp.b	r9,r8
800003dc:	c1 02       	brcc	800003fc <ROSA_tcbInstall+0x74>
	{
		insert_after(TCBLIST_end, tcbTask);
800003de:	4b 08       	lddpc	r8,8000049c <ROSA_tcbInstall+0x114>
800003e0:	70 08       	ld.w	r8,r8[0x0]
800003e2:	ee fb ff f8 	ld.w	r11,r7[-8]
800003e6:	10 9c       	mov	r12,r8
800003e8:	f0 1f 00 2e 	mcall	800004a0 <ROSA_tcbInstall+0x118>
		TCBLIST = tcbTask;
800003ec:	4a b8       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
800003ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003f2:	91 09       	st.w	r8[0x0],r9
		ROUNDROBINEND = NULL;
800003f4:	4a c8       	lddpc	r8,800004a4 <ROSA_tcbInstall+0x11c>
800003f6:	30 09       	mov	r9,0
800003f8:	91 09       	st.w	r8[0x0],r9
800003fa:	c4 38       	rjmp	80000480 <ROSA_tcbInstall+0xf8>
	}
	else
	{
		tcb * iterator = TCBLIST;
800003fc:	4a 78       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
800003fe:	70 08       	ld.w	r8,r8[0x0]
80000400:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
80000404:	c0 68       	rjmp	80000410 <ROSA_tcbInstall+0x88>
		{
			iterator = iterator->nexttcb;
80000406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000040a:	70 08       	ld.w	r8,r8[0x0]
8000040c:	ef 48 ff fc 	st.w	r7[-4],r8
		ROUNDROBINEND = NULL;
	}
	else
	{
		tcb * iterator = TCBLIST;
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
80000410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000414:	58 08       	cp.w	r8,0
80000416:	c1 30       	breq	8000043c <ROSA_tcbInstall+0xb4>
80000418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000041c:	f1 39 00 65 	ld.ub	r9,r8[101]
80000420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000424:	f1 38 00 65 	ld.ub	r8,r8[101]
80000428:	f0 09 18 00 	cp.b	r9,r8
8000042c:	e0 8b 00 08 	brhi	8000043c <ROSA_tcbInstall+0xb4>
80000430:	49 b8       	lddpc	r8,8000049c <ROSA_tcbInstall+0x114>
80000432:	70 08       	ld.w	r8,r8[0x0]
80000434:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000438:	10 39       	cp.w	r9,r8
8000043a:	ce 61       	brne	80000406 <ROSA_tcbInstall+0x7e>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
8000043c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000440:	71 c8       	ld.w	r8,r8[0x70]
80000442:	ee fb ff f8 	ld.w	r11,r7[-8]
80000446:	10 9c       	mov	r12,r8
80000448:	f0 1f 00 16 	mcall	800004a0 <ROSA_tcbInstall+0x118>
		//insert_by_priority(TCBLIST, tcbTask);
		if(TCBLIST->prevtcb == tcbTask)
8000044c:	49 38       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
8000044e:	70 08       	ld.w	r8,r8[0x0]
80000450:	71 c9       	ld.w	r9,r8[0x70]
80000452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000456:	10 39       	cp.w	r9,r8
80000458:	c0 51       	brne	80000462 <ROSA_tcbInstall+0xda>
		{
			TCBLIST_end = tcbTask;
8000045a:	49 18       	lddpc	r8,8000049c <ROSA_tcbInstall+0x114>
8000045c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000460:	91 09       	st.w	r8[0x0],r9
		}
		if (TCBLIST->effective_priority == tcbTask->effective_priority)
80000462:	48 e8       	lddpc	r8,80000498 <ROSA_tcbInstall+0x110>
80000464:	70 08       	ld.w	r8,r8[0x0]
80000466:	f1 39 00 65 	ld.ub	r9,r8[101]
8000046a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000046e:	f1 38 00 65 	ld.ub	r8,r8[101]
80000472:	f0 09 18 00 	cp.b	r9,r8
80000476:	c0 51       	brne	80000480 <ROSA_tcbInstall+0xf8>
			ROUNDROBINEND = tcbTask;		
80000478:	48 b8       	lddpc	r8,800004a4 <ROSA_tcbInstall+0x11c>
8000047a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000047e:	91 09       	st.w	r8[0x0],r9
	}
	if (endCritical)
80000480:	48 a8       	lddpc	r8,800004a8 <ROSA_tcbInstall+0x120>
80000482:	70 08       	ld.w	r8,r8[0x0]
80000484:	58 08       	cp.w	r8,0
80000486:	c0 30       	breq	8000048c <ROSA_tcbInstall+0x104>
		interruptEnable();
80000488:	f0 1f 00 09 	mcall	800004ac <ROSA_tcbInstall+0x124>
}
8000048c:	2f ed       	sub	sp,-8
8000048e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000492:	00 00       	add	r0,r0
80000494:	80 00       	ld.sh	r0,r0[0x0]
80000496:	1b 66       	ld.uh	r6,--sp
80000498:	00 00       	add	r0,r0
8000049a:	05 68       	ld.uh	r8,--r2
8000049c:	00 00       	add	r0,r0
8000049e:	05 70       	ld.ub	r0,--r2
800004a0:	80 00       	ld.sh	r0,r0[0x0]
800004a2:	00 08       	add	r8,r0
800004a4:	00 00       	add	r0,r0
800004a6:	05 28       	ld.uh	r8,r2++
800004a8:	00 00       	add	r0,r0
800004aa:	00 08       	add	r8,r0
800004ac:	80 00       	ld.sh	r0,r0[0x0]
800004ae:	1b 6a       	ld.uh	r10,--sp

800004b0 <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
800004b0:	eb cd 40 80 	pushm	r7,lr
800004b4:	1a 97       	mov	r7,sp
800004b6:	20 1d       	sub	sp,4
800004b8:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
800004bc:	f0 1f 00 35 	mcall	80000590 <ROSA_tcbUninstall+0xe0>
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
800004c0:	4b 58       	lddpc	r8,80000594 <ROSA_tcbUninstall+0xe4>
800004c2:	70 09       	ld.w	r9,r8[0x0]
800004c4:	4b 58       	lddpc	r8,80000598 <ROSA_tcbUninstall+0xe8>
800004c6:	70 08       	ld.w	r8,r8[0x0]
800004c8:	10 39       	cp.w	r9,r8
800004ca:	c0 81       	brne	800004da <ROSA_tcbUninstall+0x2a>
	{
		TCBLIST = NULL;
800004cc:	4b 28       	lddpc	r8,80000594 <ROSA_tcbUninstall+0xe4>
800004ce:	30 09       	mov	r9,0
800004d0:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
800004d2:	4b 28       	lddpc	r8,80000598 <ROSA_tcbUninstall+0xe8>
800004d4:	30 09       	mov	r9,0
800004d6:	91 09       	st.w	r8[0x0],r9
800004d8:	c5 38       	rjmp	8000057e <ROSA_tcbUninstall+0xce>
		//ROUNDROBINEND=NULL;
	}
	else 
	{
		if(TCBLIST->effective_priority == tcbTask->effective_priority)
800004da:	4a f8       	lddpc	r8,80000594 <ROSA_tcbUninstall+0xe4>
800004dc:	70 08       	ld.w	r8,r8[0x0]
800004de:	f1 39 00 65 	ld.ub	r9,r8[101]
800004e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004e6:	f1 38 00 65 	ld.ub	r8,r8[101]
800004ea:	f0 09 18 00 	cp.b	r9,r8
800004ee:	c1 91       	brne	80000520 <ROSA_tcbUninstall+0x70>
		{ 
			if(ROUNDROBINEND->prevtcb = TCBLIST)
800004f0:	4a b8       	lddpc	r8,8000059c <ROSA_tcbUninstall+0xec>
800004f2:	70 08       	ld.w	r8,r8[0x0]
800004f4:	4a 89       	lddpc	r9,80000594 <ROSA_tcbUninstall+0xe4>
800004f6:	72 09       	ld.w	r9,r9[0x0]
800004f8:	f1 49 00 70 	st.w	r8[112],r9
800004fc:	71 c8       	ld.w	r8,r8[0x70]
800004fe:	58 08       	cp.w	r8,0
80000500:	c0 50       	breq	8000050a <ROSA_tcbUninstall+0x5a>
			{
				ROUNDROBINEND = NULL;
80000502:	4a 78       	lddpc	r8,8000059c <ROSA_tcbUninstall+0xec>
80000504:	30 09       	mov	r9,0
80000506:	91 09       	st.w	r8[0x0],r9
80000508:	c0 c8       	rjmp	80000520 <ROSA_tcbUninstall+0x70>
			}					
			else if(ROUNDROBINEND == tcbTask)
8000050a:	4a 58       	lddpc	r8,8000059c <ROSA_tcbUninstall+0xec>
8000050c:	70 09       	ld.w	r9,r8[0x0]
8000050e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000512:	10 39       	cp.w	r9,r8
80000514:	c0 61       	brne	80000520 <ROSA_tcbUninstall+0x70>
			{	
				ROUNDROBINEND = tcbTask->prevtcb;
80000516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000051a:	71 c9       	ld.w	r9,r8[0x70]
8000051c:	4a 08       	lddpc	r8,8000059c <ROSA_tcbUninstall+0xec>
8000051e:	91 09       	st.w	r8[0x0],r9
			}
		}
		if(TCBLIST_end == tcbTask)
80000520:	49 e8       	lddpc	r8,80000598 <ROSA_tcbUninstall+0xe8>
80000522:	70 09       	ld.w	r9,r8[0x0]
80000524:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000528:	10 39       	cp.w	r9,r8
8000052a:	c0 71       	brne	80000538 <ROSA_tcbUninstall+0x88>
		{
			TCBLIST_end = tcbTask->prevtcb;
8000052c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000530:	71 c9       	ld.w	r9,r8[0x70]
80000532:	49 a8       	lddpc	r8,80000598 <ROSA_tcbUninstall+0xe8>
80000534:	91 09       	st.w	r8[0x0],r9
80000536:	c0 c8       	rjmp	8000054e <ROSA_tcbUninstall+0x9e>
		}
		else if(TCBLIST == tcbTask)
80000538:	49 78       	lddpc	r8,80000594 <ROSA_tcbUninstall+0xe4>
8000053a:	70 09       	ld.w	r9,r8[0x0]
8000053c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000540:	10 39       	cp.w	r9,r8
80000542:	c0 61       	brne	8000054e <ROSA_tcbUninstall+0x9e>
		{
			TCBLIST = tcbTask->nexttcb;
80000544:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000548:	70 09       	ld.w	r9,r8[0x0]
8000054a:	49 38       	lddpc	r8,80000594 <ROSA_tcbUninstall+0xe4>
8000054c:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
8000054e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000552:	71 c8       	ld.w	r8,r8[0x70]
80000554:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000558:	72 09       	ld.w	r9,r9[0x0]
8000055a:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
8000055c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000560:	70 08       	ld.w	r8,r8[0x0]
80000562:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000566:	73 c9       	ld.w	r9,r9[0x70]
80000568:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
8000056c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000570:	30 09       	mov	r9,0
80000572:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
80000574:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000578:	30 09       	mov	r9,0
8000057a:	f1 49 00 70 	st.w	r8[112],r9
	}
	if (endCritical)
8000057e:	48 98       	lddpc	r8,800005a0 <ROSA_tcbUninstall+0xf0>
80000580:	70 08       	ld.w	r8,r8[0x0]
80000582:	58 08       	cp.w	r8,0
80000584:	c0 30       	breq	8000058a <ROSA_tcbUninstall+0xda>
		interruptEnable();
80000586:	f0 1f 00 08 	mcall	800005a4 <ROSA_tcbUninstall+0xf4>
}
8000058a:	2f fd       	sub	sp,-4
8000058c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000590:	80 00       	ld.sh	r0,r0[0x0]
80000592:	1b 66       	ld.uh	r6,--sp
80000594:	00 00       	add	r0,r0
80000596:	05 68       	ld.uh	r8,--r2
80000598:	00 00       	add	r0,r0
8000059a:	05 70       	ld.ub	r0,--r2
8000059c:	00 00       	add	r0,r0
8000059e:	05 28       	ld.uh	r8,r2++
800005a0:	00 00       	add	r0,r0
800005a2:	00 08       	add	r8,r0
800005a4:	80 00       	ld.sh	r0,r0[0x0]
800005a6:	1b 6a       	ld.uh	r10,--sp

800005a8 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
800005a8:	eb cd 40 80 	pushm	r7,lr
800005ac:	1a 97       	mov	r7,sp
800005ae:	20 2d       	sub	sp,8
800005b0:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800005b4:	f0 1f 00 38 	mcall	80000694 <ROSA_tcbSuspend+0xec>
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
800005b8:	4b 88       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
800005ba:	70 08       	ld.w	r8,r8[0x0]
800005bc:	58 08       	cp.w	r8,0
800005be:	c1 51       	brne	800005e8 <ROSA_tcbSuspend+0x40>
	{
		SUSPENDEDLIST = tcbTask;
800005c0:	4b 68       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
800005c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005c6:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
800005c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005d0:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
800005d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005da:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
800005de:	4b 08       	lddpc	r8,8000069c <ROSA_tcbSuspend+0xf4>
800005e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005e4:	91 09       	st.w	r8[0x0],r9
800005e6:	c4 d8       	rjmp	80000680 <ROSA_tcbSuspend+0xd8>
	}
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
800005e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005ec:	f0 ea 00 68 	ld.d	r10,r8[104]
800005f0:	4a a8       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
800005f2:	70 08       	ld.w	r8,r8[0x0]
800005f4:	f0 e8 00 68 	ld.d	r8,r8[104]
800005f8:	10 3a       	cp.w	r10,r8
800005fa:	f2 0b 13 00 	cpc	r11,r9
800005fe:	c0 d2       	brcc	80000618 <ROSA_tcbSuspend+0x70>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
80000600:	4a 78       	lddpc	r8,8000069c <ROSA_tcbSuspend+0xf4>
80000602:	70 08       	ld.w	r8,r8[0x0]
80000604:	ee fb ff f8 	ld.w	r11,r7[-8]
80000608:	10 9c       	mov	r12,r8
8000060a:	f0 1f 00 26 	mcall	800006a0 <ROSA_tcbSuspend+0xf8>
		SUSPENDEDLIST = tcbTask;
8000060e:	4a 38       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
80000610:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000614:	91 09       	st.w	r8[0x0],r9
80000616:	c3 58       	rjmp	80000680 <ROSA_tcbSuspend+0xd8>
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
80000618:	4a 08       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
8000061a:	70 08       	ld.w	r8,r8[0x0]
8000061c:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
80000620:	c0 68       	rjmp	8000062c <ROSA_tcbSuspend+0x84>
		{
			iterator = iterator->nexttcb;
80000622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000626:	70 08       	ld.w	r8,r8[0x0]
80000628:	ef 48 ff fc 	st.w	r7[-4],r8
		SUSPENDEDLIST = tcbTask;
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
8000062c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000630:	58 08       	cp.w	r8,0
80000632:	c1 40       	breq	8000065a <ROSA_tcbSuspend+0xb2>
80000634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000638:	f0 ea 00 68 	ld.d	r10,r8[104]
8000063c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000640:	f0 e8 00 68 	ld.d	r8,r8[104]
80000644:	10 3a       	cp.w	r10,r8
80000646:	f2 0b 13 00 	cpc	r11,r9
8000064a:	e0 8b 00 08 	brhi	8000065a <ROSA_tcbSuspend+0xb2>
8000064e:	49 48       	lddpc	r8,8000069c <ROSA_tcbSuspend+0xf4>
80000650:	70 08       	ld.w	r8,r8[0x0]
80000652:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000656:	10 39       	cp.w	r9,r8
80000658:	ce 51       	brne	80000622 <ROSA_tcbSuspend+0x7a>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
8000065a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000065e:	71 c8       	ld.w	r8,r8[0x70]
80000660:	ee fb ff f8 	ld.w	r11,r7[-8]
80000664:	10 9c       	mov	r12,r8
80000666:	f0 1f 00 0f 	mcall	800006a0 <ROSA_tcbSuspend+0xf8>
		//insert_by_back_online_time(SUSPENDEDLIST, tcbTask);
		if(SUSPENDEDLIST->prevtcb == tcbTask)
8000066a:	48 c8       	lddpc	r8,80000698 <ROSA_tcbSuspend+0xf0>
8000066c:	70 08       	ld.w	r8,r8[0x0]
8000066e:	71 c9       	ld.w	r9,r8[0x70]
80000670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000674:	10 39       	cp.w	r9,r8
80000676:	c0 51       	brne	80000680 <ROSA_tcbSuspend+0xd8>
		{
			SUSPENDEDLIST_end = tcbTask;
80000678:	48 98       	lddpc	r8,8000069c <ROSA_tcbSuspend+0xf4>
8000067a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000067e:	91 09       	st.w	r8[0x0],r9
		}
	}
	if (endCritical)
80000680:	48 98       	lddpc	r8,800006a4 <ROSA_tcbSuspend+0xfc>
80000682:	70 08       	ld.w	r8,r8[0x0]
80000684:	58 08       	cp.w	r8,0
80000686:	c0 30       	breq	8000068c <ROSA_tcbSuspend+0xe4>
		interruptEnable();
80000688:	f0 1f 00 08 	mcall	800006a8 <ROSA_tcbSuspend+0x100>
}
8000068c:	2f ed       	sub	sp,-8
8000068e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000692:	00 00       	add	r0,r0
80000694:	80 00       	ld.sh	r0,r0[0x0]
80000696:	1b 66       	ld.uh	r6,--sp
80000698:	00 00       	add	r0,r0
8000069a:	05 6c       	ld.uh	r12,--r2
8000069c:	00 00       	add	r0,r0
8000069e:	05 74       	ld.ub	r4,--r2
800006a0:	80 00       	ld.sh	r0,r0[0x0]
800006a2:	00 08       	add	r8,r0
800006a4:	00 00       	add	r0,r0
800006a6:	00 08       	add	r8,r0
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	1b 6a       	ld.uh	r10,--sp

800006ac <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
800006ac:	eb cd 40 80 	pushm	r7,lr
800006b0:	1a 97       	mov	r7,sp
800006b2:	20 1d       	sub	sp,4
800006b4:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
800006b8:	f0 1f 00 24 	mcall	80000748 <ROSA_tcbUnsuspend+0x9c>
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
800006bc:	4a 48       	lddpc	r8,8000074c <ROSA_tcbUnsuspend+0xa0>
800006be:	70 09       	ld.w	r9,r8[0x0]
800006c0:	4a 48       	lddpc	r8,80000750 <ROSA_tcbUnsuspend+0xa4>
800006c2:	70 08       	ld.w	r8,r8[0x0]
800006c4:	10 39       	cp.w	r9,r8
800006c6:	c0 81       	brne	800006d6 <ROSA_tcbUnsuspend+0x2a>
	{
		SUSPENDEDLIST = NULL;
800006c8:	4a 18       	lddpc	r8,8000074c <ROSA_tcbUnsuspend+0xa0>
800006ca:	30 09       	mov	r9,0
800006cc:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
800006ce:	4a 18       	lddpc	r8,80000750 <ROSA_tcbUnsuspend+0xa4>
800006d0:	30 09       	mov	r9,0
800006d2:	91 09       	st.w	r8[0x0],r9
800006d4:	c3 08       	rjmp	80000734 <ROSA_tcbUnsuspend+0x88>
	}
	else
	{
		if(SUSPENDEDLIST == tcbTask)
800006d6:	49 e8       	lddpc	r8,8000074c <ROSA_tcbUnsuspend+0xa0>
800006d8:	70 09       	ld.w	r9,r8[0x0]
800006da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006de:	10 39       	cp.w	r9,r8
800006e0:	c0 71       	brne	800006ee <ROSA_tcbUnsuspend+0x42>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
800006e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e6:	70 09       	ld.w	r9,r8[0x0]
800006e8:	49 98       	lddpc	r8,8000074c <ROSA_tcbUnsuspend+0xa0>
800006ea:	91 09       	st.w	r8[0x0],r9
800006ec:	c0 c8       	rjmp	80000704 <ROSA_tcbUnsuspend+0x58>
		}
		else if(SUSPENDEDLIST_end == tcbTask)
800006ee:	49 98       	lddpc	r8,80000750 <ROSA_tcbUnsuspend+0xa4>
800006f0:	70 09       	ld.w	r9,r8[0x0]
800006f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f6:	10 39       	cp.w	r9,r8
800006f8:	c0 61       	brne	80000704 <ROSA_tcbUnsuspend+0x58>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
800006fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006fe:	71 c9       	ld.w	r9,r8[0x70]
80000700:	49 48       	lddpc	r8,80000750 <ROSA_tcbUnsuspend+0xa4>
80000702:	91 09       	st.w	r8[0x0],r9
		}
		
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000708:	71 c8       	ld.w	r8,r8[0x70]
8000070a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000070e:	72 09       	ld.w	r9,r9[0x0]
80000710:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
80000712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000716:	70 08       	ld.w	r8,r8[0x0]
80000718:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000071c:	73 c9       	ld.w	r9,r9[0x70]
8000071e:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
80000722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000726:	30 09       	mov	r9,0
80000728:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
8000072a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000072e:	30 09       	mov	r9,0
80000730:	f1 49 00 70 	st.w	r8[112],r9
	}
	if (endCritical)
80000734:	48 88       	lddpc	r8,80000754 <ROSA_tcbUnsuspend+0xa8>
80000736:	70 08       	ld.w	r8,r8[0x0]
80000738:	58 08       	cp.w	r8,0
8000073a:	c0 30       	breq	80000740 <ROSA_tcbUnsuspend+0x94>
		interruptEnable();
8000073c:	f0 1f 00 07 	mcall	80000758 <ROSA_tcbUnsuspend+0xac>
}
80000740:	2f fd       	sub	sp,-4
80000742:	e3 cd 80 80 	ldm	sp++,r7,pc
80000746:	00 00       	add	r0,r0
80000748:	80 00       	ld.sh	r0,r0[0x0]
8000074a:	1b 66       	ld.uh	r6,--sp
8000074c:	00 00       	add	r0,r0
8000074e:	05 6c       	ld.uh	r12,--r2
80000750:	00 00       	add	r0,r0
80000752:	05 74       	ld.ub	r4,--r2
80000754:	00 00       	add	r0,r0
80000756:	00 08       	add	r8,r0
80000758:	80 00       	ld.sh	r0,r0[0x0]
8000075a:	1b 6a       	ld.uh	r10,--sp

8000075c <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
8000075c:	eb cd 40 80 	pushm	r7,lr
80000760:	1a 97       	mov	r7,sp
80000762:	20 7d       	sub	sp,28
80000764:	ef 4c ff f4 	st.w	r7[-12],r12
80000768:	ef 4b ff f0 	st.w	r7[-16],r11
8000076c:	ef 4a ff ec 	st.w	r7[-20],r10
80000770:	ef 49 ff e8 	st.w	r7[-24],r9
80000774:	ef 68 ff e4 	st.b	r7[-28],r8
	interruptDisable();
80000778:	f0 1f 00 28 	mcall	80000818 <ROSA_taskCreate+0xbc>
	int16_t result = -1;
8000077c:	3f f8       	mov	r8,-1
8000077e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
80000782:	37 4b       	mov	r11,116
80000784:	30 1c       	mov	r12,1
80000786:	f0 1f 00 26 	mcall	8000081c <ROSA_taskCreate+0xc0>
8000078a:	18 98       	mov	r8,r12
8000078c:	10 99       	mov	r9,r8
8000078e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000792:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
80000794:	30 4b       	mov	r11,4
80000796:	ee fc ff e8 	ld.w	r12,r7[-24]
8000079a:	f0 1f 00 21 	mcall	8000081c <ROSA_taskCreate+0xc0>
8000079e:	18 98       	mov	r8,r12
800007a0:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
800007a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007a8:	70 09       	ld.w	r9,r8[0x0]
800007aa:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800007ae:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
800007b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007b6:	70 09       	ld.w	r9,r8[0x0]
800007b8:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800007bc:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
800007c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007c4:	70 09       	ld.w	r9,r8[0x0]
800007c6:	30 18       	mov	r8,1
800007c8:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
800007cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007d0:	70 0a       	ld.w	r10,r8[0x0]
800007d2:	30 08       	mov	r8,0
800007d4:	30 09       	mov	r9,0
800007d6:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
800007da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800007de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800007e2:	72 0c       	ld.w	r12,r9[0x0]
800007e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007e8:	ee fa ff ec 	ld.w	r10,r7[-20]
800007ec:	ee fb ff f0 	ld.w	r11,r7[-16]
800007f0:	f0 1f 00 0c 	mcall	80000820 <ROSA_taskCreate+0xc4>
	ROSA_tcbInstall(*th);
800007f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800007f8:	70 08       	ld.w	r8,r8[0x0]
800007fa:	10 9c       	mov	r12,r8
800007fc:	f0 1f 00 0a 	mcall	80000824 <ROSA_taskCreate+0xc8>
	if (endCritical)
80000800:	48 a8       	lddpc	r8,80000828 <ROSA_taskCreate+0xcc>
80000802:	70 08       	ld.w	r8,r8[0x0]
80000804:	58 08       	cp.w	r8,0
80000806:	c0 30       	breq	8000080c <ROSA_taskCreate+0xb0>
		interruptEnable();
80000808:	f0 1f 00 09 	mcall	8000082c <ROSA_taskCreate+0xd0>
	return result;
8000080c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000810:	10 9c       	mov	r12,r8
80000812:	2f 9d       	sub	sp,-28
80000814:	e3 cd 80 80 	ldm	sp++,r7,pc
80000818:	80 00       	ld.sh	r0,r0[0x0]
8000081a:	1b 66       	ld.uh	r6,--sp
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	12 14       	sub	r4,r9
80000820:	80 00       	ld.sh	r0,r0[0x0]
80000822:	02 c4       	st.b	r1++,r4
80000824:	80 00       	ld.sh	r0,r0[0x0]
80000826:	03 88       	ld.ub	r8,r1[0x0]
80000828:	00 00       	add	r0,r0
8000082a:	00 08       	add	r8,r0
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	1b 6a       	ld.uh	r10,--sp

80000830 <ROSA_delay>:
	return result;
}


int16_t ROSA_delay(uint64_t ticks)
{
80000830:	eb cd 40 c0 	pushm	r6-r7,lr
80000834:	1a 97       	mov	r7,sp
80000836:	20 2d       	sub	sp,8
80000838:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
8000083c:	f0 1f 00 15 	mcall	80000890 <ROSA_delay+0x60>
	endCritical = 0;
80000840:	49 58       	lddpc	r8,80000894 <ROSA_delay+0x64>
80000842:	30 09       	mov	r9,0
80000844:	91 09       	st.w	r8[0x0],r9
	ROSA_tcbUninstall(EXECTASK);
80000846:	49 58       	lddpc	r8,80000898 <ROSA_delay+0x68>
80000848:	70 08       	ld.w	r8,r8[0x0]
8000084a:	10 9c       	mov	r12,r8
8000084c:	f0 1f 00 14 	mcall	8000089c <ROSA_delay+0x6c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
80000850:	49 28       	lddpc	r8,80000898 <ROSA_delay+0x68>
80000852:	70 06       	ld.w	r6,r8[0x0]
80000854:	f0 1f 00 13 	mcall	800008a0 <ROSA_delay+0x70>
80000858:	14 98       	mov	r8,r10
8000085a:	16 99       	mov	r9,r11
8000085c:	10 9a       	mov	r10,r8
8000085e:	12 9b       	mov	r11,r9
80000860:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000864:	f4 08 00 08 	add	r8,r10,r8
80000868:	f6 09 00 49 	adc	r9,r11,r9
8000086c:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
80000870:	48 a8       	lddpc	r8,80000898 <ROSA_delay+0x68>
80000872:	70 08       	ld.w	r8,r8[0x0]
80000874:	10 9c       	mov	r12,r8
80000876:	f0 1f 00 0c 	mcall	800008a4 <ROSA_delay+0x74>
	endCritical = 1;
8000087a:	48 78       	lddpc	r8,80000894 <ROSA_delay+0x64>
8000087c:	30 19       	mov	r9,1
8000087e:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
80000880:	f0 1f 00 0a 	mcall	800008a8 <ROSA_delay+0x78>
	ROSA_yield();
80000884:	f0 1f 00 0a 	mcall	800008ac <ROSA_delay+0x7c>
}
80000888:	2f ed       	sub	sp,-8
8000088a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000088e:	00 00       	add	r0,r0
80000890:	80 00       	ld.sh	r0,r0[0x0]
80000892:	1b 66       	ld.uh	r6,--sp
80000894:	00 00       	add	r0,r0
80000896:	00 08       	add	r8,r0
80000898:	00 00       	add	r0,r0
8000089a:	05 98       	ld.ub	r8,r2[0x1]
8000089c:	80 00       	ld.sh	r0,r0[0x0]
8000089e:	04 b0       	st.h	r2++,r0
800008a0:	80 00       	ld.sh	r0,r0[0x0]
800008a2:	0b 78       	ld.ub	r8,--r5
800008a4:	80 00       	ld.sh	r0,r0[0x0]
800008a6:	05 a8       	ld.ub	r8,r2[0x2]
800008a8:	80 00       	ld.sh	r0,r0[0x0]
800008aa:	1b 6a       	ld.uh	r10,--sp
800008ac:	80 00       	ld.sh	r0,r0[0x0]
800008ae:	09 72       	ld.ub	r2,--r4

800008b0 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800008b0:	4b 5c       	lddpc	r12,80000984 <_yield+0xa>
	lda.w r11,EXECTASK
800008b2:	4b 6b       	lddpc	r11,80000988 <_yield+0xe>
	ld.w r12,r12[0x0]
800008b4:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800008b6:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
800008b8:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800008ba:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800008bc:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
800008c0:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
800008c2:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
800008c4:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
800008c6:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
800008ca:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
800008cc:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
800008ce:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
800008d0:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
800008d2:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
800008d4:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
800008d6:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
800008d8:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
800008da:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
800008dc:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
800008de:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
800008e0:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
800008e2:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
800008e4:	1c 9f       	mov	pc,lr

800008e6 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
800008e6:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
800008e8:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
800008ea:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
800008ec:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
800008f0:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
800008f4:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
800008f8:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
800008fc:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000900:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000904:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000908:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
8000090c:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000910:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000912:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000914:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000916:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000918:	1c 9f       	mov	pc,lr

8000091a <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
8000091a:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000091c:	49 bc       	lddpc	r12,80000988 <_yield+0xe>
	ld.w r12,r12[0x0]
8000091e:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000920:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000922:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000924:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000926:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000928:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
8000092a:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
8000092c:	33 40       	mov	r0,52
	add r0,r12
8000092e:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000930:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000934:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000936:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000938:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
8000093c:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
8000093e:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000940:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000942:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000944:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000946:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000948:	1c 9f       	mov	pc,lr

8000094a <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000094a:	49 0c       	lddpc	r12,80000988 <_yield+0xe>
	ld.w r12,r12[0x0]
8000094c:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
8000094e:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000950:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000952:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000956:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000958:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
8000095a:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
8000095c:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
8000095e:	33 40       	mov	r0,52
	add r0,r12
80000960:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000962:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000966:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000968:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
8000096a:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
8000096c:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000096e:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000970:	d6 13       	rets

80000972 <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000972:	d4 01       	pushm	lr
	lda.w lr,_yield
80000974:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000978:	d7 33       	scall

8000097a <_yield>:
_yield:
	call contextSave
8000097a:	cd 0f       	rcall	8000091a <contextSave>
	call scheduler
8000097c:	f0 1f 00 04 	mcall	8000098c <_yield+0x12>
	call contextRestore
80000980:	ce 5f       	rcall	8000094a <contextRestore>
80000982:	00 00       	add	r0,r0
80000984:	00 00       	add	r0,r0
80000986:	05 68       	ld.uh	r8,--r2
80000988:	00 00       	add	r0,r0
8000098a:	05 98       	ld.ub	r8,r2[0x1]
8000098c:	80 00       	ld.sh	r0,r0[0x0]
8000098e:	09 90       	ld.ub	r0,r4[0x1]

80000990 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000990:	eb cd 40 80 	pushm	r7,lr
80000994:	1a 97       	mov	r7,sp
80000996:	20 3d       	sub	sp,12
	endCritical = 0;
80000998:	4b 18       	lddpc	r8,80000a5c <scheduler+0xcc>
8000099a:	30 09       	mov	r9,0
8000099c:	91 09       	st.w	r8[0x0],r9
	//interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
8000099e:	4b 18       	lddpc	r8,80000a60 <scheduler+0xd0>
800009a0:	70 08       	ld.w	r8,r8[0x0]
800009a2:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
800009a6:	f0 1f 00 30 	mcall	80000a64 <scheduler+0xd4>
800009aa:	14 98       	mov	r8,r10
800009ac:	16 99       	mov	r9,r11
800009ae:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
800009b2:	c0 d8       	rjmp	800009cc <scheduler+0x3c>
	{
		ROSA_tcbUnsuspend(iterator);
800009b4:	ee fc ff f4 	ld.w	r12,r7[-12]
800009b8:	f0 1f 00 2c 	mcall	80000a68 <scheduler+0xd8>
		ROSA_tcbInstall(iterator);
800009bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800009c0:	f0 1f 00 2b 	mcall	80000a6c <scheduler+0xdc>
		iterator = SUSPENDEDLIST;
800009c4:	4a 78       	lddpc	r8,80000a60 <scheduler+0xd0>
800009c6:	70 08       	ld.w	r8,r8[0x0]
800009c8:	ef 48 ff f4 	st.w	r7[-12],r8
{
	endCritical = 0;
	//interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
800009cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d0:	58 08       	cp.w	r8,0
800009d2:	c0 c0       	breq	800009ea <scheduler+0x5a>
800009d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009d8:	f0 ea 00 68 	ld.d	r10,r8[104]
800009dc:	ee e8 ff f8 	ld.d	r8,r7[-8]
800009e0:	10 3a       	cp.w	r10,r8
800009e2:	f2 0b 13 00 	cpc	r11,r9
800009e6:	fe 98 ff e7 	brls	800009b4 <scheduler+0x24>
	{
		ROSA_tcbUnsuspend(iterator);
		ROSA_tcbInstall(iterator);
		iterator = SUSPENDEDLIST;
	}
	if(ROUNDROBINEND != NULL && (idle_task_handle != EXECTASK))
800009ea:	4a 28       	lddpc	r8,80000a70 <scheduler+0xe0>
800009ec:	70 08       	ld.w	r8,r8[0x0]
800009ee:	58 08       	cp.w	r8,0
800009f0:	c2 c0       	breq	80000a48 <scheduler+0xb8>
800009f2:	4a 18       	lddpc	r8,80000a74 <scheduler+0xe4>
800009f4:	70 09       	ld.w	r9,r8[0x0]
800009f6:	4a 18       	lddpc	r8,80000a78 <scheduler+0xe8>
800009f8:	70 08       	ld.w	r8,r8[0x0]
800009fa:	10 39       	cp.w	r9,r8
800009fc:	c2 60       	breq	80000a48 <scheduler+0xb8>
	{
		roundRobinCounter++;
800009fe:	4a 08       	lddpc	r8,80000a7c <scheduler+0xec>
80000a00:	f0 ea 00 00 	ld.d	r10,r8[0]
80000a04:	30 18       	mov	r8,1
80000a06:	30 09       	mov	r9,0
80000a08:	f4 08 00 08 	add	r8,r10,r8
80000a0c:	f6 09 00 49 	adc	r9,r11,r9
80000a10:	49 ba       	lddpc	r10,80000a7c <scheduler+0xec>
80000a12:	f4 e9 00 00 	st.d	r10[0],r8
		if(roundRobinCounter >= roundRobinTicks)
80000a16:	49 a8       	lddpc	r8,80000a7c <scheduler+0xec>
80000a18:	f0 ea 00 00 	ld.d	r10,r8[0]
80000a1c:	49 98       	lddpc	r8,80000a80 <scheduler+0xf0>
80000a1e:	f0 e8 00 00 	ld.d	r8,r8[0]
80000a22:	10 3a       	cp.w	r10,r8
80000a24:	f2 0b 13 00 	cpc	r11,r9
80000a28:	c1 03       	brcs	80000a48 <scheduler+0xb8>
		{
			roundRobinCounter = 0;
80000a2a:	49 5a       	lddpc	r10,80000a7c <scheduler+0xec>
80000a2c:	30 08       	mov	r8,0
80000a2e:	30 09       	mov	r9,0
80000a30:	f4 e9 00 00 	st.d	r10[0],r8
			ROSA_tcbUninstall(EXECTASK);
80000a34:	49 18       	lddpc	r8,80000a78 <scheduler+0xe8>
80000a36:	70 08       	ld.w	r8,r8[0x0]
80000a38:	10 9c       	mov	r12,r8
80000a3a:	f0 1f 00 13 	mcall	80000a84 <scheduler+0xf4>
			ROSA_tcbInstall(EXECTASK);
80000a3e:	48 f8       	lddpc	r8,80000a78 <scheduler+0xe8>
80000a40:	70 08       	ld.w	r8,r8[0x0]
80000a42:	10 9c       	mov	r12,r8
80000a44:	f0 1f 00 0a 	mcall	80000a6c <scheduler+0xdc>
		}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	
	EXECTASK=TCBLIST;
80000a48:	49 08       	lddpc	r8,80000a88 <scheduler+0xf8>
80000a4a:	70 09       	ld.w	r9,r8[0x0]
80000a4c:	48 b8       	lddpc	r8,80000a78 <scheduler+0xe8>
80000a4e:	91 09       	st.w	r8[0x0],r9
	endCritical = 1;
80000a50:	48 38       	lddpc	r8,80000a5c <scheduler+0xcc>
80000a52:	30 19       	mov	r9,1
80000a54:	91 09       	st.w	r8[0x0],r9
	//interruptEnable();
}
80000a56:	2f dd       	sub	sp,-12
80000a58:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a5c:	00 00       	add	r0,r0
80000a5e:	00 08       	add	r8,r0
80000a60:	00 00       	add	r0,r0
80000a62:	05 6c       	ld.uh	r12,--r2
80000a64:	80 00       	ld.sh	r0,r0[0x0]
80000a66:	0b 78       	ld.ub	r8,--r5
80000a68:	80 00       	ld.sh	r0,r0[0x0]
80000a6a:	06 ac       	st.w	r3++,r12
80000a6c:	80 00       	ld.sh	r0,r0[0x0]
80000a6e:	03 88       	ld.ub	r8,r1[0x0]
80000a70:	00 00       	add	r0,r0
80000a72:	05 28       	ld.uh	r8,r2++
80000a74:	00 00       	add	r0,r0
80000a76:	05 64       	ld.uh	r4,--r2
80000a78:	00 00       	add	r0,r0
80000a7a:	05 98       	ld.ub	r8,r2[0x1]
80000a7c:	00 00       	add	r0,r0
80000a7e:	05 20       	ld.uh	r0,r2++
80000a80:	00 00       	add	r0,r0
80000a82:	00 0c       	add	r12,r0
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	04 b0       	st.h	r2++,r0
80000a88:	00 00       	add	r0,r0
80000a8a:	05 68       	ld.uh	r8,--r2

80000a8c <C.0.9448>:
80000a8c:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000a9c <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000a9c:	eb cd 40 80 	pushm	r7,lr
80000aa0:	1a 97       	mov	r7,sp
80000aa2:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000aa4:	fe 78 38 00 	mov	r8,-51200
80000aa8:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000aac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ab0:	70 88       	ld.w	r8,r8[0x20]
80000ab2:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aba:	e2 18 00 10 	andl	r8,0x10,COH
80000abe:	c0 30       	breq	80000ac4 <timerISR+0x28>
	{
		ROSA_yieldFromISR();
80000ac0:	f0 1f 00 03 	mcall	80000acc <timerISR+0x30>
	}
}
80000ac4:	2f ed       	sub	sp,-8
80000ac6:	e3 cd 40 80 	ldm	sp++,r7,lr
80000aca:	d6 03       	rete
80000acc:	80 00       	ld.sh	r0,r0[0x0]
80000ace:	01 b8       	ld.ub	r8,r0[0x3]

80000ad0 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000ad0:	eb cd 40 80 	pushm	r7,lr
80000ad4:	1a 97       	mov	r7,sp
80000ad6:	20 7d       	sub	sp,28
80000ad8:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000adc:	4a 48       	lddpc	r8,80000b6c <timerPeriodSet+0x9c>
80000ade:	ee ca 00 18 	sub	r10,r7,24
80000ae2:	10 9b       	mov	r11,r8
80000ae4:	f6 e8 00 00 	ld.d	r8,r11[0]
80000ae8:	f4 e9 00 00 	st.d	r10[0],r8
80000aec:	f6 e8 00 08 	ld.d	r8,r11[8]
80000af0:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000af4:	30 48       	mov	r8,4
80000af6:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000afe:	20 18       	sub	r8,1
80000b00:	a3 68       	lsl	r8,0x2
80000b02:	ee 08 00 08 	add	r8,r7,r8
80000b06:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b0a:	e0 68 1b 00 	mov	r8,6912
80000b0e:	ea 18 00 b7 	orh	r8,0xb7
80000b12:	f0 09 0c 08 	divs	r8,r8,r9
80000b16:	10 99       	mov	r9,r8
80000b18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b1c:	b1 39       	mul	r9,r8
80000b1e:	e0 68 4d d3 	mov	r8,19923
80000b22:	ea 18 10 62 	orh	r8,0x1062
80000b26:	f2 08 06 48 	mulu.d	r8,r9,r8
80000b2a:	f2 08 16 06 	lsr	r8,r9,0x6
80000b2e:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000b32:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b36:	f0 1f 00 0f 	mcall	80000b70 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000b3a:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b3e:	f0 1f 00 0e 	mcall	80000b74 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000b42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b4a:	f2 08 02 4a 	mul	r10,r9,r8
80000b4e:	e0 68 9f 81 	mov	r8,40833
80000b52:	ea 18 16 5e 	orh	r8,0x165e
80000b56:	f4 08 04 48 	muls.d	r8,r10,r8
80000b5a:	b5 49       	asr	r9,0x14
80000b5c:	f4 08 14 1f 	asr	r8,r10,0x1f
80000b60:	f2 08 01 08 	sub	r8,r9,r8
}
80000b64:	10 9c       	mov	r12,r8
80000b66:	2f 9d       	sub	sp,-28
80000b68:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b6c:	80 00       	ld.sh	r0,r0[0x0]
80000b6e:	0a 8c       	andn	r12,r5
80000b70:	80 00       	ld.sh	r0,r0[0x0]
80000b72:	11 50       	ld.sh	r0,--r8
80000b74:	80 00       	ld.sh	r0,r0[0x0]
80000b76:	11 3a       	ld.ub	r10,r8++

80000b78 <ROSA_getTickCount>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t ROSA_getTickCount(void)
{
80000b78:	eb cd 40 80 	pushm	r7,lr
80000b7c:	1a 97       	mov	r7,sp
	return system_ticks;
80000b7e:	48 48       	lddpc	r8,80000b8c <ROSA_getTickCount+0x14>
80000b80:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b84:	10 9a       	mov	r10,r8
80000b86:	12 9b       	mov	r11,r9
80000b88:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b8c:	00 00       	add	r0,r0
80000b8e:	05 84       	ld.ub	r4,r2[0x0]

80000b90 <buttonInit>:
80000b90:	eb cd 40 80 	pushm	r7,lr
80000b94:	1a 97       	mov	r7,sp
80000b96:	30 1b       	mov	r11,1
80000b98:	35 8c       	mov	r12,88
80000b9a:	f0 1f 00 07 	mcall	80000bb4 <buttonInit+0x24>
80000b9e:	30 1b       	mov	r11,1
80000ba0:	35 5c       	mov	r12,85
80000ba2:	f0 1f 00 05 	mcall	80000bb4 <buttonInit+0x24>
80000ba6:	30 1b       	mov	r11,1
80000ba8:	35 2c       	mov	r12,82
80000baa:	f0 1f 00 03 	mcall	80000bb4 <buttonInit+0x24>
80000bae:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bb2:	00 00       	add	r0,r0
80000bb4:	80 00       	ld.sh	r0,r0[0x0]
80000bb6:	0b f0       	ld.ub	r0,r5[0x7]

80000bb8 <joystickInit>:
80000bb8:	eb cd 40 80 	pushm	r7,lr
80000bbc:	1a 97       	mov	r7,sp
80000bbe:	30 1b       	mov	r11,1
80000bc0:	31 bc       	mov	r12,27
80000bc2:	f0 1f 00 0b 	mcall	80000bec <joystickInit+0x34>
80000bc6:	30 1b       	mov	r11,1
80000bc8:	31 9c       	mov	r12,25
80000bca:	f0 1f 00 09 	mcall	80000bec <joystickInit+0x34>
80000bce:	30 1b       	mov	r11,1
80000bd0:	31 cc       	mov	r12,28
80000bd2:	f0 1f 00 07 	mcall	80000bec <joystickInit+0x34>
80000bd6:	30 1b       	mov	r11,1
80000bd8:	31 4c       	mov	r12,20
80000bda:	f0 1f 00 05 	mcall	80000bec <joystickInit+0x34>
80000bde:	30 1b       	mov	r11,1
80000be0:	31 ac       	mov	r12,26
80000be2:	f0 1f 00 03 	mcall	80000bec <joystickInit+0x34>
80000be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bea:	00 00       	add	r0,r0
80000bec:	80 00       	ld.sh	r0,r0[0x0]
80000bee:	0b f0       	ld.ub	r0,r5[0x7]

80000bf0 <gpioInit>:
80000bf0:	eb cd 40 80 	pushm	r7,lr
80000bf4:	1a 97       	mov	r7,sp
80000bf6:	20 7d       	sub	sp,28
80000bf8:	ef 4c ff ec 	st.w	r7[-20],r12
80000bfc:	ef 4b ff e8 	st.w	r7[-24],r11
80000c00:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c04:	a5 58       	asr	r8,0x5
80000c06:	ef 48 ff f4 	st.w	r7[-12],r8
80000c0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c12:	ef 48 ff fc 	st.w	r7[-4],r8
80000c16:	30 19       	mov	r9,1
80000c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1c:	f2 08 09 48 	lsl	r8,r9,r8
80000c20:	ef 48 ff f8 	st.w	r7[-8],r8
80000c24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c28:	a9 68       	lsl	r8,0x8
80000c2a:	e0 28 f0 00 	sub	r8,61440
80000c2e:	ef 48 ff f0 	st.w	r7[-16],r8
80000c32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c3a:	91 19       	st.w	r8[0x4],r9
80000c3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c44:	91 69       	st.w	r8[0x18],r9
80000c46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c4e:	91 a9       	st.w	r8[0x28],r9
80000c50:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c54:	ef 48 ff e4 	st.w	r7[-28],r8
80000c58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c5c:	58 08       	cp.w	r8,0
80000c5e:	c0 60       	breq	80000c6a <gpioInit+0x7a>
80000c60:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c64:	58 18       	cp.w	r8,1
80000c66:	c0 90       	breq	80000c78 <gpioInit+0x88>
80000c68:	c0 f8       	rjmp	80000c86 <gpioInit+0x96>
80000c6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c72:	f1 49 00 44 	st.w	r8[68],r9
80000c76:	c0 e8       	rjmp	80000c92 <gpioInit+0xa2>
80000c78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c80:	f1 49 00 48 	st.w	r8[72],r9
80000c84:	c0 78       	rjmp	80000c92 <gpioInit+0xa2>
80000c86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c8e:	f1 49 00 48 	st.w	r8[72],r9
80000c92:	2f 9d       	sub	sp,-28
80000c94:	e3 cd 80 80 	ldm	sp++,r7,pc

80000c98 <gpioClear>:
80000c98:	eb cd 40 80 	pushm	r7,lr
80000c9c:	1a 97       	mov	r7,sp
80000c9e:	20 5d       	sub	sp,20
80000ca0:	ef 4c ff ec 	st.w	r7[-20],r12
80000ca4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ca8:	a5 58       	asr	r8,0x5
80000caa:	ef 48 ff f4 	st.w	r7[-12],r8
80000cae:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000cb6:	ef 48 ff fc 	st.w	r7[-4],r8
80000cba:	30 19       	mov	r9,1
80000cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cc0:	f2 08 09 48 	lsl	r8,r9,r8
80000cc4:	ef 48 ff f8 	st.w	r7[-8],r8
80000cc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ccc:	a9 68       	lsl	r8,0x8
80000cce:	e0 28 f0 00 	sub	r8,61440
80000cd2:	ef 48 ff f0 	st.w	r7[-16],r8
80000cd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000cde:	f1 49 00 58 	st.w	r8[88],r9
80000ce2:	2f bd       	sub	sp,-20
80000ce4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ce8 <gpioSet>:
80000ce8:	eb cd 40 80 	pushm	r7,lr
80000cec:	1a 97       	mov	r7,sp
80000cee:	20 5d       	sub	sp,20
80000cf0:	ef 4c ff ec 	st.w	r7[-20],r12
80000cf4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cf8:	a5 58       	asr	r8,0x5
80000cfa:	ef 48 ff f4 	st.w	r7[-12],r8
80000cfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d06:	ef 48 ff fc 	st.w	r7[-4],r8
80000d0a:	30 19       	mov	r9,1
80000d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d10:	f2 08 09 48 	lsl	r8,r9,r8
80000d14:	ef 48 ff f8 	st.w	r7[-8],r8
80000d18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d1c:	a9 68       	lsl	r8,0x8
80000d1e:	e0 28 f0 00 	sub	r8,61440
80000d22:	ef 48 ff f0 	st.w	r7[-16],r8
80000d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d2e:	f1 49 00 54 	st.w	r8[84],r9
80000d32:	2f bd       	sub	sp,-20
80000d34:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d38 <ledInit>:
80000d38:	eb cd 40 80 	pushm	r7,lr
80000d3c:	1a 97       	mov	r7,sp
80000d3e:	20 9d       	sub	sp,36
80000d40:	49 e8       	lddpc	r8,80000db8 <ledInit+0x80>
80000d42:	ee cb 00 24 	sub	r11,r7,36
80000d46:	10 9a       	mov	r10,r8
80000d48:	f4 e8 00 00 	ld.d	r8,r10[0]
80000d4c:	f6 e9 00 00 	st.d	r11[0],r8
80000d50:	f4 e8 00 08 	ld.d	r8,r10[8]
80000d54:	f6 e9 00 08 	st.d	r11[8],r8
80000d58:	f4 e8 00 10 	ld.d	r8,r10[16]
80000d5c:	f6 e9 00 10 	st.d	r11[16],r8
80000d60:	f4 e8 00 18 	ld.d	r8,r10[24]
80000d64:	f6 e9 00 18 	st.d	r11[24],r8
80000d68:	30 08       	mov	r8,0
80000d6a:	ef 48 ff fc 	st.w	r7[-4],r8
80000d6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d72:	a3 68       	lsl	r8,0x2
80000d74:	ee 08 00 08 	add	r8,r7,r8
80000d78:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d7c:	10 9c       	mov	r12,r8
80000d7e:	f0 1f 00 10 	mcall	80000dbc <ledInit+0x84>
80000d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d86:	a3 68       	lsl	r8,0x2
80000d88:	ee 08 00 08 	add	r8,r7,r8
80000d8c:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000d90:	30 0b       	mov	r11,0
80000d92:	10 9c       	mov	r12,r8
80000d94:	f0 1f 00 0b 	mcall	80000dc0 <ledInit+0x88>
80000d98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d9c:	58 78       	cp.w	r8,7
80000d9e:	5f 18       	srne	r8
80000da0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000da4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000da8:	2f f8       	sub	r8,-1
80000daa:	ef 48 ff fc 	st.w	r7[-4],r8
80000dae:	58 09       	cp.w	r9,0
80000db0:	cd f1       	brne	80000d6e <ledInit+0x36>
80000db2:	2f 7d       	sub	sp,-36
80000db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000db8:	80 00       	ld.sh	r0,r0[0x0]
80000dba:	1e 00       	add	r0,pc
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	0d e4       	ld.ub	r4,r6[0x6]
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	0b f0       	ld.ub	r0,r5[0x7]

80000dc4 <ledOn>:
80000dc4:	eb cd 40 80 	pushm	r7,lr
80000dc8:	1a 97       	mov	r7,sp
80000dca:	20 1d       	sub	sp,4
80000dcc:	ef 4c ff fc 	st.w	r7[-4],r12
80000dd0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000dd4:	f0 1f 00 03 	mcall	80000de0 <ledOn+0x1c>
80000dd8:	2f fd       	sub	sp,-4
80000dda:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dde:	00 00       	add	r0,r0
80000de0:	80 00       	ld.sh	r0,r0[0x0]
80000de2:	0c 98       	mov	r8,r6

80000de4 <ledOff>:
80000de4:	eb cd 40 80 	pushm	r7,lr
80000de8:	1a 97       	mov	r7,sp
80000dea:	20 1d       	sub	sp,4
80000dec:	ef 4c ff fc 	st.w	r7[-4],r12
80000df0:	ee fc ff fc 	ld.w	r12,r7[-4]
80000df4:	f0 1f 00 03 	mcall	80000e00 <ledOff+0x1c>
80000df8:	2f fd       	sub	sp,-4
80000dfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dfe:	00 00       	add	r0,r0
80000e00:	80 00       	ld.sh	r0,r0[0x0]
80000e02:	0c e8       	st.h	--r6,r8

80000e04 <potInit>:
80000e04:	d3 01       	pushm	r11-r12
80000e06:	e0 6c 10 00 	mov	r12,4096
80000e0a:	ea 1c ff ff 	orh	r12,0xffff
80000e0e:	31 6b       	mov	r11,22
80000e10:	99 2b       	st.w	r12[0x8],r11
80000e12:	99 6b       	st.w	r12[0x18],r11
80000e14:	99 6b       	st.w	r12[0x18],r11
80000e16:	e0 6c 3c 00 	mov	r12,15360
80000e1a:	ea 1c ff ff 	orh	r12,0xffff
80000e1e:	30 1b       	mov	r11,1
80000e20:	99 0b       	st.w	r12[0x0],r11
80000e22:	e0 6b 0f 1f 	mov	r11,3871
80000e26:	b1 6b       	lsl	r11,0x10
80000e28:	99 1b       	st.w	r12[0x4],r11
80000e2a:	30 2b       	mov	r11,2
80000e2c:	99 4b       	st.w	r12[0x10],r11
80000e2e:	d3 02       	popm	r11-r12
80000e30:	1c 9f       	mov	pc,lr

80000e32 <potGetValue>:
80000e32:	d1 81       	pushm	r10-r11
80000e34:	e0 6c 3c 00 	mov	r12,15360
80000e38:	ea 1c ff ff 	orh	r12,0xffff
80000e3c:	30 2b       	mov	r11,2
80000e3e:	99 0b       	st.w	r12[0x0],r11

80000e40 <a1>:
80000e40:	78 7a       	ld.w	r10,r12[0x1c]
80000e42:	16 7a       	tst	r10,r11
80000e44:	cf e0       	breq	80000e40 <a1>
80000e46:	78 dc       	ld.w	r12,r12[0x34]
80000e48:	d1 82       	popm	r10-r11
80000e4a:	1c 9f       	mov	pc,lr

80000e4c <usartReset>:
80000e4c:	eb cd 40 80 	pushm	r7,lr
80000e50:	1a 97       	mov	r7,sp
80000e52:	20 3d       	sub	sp,12
80000e54:	ef 4c ff f8 	st.w	r7[-8],r12
80000e58:	f0 1f 00 16 	mcall	80000eb0 <usartReset+0x64>
80000e5c:	18 98       	mov	r8,r12
80000e5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e66:	58 08       	cp.w	r8,0
80000e68:	c0 30       	breq	80000e6e <usartReset+0x22>
80000e6a:	f0 1f 00 13 	mcall	80000eb4 <usartReset+0x68>
80000e6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e72:	3f f8       	mov	r8,-1
80000e74:	93 38       	st.w	r9[0xc],r8
80000e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000e7a:	70 58       	ld.w	r8,r8[0x14]
80000e7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e80:	58 08       	cp.w	r8,0
80000e82:	c0 30       	breq	80000e88 <usartReset+0x3c>
80000e84:	f0 1f 00 0d 	mcall	80000eb8 <usartReset+0x6c>
80000e88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e8c:	30 08       	mov	r8,0
80000e8e:	93 18       	st.w	r9[0x4],r8
80000e90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e94:	30 08       	mov	r8,0
80000e96:	93 98       	st.w	r9[0x24],r8
80000e98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e9c:	30 08       	mov	r8,0
80000e9e:	93 a8       	st.w	r9[0x28],r8
80000ea0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ea4:	ea 68 61 0c 	mov	r8,680204
80000ea8:	93 08       	st.w	r9[0x0],r8
80000eaa:	2f dd       	sub	sp,-12
80000eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80000eb0:	80 00       	ld.sh	r0,r0[0x0]
80000eb2:	1b 6e       	ld.uh	lr,--sp
80000eb4:	80 00       	ld.sh	r0,r0[0x0]
80000eb6:	1b 66       	ld.uh	r6,--sp
80000eb8:	80 00       	ld.sh	r0,r0[0x0]
80000eba:	1b 6a       	ld.uh	r10,--sp

80000ebc <usartSetBaudrate>:
80000ebc:	eb cd 40 80 	pushm	r7,lr
80000ec0:	1a 97       	mov	r7,sp
80000ec2:	20 bd       	sub	sp,44
80000ec4:	ef 4c ff ec 	st.w	r7[-20],r12
80000ec8:	ef 4b ff e8 	st.w	r7[-24],r11
80000ecc:	ef 4a ff e4 	st.w	r7[-28],r10
80000ed0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ed4:	f0 09 15 04 	lsl	r9,r8,0x4
80000ed8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000edc:	10 39       	cp.w	r9,r8
80000ede:	e0 8b 00 06 	brhi	80000eea <usartSetBaudrate+0x2e>
80000ee2:	31 09       	mov	r9,16
80000ee4:	ef 49 ff d4 	st.w	r7[-44],r9
80000ee8:	c0 48       	rjmp	80000ef0 <usartSetBaudrate+0x34>
80000eea:	30 88       	mov	r8,8
80000eec:	ef 48 ff d4 	st.w	r7[-44],r8
80000ef0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000ef4:	ef 49 ff f0 	st.w	r7[-16],r9
80000ef8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000efc:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f00:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f08:	f2 08 02 48 	mul	r8,r9,r8
80000f0c:	a1 98       	lsr	r8,0x1
80000f0e:	10 0a       	add	r10,r8
80000f10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f14:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f18:	f2 08 02 48 	mul	r8,r9,r8
80000f1c:	f4 08 0d 08 	divu	r8,r10,r8
80000f20:	ef 48 ff f4 	st.w	r7[-12],r8
80000f24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f28:	a3 98       	lsr	r8,0x3
80000f2a:	ef 48 ff f8 	st.w	r7[-8],r8
80000f2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f32:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000f36:	ef 48 ff fc 	st.w	r7[-4],r8
80000f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f3e:	58 08       	cp.w	r8,0
80000f40:	c0 70       	breq	80000f4e <usartSetBaudrate+0x92>
80000f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f46:	e0 48 ff ff 	cp.w	r8,65535
80000f4a:	e0 88 00 06 	brls	80000f56 <usartSetBaudrate+0x9a>
80000f4e:	30 18       	mov	r8,1
80000f50:	ef 48 ff d8 	st.w	r7[-40],r8
80000f54:	c2 c8       	rjmp	80000fac <usartSetBaudrate+0xf0>
80000f56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f5a:	70 18       	ld.w	r8,r8[0x4]
80000f5c:	10 99       	mov	r9,r8
80000f5e:	e4 19 ff f7 	andh	r9,0xfff7
80000f62:	e0 19 fe cf 	andl	r9,0xfecf
80000f66:	ef 49 ff dc 	st.w	r7[-36],r9
80000f6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f6e:	59 08       	cp.w	r8,16
80000f70:	c0 60       	breq	80000f7c <usartSetBaudrate+0xc0>
80000f72:	e8 68 00 00 	mov	r8,524288
80000f76:	ef 48 ff e0 	st.w	r7[-32],r8
80000f7a:	c0 48       	rjmp	80000f82 <usartSetBaudrate+0xc6>
80000f7c:	30 09       	mov	r9,0
80000f7e:	ef 49 ff e0 	st.w	r7[-32],r9
80000f82:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000f86:	ee f8 ff e0 	ld.w	r8,r7[-32]
80000f8a:	10 49       	or	r9,r8
80000f8c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f90:	91 19       	st.w	r8[0x4],r9
80000f92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f96:	f0 09 15 10 	lsl	r9,r8,0x10
80000f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000f9e:	10 49       	or	r9,r8
80000fa0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fa4:	91 89       	st.w	r8[0x20],r9
80000fa6:	30 09       	mov	r9,0
80000fa8:	ef 49 ff d8 	st.w	r7[-40],r9
80000fac:	ee f8 ff d8 	ld.w	r8,r7[-40]
80000fb0:	10 9c       	mov	r12,r8
80000fb2:	2f 5d       	sub	sp,-44
80000fb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fb8 <usartInit>:
80000fb8:	eb cd 40 80 	pushm	r7,lr
80000fbc:	1a 97       	mov	r7,sp
80000fbe:	20 4d       	sub	sp,16
80000fc0:	ef 4c ff f8 	st.w	r7[-8],r12
80000fc4:	ef 4b ff f4 	st.w	r7[-12],r11
80000fc8:	ef 4a ff f0 	st.w	r7[-16],r10
80000fcc:	fe 78 10 00 	mov	r8,-61440
80000fd0:	ef 48 ff fc 	st.w	r7[-4],r8
80000fd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000fd8:	30 18       	mov	r8,1
80000fda:	93 28       	st.w	r9[0x8],r8
80000fdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000fe0:	30 28       	mov	r8,2
80000fe2:	93 28       	st.w	r9[0x8],r8
80000fe4:	ee fc ff f8 	ld.w	r12,r7[-8]
80000fe8:	f0 1f 00 3b 	mcall	800010d4 <usartInit+0x11c>
80000fec:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ff4:	70 08       	ld.w	r8,r8[0x0]
80000ff6:	12 9a       	mov	r10,r9
80000ff8:	10 9b       	mov	r11,r8
80000ffa:	ee fc ff f8 	ld.w	r12,r7[-8]
80000ffe:	f0 1f 00 37 	mcall	800010d8 <usartInit+0x120>
80001002:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001006:	11 c9       	ld.ub	r9,r8[0x4]
80001008:	30 98       	mov	r8,9
8000100a:	f0 09 18 00 	cp.b	r9,r8
8000100e:	c0 a1       	brne	80001022 <usartInit+0x6a>
80001010:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001014:	70 18       	ld.w	r8,r8[0x4]
80001016:	10 99       	mov	r9,r8
80001018:	b1 b9       	sbr	r9,0x11
8000101a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000101e:	91 19       	st.w	r8[0x4],r9
80001020:	c0 d8       	rjmp	8000103a <usartInit+0x82>
80001022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001026:	70 19       	ld.w	r9,r8[0x4]
80001028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000102c:	11 c8       	ld.ub	r8,r8[0x4]
8000102e:	20 58       	sub	r8,5
80001030:	a7 68       	lsl	r8,0x6
80001032:	10 49       	or	r9,r8
80001034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001038:	91 19       	st.w	r8[0x4],r9
8000103a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000103e:	70 1a       	ld.w	r10,r8[0x4]
80001040:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001044:	11 d8       	ld.ub	r8,r8[0x5]
80001046:	f0 09 15 09 	lsl	r9,r8,0x9
8000104a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000104e:	f1 38 00 08 	ld.ub	r8,r8[8]
80001052:	af 68       	lsl	r8,0xe
80001054:	f3 e8 10 08 	or	r8,r9,r8
80001058:	f5 e8 10 09 	or	r9,r10,r8
8000105c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001060:	91 19       	st.w	r8[0x4],r9
80001062:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001066:	90 39       	ld.sh	r9,r8[0x6]
80001068:	30 28       	mov	r8,2
8000106a:	f0 09 19 00 	cp.h	r9,r8
8000106e:	e0 88 00 14 	brls	80001096 <usartInit+0xde>
80001072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001076:	70 18       	ld.w	r8,r8[0x4]
80001078:	10 99       	mov	r9,r8
8000107a:	ad b9       	sbr	r9,0xd
8000107c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001080:	91 19       	st.w	r8[0x4],r9
80001082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001086:	90 38       	ld.sh	r8,r8[0x6]
80001088:	5c 78       	castu.h	r8
8000108a:	20 28       	sub	r8,2
8000108c:	10 99       	mov	r9,r8
8000108e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001092:	91 a9       	st.w	r8[0x28],r9
80001094:	c0 d8       	rjmp	800010ae <usartInit+0xf6>
80001096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109a:	70 19       	ld.w	r9,r8[0x4]
8000109c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010a0:	90 38       	ld.sh	r8,r8[0x6]
800010a2:	5c 78       	castu.h	r8
800010a4:	ad 68       	lsl	r8,0xc
800010a6:	10 49       	or	r9,r8
800010a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ac:	91 19       	st.w	r8[0x4],r9
800010ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b2:	70 18       	ld.w	r8,r8[0x4]
800010b4:	10 99       	mov	r9,r8
800010b6:	e0 19 ff f0 	andl	r9,0xfff0
800010ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010be:	91 19       	st.w	r8[0x4],r9
800010c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010c4:	35 08       	mov	r8,80
800010c6:	93 08       	st.w	r9[0x0],r8
800010c8:	30 08       	mov	r8,0
800010ca:	10 9c       	mov	r12,r8
800010cc:	2f cd       	sub	sp,-16
800010ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800010d2:	00 00       	add	r0,r0
800010d4:	80 00       	ld.sh	r0,r0[0x0]
800010d6:	0e 4c       	or	r12,r7
800010d8:	80 00       	ld.sh	r0,r0[0x0]
800010da:	0e bc       	st.h	r7++,r12

800010dc <timerInit>:
800010dc:	d5 01       	pushm	r11,lr
800010de:	d2 01       	pushm	r12
800010e0:	f0 1f 00 28 	mcall	80001180 <timerClearInterrupt+0x10>
800010e4:	f0 1f 00 28 	mcall	80001184 <timerClearInterrupt+0x14>
800010e8:	e0 6c 38 00 	mov	r12,14336
800010ec:	ea 1c ff ff 	orh	r12,0xffff
800010f0:	e0 6b c0 00 	mov	r11,49152
800010f4:	ea 1b 00 00 	orh	r11,0x0
800010f8:	99 1b       	st.w	r12[0x4],r11
800010fa:	30 1b       	mov	r11,1
800010fc:	a5 6b       	lsl	r11,0x4
800010fe:	99 9b       	st.w	r12[0x24],r11
80001100:	d2 02       	popm	r12
80001102:	f0 1f 00 22 	mcall	80001188 <timerClearInterrupt+0x18>
80001106:	d5 02       	popm	r11,lr
80001108:	1c 9f       	mov	pc,lr

8000110a <timerReset>:
8000110a:	d3 01       	pushm	r11-r12
8000110c:	e0 6c 38 00 	mov	r12,14336
80001110:	ea 1c ff ff 	orh	r12,0xffff
80001114:	30 5b       	mov	r11,5
80001116:	99 0b       	st.w	r12[0x0],r11
80001118:	e0 6b 00 14 	mov	r11,20
8000111c:	ea 1b 00 00 	orh	r11,0x0
80001120:	76 0b       	ld.w	r11,r11[0x0]
80001122:	99 7b       	st.w	r12[0x1c],r11
80001124:	d3 02       	popm	r11-r12
80001126:	1c 9f       	mov	pc,lr

80001128 <timerStop>:
80001128:	d3 01       	pushm	r11-r12
8000112a:	e0 6c 38 00 	mov	r12,14336
8000112e:	ea 1c ff ff 	orh	r12,0xffff
80001132:	30 2b       	mov	r11,2
80001134:	99 0b       	st.w	r12[0x0],r11
80001136:	d3 02       	popm	r11-r12
80001138:	1c 9f       	mov	pc,lr

8000113a <timerRCSet>:
8000113a:	d3 01       	pushm	r11-r12
8000113c:	49 4b       	lddpc	r11,8000118c <timerClearInterrupt+0x1c>
8000113e:	97 0c       	st.w	r11[0x0],r12
80001140:	e0 6c 38 00 	mov	r12,14336
80001144:	ea 1c ff ff 	orh	r12,0xffff
80001148:	76 0b       	ld.w	r11,r11[0x0]
8000114a:	99 7b       	st.w	r12[0x1c],r11
8000114c:	d3 02       	popm	r11-r12
8000114e:	1c 9f       	mov	pc,lr

80001150 <timerPrescaleSet>:
80001150:	d3 81       	pushm	r10-r12
80001152:	49 0b       	lddpc	r11,80001190 <timerClearInterrupt+0x20>
80001154:	97 0c       	st.w	r11[0x0],r12
80001156:	e0 6c 38 00 	mov	r12,14336
8000115a:	ea 1c ff ff 	orh	r12,0xffff
8000115e:	78 1a       	ld.w	r10,r12[0x4]
80001160:	3f 8b       	mov	r11,-8
80001162:	16 6a       	and	r10,r11
80001164:	48 bb       	lddpc	r11,80001190 <timerClearInterrupt+0x20>
80001166:	76 0b       	ld.w	r11,r11[0x0]
80001168:	14 4b       	or	r11,r10
8000116a:	99 1b       	st.w	r12[0x4],r11
8000116c:	d3 82       	popm	r10-r12
8000116e:	1c 9f       	mov	pc,lr

80001170 <timerClearInterrupt>:
80001170:	d2 01       	pushm	r12
80001172:	e0 6c 38 00 	mov	r12,14336
80001176:	ea 1c ff ff 	orh	r12,0xffff
8000117a:	78 8c       	ld.w	r12,r12[0x20]
8000117c:	d2 02       	popm	r12
8000117e:	1c 9f       	mov	pc,lr
80001180:	80 00       	ld.sh	r0,r0[0x0]
80001182:	1b 66       	ld.uh	r6,--sp
80001184:	80 00       	ld.sh	r0,r0[0x0]
80001186:	11 70       	ld.ub	r0,--r8
80001188:	80 00       	ld.sh	r0,r0[0x0]
8000118a:	0a d0       	st.w	--r5,r0
8000118c:	00 00       	add	r0,r0
8000118e:	00 14       	sub	r4,r0
80001190:	00 00       	add	r0,r0
80001192:	00 18       	sub	r8,r0

80001194 <_stext>:
80001194:	49 7d       	lddpc	sp,800011f0 <udata_end+0x4>
80001196:	49 80       	lddpc	r0,800011f4 <udata_end+0x8>
80001198:	1a d0       	st.w	--sp,r0
8000119a:	e5 cd 20 00 	ldmts	sp,sp
8000119e:	1b 00       	ld.w	r0,sp++
800011a0:	49 60       	lddpc	r0,800011f8 <udata_end+0xc>
800011a2:	e3 b0 00 01 	mtsr	0x4,r0
800011a6:	d5 53       	csrf	0x15
800011a8:	e0 6c 0c 00 	mov	r12,3072
800011ac:	ea 1c ff ff 	orh	r12,0xffff
800011b0:	e0 6b 01 07 	mov	r11,263
800011b4:	99 ab       	st.w	r12[0x28],r11
800011b6:	30 4b       	mov	r11,4
800011b8:	99 0b       	st.w	r12[0x0],r11
800011ba:	e0 6a 00 80 	mov	r10,128

800011be <xw8>:
800011be:	79 5b       	ld.w	r11,r12[0x54]
800011c0:	14 7b       	tst	r11,r10
800011c2:	cf e0       	breq	800011be <xw8>
800011c4:	30 5b       	mov	r11,5
800011c6:	99 0b       	st.w	r12[0x0],r11

800011c8 <idata_>:
800011c8:	48 d0       	lddpc	r0,800011fc <udata_end+0x10>
800011ca:	48 e1       	lddpc	r1,80001200 <udata_end+0x14>
800011cc:	02 30       	cp.w	r0,r1
800011ce:	c0 62       	brcc	800011da <idata_end>
800011d0:	48 d2       	lddpc	r2,80001204 <udata_end+0x18>

800011d2 <idata_loop>:
800011d2:	05 04       	ld.w	r4,r2++
800011d4:	00 a4       	st.w	r0++,r4
800011d6:	02 30       	cp.w	r0,r1
800011d8:	cf d3       	brcs	800011d2 <idata_loop>

800011da <idata_end>:
800011da:	48 c0       	lddpc	r0,80001208 <udata_end+0x1c>
800011dc:	48 c1       	lddpc	r1,8000120c <udata_end+0x20>
800011de:	02 30       	cp.w	r0,r1
800011e0:	c0 62       	brcc	800011ec <udata_end>
800011e2:	30 02       	mov	r2,0
800011e4:	30 03       	mov	r3,0

800011e6 <udata_loop>:
800011e6:	00 a2       	st.w	r0++,r2
800011e8:	02 30       	cp.w	r0,r1
800011ea:	cf e3       	brcs	800011e6 <udata_loop>

800011ec <udata_end>:
800011ec:	48 9f       	lddpc	pc,80001210 <udata_end+0x24>
800011ee:	00 00       	add	r0,r0
800011f0:	00 01       	add	r1,r0
800011f2:	00 00       	add	r0,r0
800011f4:	00 00       	add	r0,r0
800011f6:	f0 00       	*unknown*
800011f8:	80 00       	ld.sh	r0,r0[0x0]
800011fa:	1a 00       	add	r0,sp
800011fc:	00 00       	add	r0,r0
800011fe:	00 08       	add	r8,r0
80001200:	00 00       	add	r0,r0
80001202:	05 20       	ld.uh	r0,r2++
80001204:	80 00       	ld.sh	r0,r0[0x0]
80001206:	1e 88       	andn	r8,pc
80001208:	00 00       	add	r0,r0
8000120a:	05 20       	ld.uh	r0,r2++
8000120c:	00 00       	add	r0,r0
8000120e:	05 a0       	ld.ub	r0,r2[0x2]
80001210:	80 00       	ld.sh	r0,r0[0x0]
80001212:	01 58       	ld.sh	r8,--r0

80001214 <calloc>:
80001214:	d4 01       	pushm	lr
80001216:	48 48       	lddpc	r8,80001224 <calloc+0x10>
80001218:	16 9a       	mov	r10,r11
8000121a:	18 9b       	mov	r11,r12
8000121c:	70 0c       	ld.w	r12,r8[0x0]
8000121e:	f0 1f 00 03 	mcall	80001228 <calloc+0x14>
80001222:	d8 02       	popm	pc
80001224:	00 00       	add	r0,r0
80001226:	01 0c       	ld.w	r12,r0++
80001228:	80 00       	ld.sh	r0,r0[0x0]
8000122a:	12 2c       	rsub	r12,r9

8000122c <_calloc_r>:
8000122c:	d4 21       	pushm	r4-r7,lr
8000122e:	f4 0b 02 4b 	mul	r11,r10,r11
80001232:	f0 1f 00 15 	mcall	80001284 <_calloc_r+0x58>
80001236:	18 97       	mov	r7,r12
80001238:	c2 30       	breq	8000127e <_calloc_r+0x52>
8000123a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000123e:	e0 1a ff fc 	andl	r10,0xfffc
80001242:	20 4a       	sub	r10,4
80001244:	e0 4a 00 24 	cp.w	r10,36
80001248:	e0 8b 00 18 	brhi	80001278 <_calloc_r+0x4c>
8000124c:	18 98       	mov	r8,r12
8000124e:	59 3a       	cp.w	r10,19
80001250:	e0 88 00 0f 	brls	8000126e <_calloc_r+0x42>
80001254:	30 09       	mov	r9,0
80001256:	10 a9       	st.w	r8++,r9
80001258:	10 a9       	st.w	r8++,r9
8000125a:	59 ba       	cp.w	r10,27
8000125c:	e0 88 00 09 	brls	8000126e <_calloc_r+0x42>
80001260:	10 a9       	st.w	r8++,r9
80001262:	10 a9       	st.w	r8++,r9
80001264:	e0 4a 00 24 	cp.w	r10,36
80001268:	c0 31       	brne	8000126e <_calloc_r+0x42>
8000126a:	10 a9       	st.w	r8++,r9
8000126c:	10 a9       	st.w	r8++,r9
8000126e:	30 09       	mov	r9,0
80001270:	10 a9       	st.w	r8++,r9
80001272:	91 19       	st.w	r8[0x4],r9
80001274:	91 09       	st.w	r8[0x0],r9
80001276:	c0 48       	rjmp	8000127e <_calloc_r+0x52>
80001278:	30 0b       	mov	r11,0
8000127a:	f0 1f 00 04 	mcall	80001288 <_calloc_r+0x5c>
8000127e:	0e 9c       	mov	r12,r7
80001280:	d8 22       	popm	r4-r7,pc
80001282:	00 00       	add	r0,r0
80001284:	80 00       	ld.sh	r0,r0[0x0]
80001286:	12 8c       	andn	r12,r9
80001288:	80 00       	ld.sh	r0,r0[0x0]
8000128a:	16 dc       	st.w	--r11,r12

8000128c <_malloc_r>:
8000128c:	d4 31       	pushm	r0-r7,lr
8000128e:	f6 c8 ff f5 	sub	r8,r11,-11
80001292:	18 95       	mov	r5,r12
80001294:	10 97       	mov	r7,r8
80001296:	e0 17 ff f8 	andl	r7,0xfff8
8000129a:	59 68       	cp.w	r8,22
8000129c:	f9 b7 08 10 	movls	r7,16
800012a0:	16 37       	cp.w	r7,r11
800012a2:	5f 38       	srlo	r8
800012a4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800012a8:	c0 50       	breq	800012b2 <_malloc_r+0x26>
800012aa:	30 c8       	mov	r8,12
800012ac:	99 38       	st.w	r12[0xc],r8
800012ae:	e0 8f 01 f3 	bral	80001694 <_malloc_r+0x408>
800012b2:	f0 1f 00 50 	mcall	800013f0 <_malloc_r+0x164>
800012b6:	e0 47 01 f7 	cp.w	r7,503
800012ba:	e0 8b 00 1c 	brhi	800012f2 <_malloc_r+0x66>
800012be:	ee 03 16 03 	lsr	r3,r7,0x3
800012c2:	4c d8       	lddpc	r8,800013f4 <_malloc_r+0x168>
800012c4:	f0 03 00 38 	add	r8,r8,r3<<0x3
800012c8:	70 36       	ld.w	r6,r8[0xc]
800012ca:	10 36       	cp.w	r6,r8
800012cc:	c0 61       	brne	800012d8 <_malloc_r+0x4c>
800012ce:	ec c8 ff f8 	sub	r8,r6,-8
800012d2:	70 36       	ld.w	r6,r8[0xc]
800012d4:	10 36       	cp.w	r6,r8
800012d6:	c0 c0       	breq	800012ee <_malloc_r+0x62>
800012d8:	6c 18       	ld.w	r8,r6[0x4]
800012da:	e0 18 ff fc 	andl	r8,0xfffc
800012de:	6c 3a       	ld.w	r10,r6[0xc]
800012e0:	ec 08 00 09 	add	r9,r6,r8
800012e4:	0a 9c       	mov	r12,r5
800012e6:	6c 28       	ld.w	r8,r6[0x8]
800012e8:	95 28       	st.w	r10[0x8],r8
800012ea:	91 3a       	st.w	r8[0xc],r10
800012ec:	c4 68       	rjmp	80001378 <_malloc_r+0xec>
800012ee:	2f e3       	sub	r3,-2
800012f0:	c4 c8       	rjmp	80001388 <_malloc_r+0xfc>
800012f2:	ee 03 16 09 	lsr	r3,r7,0x9
800012f6:	c0 41       	brne	800012fe <_malloc_r+0x72>
800012f8:	ee 03 16 03 	lsr	r3,r7,0x3
800012fc:	c2 68       	rjmp	80001348 <_malloc_r+0xbc>
800012fe:	58 43       	cp.w	r3,4
80001300:	e0 8b 00 06 	brhi	8000130c <_malloc_r+0x80>
80001304:	ee 03 16 06 	lsr	r3,r7,0x6
80001308:	2c 83       	sub	r3,-56
8000130a:	c1 f8       	rjmp	80001348 <_malloc_r+0xbc>
8000130c:	59 43       	cp.w	r3,20
8000130e:	e0 8b 00 04 	brhi	80001316 <_malloc_r+0x8a>
80001312:	2a 53       	sub	r3,-91
80001314:	c1 a8       	rjmp	80001348 <_malloc_r+0xbc>
80001316:	e0 43 00 54 	cp.w	r3,84
8000131a:	e0 8b 00 06 	brhi	80001326 <_malloc_r+0x9a>
8000131e:	ee 03 16 0c 	lsr	r3,r7,0xc
80001322:	29 23       	sub	r3,-110
80001324:	c1 28       	rjmp	80001348 <_malloc_r+0xbc>
80001326:	e0 43 01 54 	cp.w	r3,340
8000132a:	e0 8b 00 06 	brhi	80001336 <_malloc_r+0xaa>
8000132e:	ee 03 16 0f 	lsr	r3,r7,0xf
80001332:	28 93       	sub	r3,-119
80001334:	c0 a8       	rjmp	80001348 <_malloc_r+0xbc>
80001336:	e0 43 05 54 	cp.w	r3,1364
8000133a:	e0 88 00 04 	brls	80001342 <_malloc_r+0xb6>
8000133e:	37 e3       	mov	r3,126
80001340:	c0 48       	rjmp	80001348 <_malloc_r+0xbc>
80001342:	ee 03 16 12 	lsr	r3,r7,0x12
80001346:	28 43       	sub	r3,-124
80001348:	4a ba       	lddpc	r10,800013f4 <_malloc_r+0x168>
8000134a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000134e:	74 36       	ld.w	r6,r10[0xc]
80001350:	c1 98       	rjmp	80001382 <_malloc_r+0xf6>
80001352:	6c 19       	ld.w	r9,r6[0x4]
80001354:	e0 19 ff fc 	andl	r9,0xfffc
80001358:	f2 07 01 0b 	sub	r11,r9,r7
8000135c:	58 fb       	cp.w	r11,15
8000135e:	e0 8a 00 04 	brle	80001366 <_malloc_r+0xda>
80001362:	20 13       	sub	r3,1
80001364:	c1 18       	rjmp	80001386 <_malloc_r+0xfa>
80001366:	6c 38       	ld.w	r8,r6[0xc]
80001368:	58 0b       	cp.w	r11,0
8000136a:	c0 b5       	brlt	80001380 <_malloc_r+0xf4>
8000136c:	6c 2a       	ld.w	r10,r6[0x8]
8000136e:	ec 09 00 09 	add	r9,r6,r9
80001372:	0a 9c       	mov	r12,r5
80001374:	91 2a       	st.w	r8[0x8],r10
80001376:	95 38       	st.w	r10[0xc],r8
80001378:	72 18       	ld.w	r8,r9[0x4]
8000137a:	a1 a8       	sbr	r8,0x0
8000137c:	93 18       	st.w	r9[0x4],r8
8000137e:	cb c8       	rjmp	800014f6 <_malloc_r+0x26a>
80001380:	10 96       	mov	r6,r8
80001382:	14 36       	cp.w	r6,r10
80001384:	ce 71       	brne	80001352 <_malloc_r+0xc6>
80001386:	2f f3       	sub	r3,-1
80001388:	49 ba       	lddpc	r10,800013f4 <_malloc_r+0x168>
8000138a:	f4 cc ff f8 	sub	r12,r10,-8
8000138e:	78 26       	ld.w	r6,r12[0x8]
80001390:	18 36       	cp.w	r6,r12
80001392:	c6 e0       	breq	8000146e <_malloc_r+0x1e2>
80001394:	6c 19       	ld.w	r9,r6[0x4]
80001396:	e0 19 ff fc 	andl	r9,0xfffc
8000139a:	f2 07 01 08 	sub	r8,r9,r7
8000139e:	58 f8       	cp.w	r8,15
800013a0:	e0 89 00 90 	brgt	800014c0 <_malloc_r+0x234>
800013a4:	99 3c       	st.w	r12[0xc],r12
800013a6:	99 2c       	st.w	r12[0x8],r12
800013a8:	58 08       	cp.w	r8,0
800013aa:	c0 55       	brlt	800013b4 <_malloc_r+0x128>
800013ac:	ec 09 00 09 	add	r9,r6,r9
800013b0:	0a 9c       	mov	r12,r5
800013b2:	ce 3b       	rjmp	80001378 <_malloc_r+0xec>
800013b4:	e0 49 01 ff 	cp.w	r9,511
800013b8:	e0 8b 00 13 	brhi	800013de <_malloc_r+0x152>
800013bc:	a3 99       	lsr	r9,0x3
800013be:	f4 09 00 38 	add	r8,r10,r9<<0x3
800013c2:	70 2b       	ld.w	r11,r8[0x8]
800013c4:	8d 38       	st.w	r6[0xc],r8
800013c6:	8d 2b       	st.w	r6[0x8],r11
800013c8:	97 36       	st.w	r11[0xc],r6
800013ca:	91 26       	st.w	r8[0x8],r6
800013cc:	a3 49       	asr	r9,0x2
800013ce:	74 18       	ld.w	r8,r10[0x4]
800013d0:	30 1b       	mov	r11,1
800013d2:	f6 09 09 49 	lsl	r9,r11,r9
800013d6:	f1 e9 10 09 	or	r9,r8,r9
800013da:	95 19       	st.w	r10[0x4],r9
800013dc:	c4 98       	rjmp	8000146e <_malloc_r+0x1e2>
800013de:	f2 0a 16 09 	lsr	r10,r9,0x9
800013e2:	58 4a       	cp.w	r10,4
800013e4:	e0 8b 00 0a 	brhi	800013f8 <_malloc_r+0x16c>
800013e8:	f2 0a 16 06 	lsr	r10,r9,0x6
800013ec:	2c 8a       	sub	r10,-56
800013ee:	c2 38       	rjmp	80001434 <_malloc_r+0x1a8>
800013f0:	80 00       	ld.sh	r0,r0[0x0]
800013f2:	16 ea       	st.h	--r11,r10
800013f4:	00 00       	add	r0,r0
800013f6:	01 10       	ld.sh	r0,r0++
800013f8:	59 4a       	cp.w	r10,20
800013fa:	e0 8b 00 04 	brhi	80001402 <_malloc_r+0x176>
800013fe:	2a 5a       	sub	r10,-91
80001400:	c1 a8       	rjmp	80001434 <_malloc_r+0x1a8>
80001402:	e0 4a 00 54 	cp.w	r10,84
80001406:	e0 8b 00 06 	brhi	80001412 <_malloc_r+0x186>
8000140a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000140e:	29 2a       	sub	r10,-110
80001410:	c1 28       	rjmp	80001434 <_malloc_r+0x1a8>
80001412:	e0 4a 01 54 	cp.w	r10,340
80001416:	e0 8b 00 06 	brhi	80001422 <_malloc_r+0x196>
8000141a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000141e:	28 9a       	sub	r10,-119
80001420:	c0 a8       	rjmp	80001434 <_malloc_r+0x1a8>
80001422:	e0 4a 05 54 	cp.w	r10,1364
80001426:	e0 88 00 04 	brls	8000142e <_malloc_r+0x1a2>
8000142a:	37 ea       	mov	r10,126
8000142c:	c0 48       	rjmp	80001434 <_malloc_r+0x1a8>
8000142e:	f2 0a 16 12 	lsr	r10,r9,0x12
80001432:	28 4a       	sub	r10,-124
80001434:	4c 8b       	lddpc	r11,80001554 <_malloc_r+0x2c8>
80001436:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000143a:	68 28       	ld.w	r8,r4[0x8]
8000143c:	08 38       	cp.w	r8,r4
8000143e:	c0 e1       	brne	8000145a <_malloc_r+0x1ce>
80001440:	76 19       	ld.w	r9,r11[0x4]
80001442:	a3 4a       	asr	r10,0x2
80001444:	30 1e       	mov	lr,1
80001446:	fc 0a 09 4a 	lsl	r10,lr,r10
8000144a:	f3 ea 10 0a 	or	r10,r9,r10
8000144e:	10 99       	mov	r9,r8
80001450:	97 1a       	st.w	r11[0x4],r10
80001452:	c0 a8       	rjmp	80001466 <_malloc_r+0x1da>
80001454:	70 28       	ld.w	r8,r8[0x8]
80001456:	08 38       	cp.w	r8,r4
80001458:	c0 60       	breq	80001464 <_malloc_r+0x1d8>
8000145a:	70 1a       	ld.w	r10,r8[0x4]
8000145c:	e0 1a ff fc 	andl	r10,0xfffc
80001460:	14 39       	cp.w	r9,r10
80001462:	cf 93       	brcs	80001454 <_malloc_r+0x1c8>
80001464:	70 39       	ld.w	r9,r8[0xc]
80001466:	8d 39       	st.w	r6[0xc],r9
80001468:	8d 28       	st.w	r6[0x8],r8
8000146a:	91 36       	st.w	r8[0xc],r6
8000146c:	93 26       	st.w	r9[0x8],r6
8000146e:	e6 08 14 02 	asr	r8,r3,0x2
80001472:	30 1b       	mov	r11,1
80001474:	4b 84       	lddpc	r4,80001554 <_malloc_r+0x2c8>
80001476:	f6 08 09 4b 	lsl	r11,r11,r8
8000147a:	68 18       	ld.w	r8,r4[0x4]
8000147c:	10 3b       	cp.w	r11,r8
8000147e:	e0 8b 00 6f 	brhi	8000155c <_malloc_r+0x2d0>
80001482:	f7 e8 00 09 	and	r9,r11,r8
80001486:	c0 b1       	brne	8000149c <_malloc_r+0x210>
80001488:	e0 13 ff fc 	andl	r3,0xfffc
8000148c:	a1 7b       	lsl	r11,0x1
8000148e:	2f c3       	sub	r3,-4
80001490:	c0 38       	rjmp	80001496 <_malloc_r+0x20a>
80001492:	2f c3       	sub	r3,-4
80001494:	a1 7b       	lsl	r11,0x1
80001496:	f7 e8 00 09 	and	r9,r11,r8
8000149a:	cf c0       	breq	80001492 <_malloc_r+0x206>
8000149c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800014a0:	06 92       	mov	r2,r3
800014a2:	1c 91       	mov	r1,lr
800014a4:	62 36       	ld.w	r6,r1[0xc]
800014a6:	c2 e8       	rjmp	80001502 <_malloc_r+0x276>
800014a8:	6c 1a       	ld.w	r10,r6[0x4]
800014aa:	e0 1a ff fc 	andl	r10,0xfffc
800014ae:	f4 07 01 08 	sub	r8,r10,r7
800014b2:	58 f8       	cp.w	r8,15
800014b4:	e0 8a 00 15 	brle	800014de <_malloc_r+0x252>
800014b8:	6c 3a       	ld.w	r10,r6[0xc]
800014ba:	6c 29       	ld.w	r9,r6[0x8]
800014bc:	95 29       	st.w	r10[0x8],r9
800014be:	93 3a       	st.w	r9[0xc],r10
800014c0:	0e 99       	mov	r9,r7
800014c2:	ec 07 00 07 	add	r7,r6,r7
800014c6:	a1 a9       	sbr	r9,0x0
800014c8:	99 37       	st.w	r12[0xc],r7
800014ca:	99 27       	st.w	r12[0x8],r7
800014cc:	8d 19       	st.w	r6[0x4],r9
800014ce:	ee 08 09 08 	st.w	r7[r8],r8
800014d2:	8f 2c       	st.w	r7[0x8],r12
800014d4:	8f 3c       	st.w	r7[0xc],r12
800014d6:	a1 a8       	sbr	r8,0x0
800014d8:	0a 9c       	mov	r12,r5
800014da:	8f 18       	st.w	r7[0x4],r8
800014dc:	c0 d8       	rjmp	800014f6 <_malloc_r+0x26a>
800014de:	6c 39       	ld.w	r9,r6[0xc]
800014e0:	58 08       	cp.w	r8,0
800014e2:	c0 f5       	brlt	80001500 <_malloc_r+0x274>
800014e4:	ec 0a 00 0a 	add	r10,r6,r10
800014e8:	74 18       	ld.w	r8,r10[0x4]
800014ea:	a1 a8       	sbr	r8,0x0
800014ec:	0a 9c       	mov	r12,r5
800014ee:	95 18       	st.w	r10[0x4],r8
800014f0:	6c 28       	ld.w	r8,r6[0x8]
800014f2:	93 28       	st.w	r9[0x8],r8
800014f4:	91 39       	st.w	r8[0xc],r9
800014f6:	f0 1f 00 19 	mcall	80001558 <_malloc_r+0x2cc>
800014fa:	ec cc ff f8 	sub	r12,r6,-8
800014fe:	d8 32       	popm	r0-r7,pc
80001500:	12 96       	mov	r6,r9
80001502:	02 36       	cp.w	r6,r1
80001504:	cd 21       	brne	800014a8 <_malloc_r+0x21c>
80001506:	2f f2       	sub	r2,-1
80001508:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000150c:	c0 30       	breq	80001512 <_malloc_r+0x286>
8000150e:	2f 81       	sub	r1,-8
80001510:	cc ab       	rjmp	800014a4 <_malloc_r+0x218>
80001512:	1c 98       	mov	r8,lr
80001514:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001518:	c0 81       	brne	80001528 <_malloc_r+0x29c>
8000151a:	68 19       	ld.w	r9,r4[0x4]
8000151c:	f6 08 11 ff 	rsub	r8,r11,-1
80001520:	f3 e8 00 08 	and	r8,r9,r8
80001524:	89 18       	st.w	r4[0x4],r8
80001526:	c0 78       	rjmp	80001534 <_malloc_r+0x2a8>
80001528:	f0 c9 00 08 	sub	r9,r8,8
8000152c:	20 13       	sub	r3,1
8000152e:	70 08       	ld.w	r8,r8[0x0]
80001530:	12 38       	cp.w	r8,r9
80001532:	cf 10       	breq	80001514 <_malloc_r+0x288>
80001534:	a1 7b       	lsl	r11,0x1
80001536:	68 18       	ld.w	r8,r4[0x4]
80001538:	10 3b       	cp.w	r11,r8
8000153a:	e0 8b 00 11 	brhi	8000155c <_malloc_r+0x2d0>
8000153e:	58 0b       	cp.w	r11,0
80001540:	c0 e0       	breq	8000155c <_malloc_r+0x2d0>
80001542:	04 93       	mov	r3,r2
80001544:	c0 38       	rjmp	8000154a <_malloc_r+0x2be>
80001546:	2f c3       	sub	r3,-4
80001548:	a1 7b       	lsl	r11,0x1
8000154a:	f7 e8 00 09 	and	r9,r11,r8
8000154e:	ca 71       	brne	8000149c <_malloc_r+0x210>
80001550:	cf bb       	rjmp	80001546 <_malloc_r+0x2ba>
80001552:	00 00       	add	r0,r0
80001554:	00 00       	add	r0,r0
80001556:	01 10       	ld.sh	r0,r0++
80001558:	80 00       	ld.sh	r0,r0[0x0]
8000155a:	16 ec       	st.h	--r11,r12
8000155c:	68 23       	ld.w	r3,r4[0x8]
8000155e:	66 12       	ld.w	r2,r3[0x4]
80001560:	e0 12 ff fc 	andl	r2,0xfffc
80001564:	0e 32       	cp.w	r2,r7
80001566:	5f 39       	srlo	r9
80001568:	e4 07 01 08 	sub	r8,r2,r7
8000156c:	58 f8       	cp.w	r8,15
8000156e:	5f aa       	srle	r10
80001570:	f5 e9 10 09 	or	r9,r10,r9
80001574:	e0 80 00 a2 	breq	800016b8 <_malloc_r+0x42c>
80001578:	4c 88       	lddpc	r8,80001698 <_malloc_r+0x40c>
8000157a:	70 01       	ld.w	r1,r8[0x0]
8000157c:	4c 88       	lddpc	r8,8000169c <_malloc_r+0x410>
8000157e:	2f 01       	sub	r1,-16
80001580:	70 08       	ld.w	r8,r8[0x0]
80001582:	0e 01       	add	r1,r7
80001584:	5b f8       	cp.w	r8,-1
80001586:	c0 40       	breq	8000158e <_malloc_r+0x302>
80001588:	28 11       	sub	r1,-127
8000158a:	e0 11 ff 80 	andl	r1,0xff80
8000158e:	02 9b       	mov	r11,r1
80001590:	0a 9c       	mov	r12,r5
80001592:	f0 1f 00 44 	mcall	800016a0 <_malloc_r+0x414>
80001596:	18 96       	mov	r6,r12
80001598:	5b fc       	cp.w	r12,-1
8000159a:	c6 e0       	breq	80001676 <_malloc_r+0x3ea>
8000159c:	e6 02 00 08 	add	r8,r3,r2
800015a0:	10 3c       	cp.w	r12,r8
800015a2:	c0 32       	brcc	800015a8 <_malloc_r+0x31c>
800015a4:	08 33       	cp.w	r3,r4
800015a6:	c6 81       	brne	80001676 <_malloc_r+0x3ea>
800015a8:	4b fa       	lddpc	r10,800016a4 <_malloc_r+0x418>
800015aa:	74 09       	ld.w	r9,r10[0x0]
800015ac:	e2 09 00 09 	add	r9,r1,r9
800015b0:	95 09       	st.w	r10[0x0],r9
800015b2:	10 36       	cp.w	r6,r8
800015b4:	c0 a1       	brne	800015c8 <_malloc_r+0x33c>
800015b6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800015ba:	c0 71       	brne	800015c8 <_malloc_r+0x33c>
800015bc:	e2 02 00 02 	add	r2,r1,r2
800015c0:	68 28       	ld.w	r8,r4[0x8]
800015c2:	a1 a2       	sbr	r2,0x0
800015c4:	91 12       	st.w	r8[0x4],r2
800015c6:	c4 c8       	rjmp	8000165e <_malloc_r+0x3d2>
800015c8:	4b 5a       	lddpc	r10,8000169c <_malloc_r+0x410>
800015ca:	74 0b       	ld.w	r11,r10[0x0]
800015cc:	5b fb       	cp.w	r11,-1
800015ce:	c0 31       	brne	800015d4 <_malloc_r+0x348>
800015d0:	95 06       	st.w	r10[0x0],r6
800015d2:	c0 68       	rjmp	800015de <_malloc_r+0x352>
800015d4:	ec 09 00 09 	add	r9,r6,r9
800015d8:	4b 3a       	lddpc	r10,800016a4 <_malloc_r+0x418>
800015da:	10 19       	sub	r9,r8
800015dc:	95 09       	st.w	r10[0x0],r9
800015de:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800015e2:	f0 09 11 08 	rsub	r9,r8,8
800015e6:	58 08       	cp.w	r8,0
800015e8:	f2 08 17 10 	movne	r8,r9
800015ec:	ed d8 e1 06 	addne	r6,r6,r8
800015f0:	28 08       	sub	r8,-128
800015f2:	ec 01 00 01 	add	r1,r6,r1
800015f6:	0a 9c       	mov	r12,r5
800015f8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800015fc:	f0 01 01 01 	sub	r1,r8,r1
80001600:	02 9b       	mov	r11,r1
80001602:	f0 1f 00 28 	mcall	800016a0 <_malloc_r+0x414>
80001606:	4a 88       	lddpc	r8,800016a4 <_malloc_r+0x418>
80001608:	5b fc       	cp.w	r12,-1
8000160a:	ec 0c 17 00 	moveq	r12,r6
8000160e:	f9 b1 00 00 	moveq	r1,0
80001612:	70 09       	ld.w	r9,r8[0x0]
80001614:	0c 1c       	sub	r12,r6
80001616:	89 26       	st.w	r4[0x8],r6
80001618:	02 0c       	add	r12,r1
8000161a:	12 01       	add	r1,r9
8000161c:	a1 ac       	sbr	r12,0x0
8000161e:	91 01       	st.w	r8[0x0],r1
80001620:	8d 1c       	st.w	r6[0x4],r12
80001622:	08 33       	cp.w	r3,r4
80001624:	c1 d0       	breq	8000165e <_malloc_r+0x3d2>
80001626:	58 f2       	cp.w	r2,15
80001628:	e0 8b 00 05 	brhi	80001632 <_malloc_r+0x3a6>
8000162c:	30 18       	mov	r8,1
8000162e:	8d 18       	st.w	r6[0x4],r8
80001630:	c2 38       	rjmp	80001676 <_malloc_r+0x3ea>
80001632:	30 59       	mov	r9,5
80001634:	20 c2       	sub	r2,12
80001636:	e0 12 ff f8 	andl	r2,0xfff8
8000163a:	e6 02 00 08 	add	r8,r3,r2
8000163e:	91 29       	st.w	r8[0x8],r9
80001640:	91 19       	st.w	r8[0x4],r9
80001642:	66 18       	ld.w	r8,r3[0x4]
80001644:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001648:	e5 e8 10 08 	or	r8,r2,r8
8000164c:	87 18       	st.w	r3[0x4],r8
8000164e:	58 f2       	cp.w	r2,15
80001650:	e0 88 00 07 	brls	8000165e <_malloc_r+0x3d2>
80001654:	e6 cb ff f8 	sub	r11,r3,-8
80001658:	0a 9c       	mov	r12,r5
8000165a:	f0 1f 00 14 	mcall	800016a8 <_malloc_r+0x41c>
8000165e:	49 49       	lddpc	r9,800016ac <_malloc_r+0x420>
80001660:	72 0a       	ld.w	r10,r9[0x0]
80001662:	49 18       	lddpc	r8,800016a4 <_malloc_r+0x418>
80001664:	70 08       	ld.w	r8,r8[0x0]
80001666:	14 38       	cp.w	r8,r10
80001668:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000166c:	49 19       	lddpc	r9,800016b0 <_malloc_r+0x424>
8000166e:	72 0a       	ld.w	r10,r9[0x0]
80001670:	14 38       	cp.w	r8,r10
80001672:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001676:	68 28       	ld.w	r8,r4[0x8]
80001678:	70 18       	ld.w	r8,r8[0x4]
8000167a:	e0 18 ff fc 	andl	r8,0xfffc
8000167e:	0e 38       	cp.w	r8,r7
80001680:	5f 39       	srlo	r9
80001682:	0e 18       	sub	r8,r7
80001684:	58 f8       	cp.w	r8,15
80001686:	5f aa       	srle	r10
80001688:	f5 e9 10 09 	or	r9,r10,r9
8000168c:	c1 60       	breq	800016b8 <_malloc_r+0x42c>
8000168e:	0a 9c       	mov	r12,r5
80001690:	f0 1f 00 09 	mcall	800016b4 <_malloc_r+0x428>
80001694:	d8 3a       	popm	r0-r7,pc,r12=0
80001696:	00 00       	add	r0,r0
80001698:	00 00       	add	r0,r0
8000169a:	05 34       	ld.ub	r4,r2++
8000169c:	00 00       	add	r0,r0
8000169e:	05 1c       	ld.sh	r12,r2++
800016a0:	80 00       	ld.sh	r0,r0[0x0]
800016a2:	16 f0       	st.b	--r11,r0
800016a4:	00 00       	add	r0,r0
800016a6:	05 38       	ld.ub	r8,r2++
800016a8:	80 00       	ld.sh	r0,r0[0x0]
800016aa:	18 0c       	add	r12,r12
800016ac:	00 00       	add	r0,r0
800016ae:	05 30       	ld.ub	r0,r2++
800016b0:	00 00       	add	r0,r0
800016b2:	05 2c       	ld.uh	r12,r2++
800016b4:	80 00       	ld.sh	r0,r0[0x0]
800016b6:	16 ec       	st.h	--r11,r12
800016b8:	68 26       	ld.w	r6,r4[0x8]
800016ba:	a1 a8       	sbr	r8,0x0
800016bc:	0e 99       	mov	r9,r7
800016be:	a1 a9       	sbr	r9,0x0
800016c0:	8d 19       	st.w	r6[0x4],r9
800016c2:	ec 07 00 07 	add	r7,r6,r7
800016c6:	0a 9c       	mov	r12,r5
800016c8:	89 27       	st.w	r4[0x8],r7
800016ca:	8f 18       	st.w	r7[0x4],r8
800016cc:	f0 1f 00 03 	mcall	800016d8 <_malloc_r+0x44c>
800016d0:	ec cc ff f8 	sub	r12,r6,-8
800016d4:	d8 32       	popm	r0-r7,pc
800016d6:	00 00       	add	r0,r0
800016d8:	80 00       	ld.sh	r0,r0[0x0]
800016da:	16 ec       	st.h	--r11,r12

800016dc <memset>:
800016dc:	18 98       	mov	r8,r12
800016de:	c0 38       	rjmp	800016e4 <memset+0x8>
800016e0:	10 cb       	st.b	r8++,r11
800016e2:	20 1a       	sub	r10,1
800016e4:	58 0a       	cp.w	r10,0
800016e6:	cf d1       	brne	800016e0 <memset+0x4>
800016e8:	5e fc       	retal	r12

800016ea <__malloc_lock>:
800016ea:	5e fc       	retal	r12

800016ec <__malloc_unlock>:
800016ec:	5e fc       	retal	r12
800016ee:	d7 03       	nop

800016f0 <_sbrk_r>:
800016f0:	d4 21       	pushm	r4-r7,lr
800016f2:	30 08       	mov	r8,0
800016f4:	18 97       	mov	r7,r12
800016f6:	48 76       	lddpc	r6,80001710 <_sbrk_r+0x20>
800016f8:	16 9c       	mov	r12,r11
800016fa:	8d 08       	st.w	r6[0x0],r8
800016fc:	f0 1f 00 06 	mcall	80001714 <_sbrk_r+0x24>
80001700:	5b fc       	cp.w	r12,-1
80001702:	c0 51       	brne	8000170c <_sbrk_r+0x1c>
80001704:	6c 08       	ld.w	r8,r6[0x0]
80001706:	58 08       	cp.w	r8,0
80001708:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000170c:	d8 22       	popm	r4-r7,pc
8000170e:	00 00       	add	r0,r0
80001710:	00 00       	add	r0,r0
80001712:	05 9c       	ld.ub	r12,r2[0x1]
80001714:	80 00       	ld.sh	r0,r0[0x0]
80001716:	17 18       	ld.sh	r8,r11++

80001718 <_sbrk>:
80001718:	d4 01       	pushm	lr
8000171a:	48 c8       	lddpc	r8,80001748 <_sbrk+0x30>
8000171c:	70 09       	ld.w	r9,r8[0x0]
8000171e:	58 09       	cp.w	r9,0
80001720:	c0 31       	brne	80001726 <_sbrk+0xe>
80001722:	48 b9       	lddpc	r9,8000174c <_sbrk+0x34>
80001724:	91 09       	st.w	r8[0x0],r9
80001726:	48 99       	lddpc	r9,80001748 <_sbrk+0x30>
80001728:	48 aa       	lddpc	r10,80001750 <_sbrk+0x38>
8000172a:	72 08       	ld.w	r8,r9[0x0]
8000172c:	f0 0c 00 0c 	add	r12,r8,r12
80001730:	14 3c       	cp.w	r12,r10
80001732:	e0 8b 00 04 	brhi	8000173a <_sbrk+0x22>
80001736:	93 0c       	st.w	r9[0x0],r12
80001738:	c0 68       	rjmp	80001744 <_sbrk+0x2c>
8000173a:	f0 1f 00 07 	mcall	80001754 <_sbrk+0x3c>
8000173e:	30 c8       	mov	r8,12
80001740:	99 08       	st.w	r12[0x0],r8
80001742:	3f f8       	mov	r8,-1
80001744:	10 9c       	mov	r12,r8
80001746:	d8 02       	popm	pc
80001748:	00 00       	add	r0,r0
8000174a:	05 60       	ld.uh	r0,--r2
8000174c:	00 00       	add	r0,r0
8000174e:	05 a0       	ld.ub	r0,r2[0x2]
80001750:	00 00       	add	r0,r0
80001752:	e0 00       	*unknown*
80001754:	80 00       	ld.sh	r0,r0[0x0]
80001756:	17 58       	ld.sh	r8,--r11

80001758 <__errno>:
80001758:	48 28       	lddpc	r8,80001760 <__errno+0x8>
8000175a:	70 0c       	ld.w	r12,r8[0x0]
8000175c:	2f 4c       	sub	r12,-12
8000175e:	5e fc       	retal	r12
80001760:	00 00       	add	r0,r0
80001762:	01 0c       	ld.w	r12,r0++

80001764 <_malloc_trim_r>:
80001764:	d4 21       	pushm	r4-r7,lr
80001766:	16 95       	mov	r5,r11
80001768:	18 97       	mov	r7,r12
8000176a:	f0 1f 00 23 	mcall	800017f4 <_malloc_trim_r+0x90>
8000176e:	4a 34       	lddpc	r4,800017f8 <_malloc_trim_r+0x94>
80001770:	68 28       	ld.w	r8,r4[0x8]
80001772:	70 16       	ld.w	r6,r8[0x4]
80001774:	e0 16 ff fc 	andl	r6,0xfffc
80001778:	ec c8 ff 91 	sub	r8,r6,-111
8000177c:	f0 05 01 05 	sub	r5,r8,r5
80001780:	e0 15 ff 80 	andl	r5,0xff80
80001784:	ea c5 00 80 	sub	r5,r5,128
80001788:	e0 45 00 7f 	cp.w	r5,127
8000178c:	e0 8a 00 23 	brle	800017d2 <_malloc_trim_r+0x6e>
80001790:	30 0b       	mov	r11,0
80001792:	0e 9c       	mov	r12,r7
80001794:	f0 1f 00 1a 	mcall	800017fc <_malloc_trim_r+0x98>
80001798:	68 28       	ld.w	r8,r4[0x8]
8000179a:	0c 08       	add	r8,r6
8000179c:	10 3c       	cp.w	r12,r8
8000179e:	c1 a1       	brne	800017d2 <_malloc_trim_r+0x6e>
800017a0:	ea 0b 11 00 	rsub	r11,r5,0
800017a4:	0e 9c       	mov	r12,r7
800017a6:	f0 1f 00 16 	mcall	800017fc <_malloc_trim_r+0x98>
800017aa:	5b fc       	cp.w	r12,-1
800017ac:	c1 71       	brne	800017da <_malloc_trim_r+0x76>
800017ae:	30 0b       	mov	r11,0
800017b0:	0e 9c       	mov	r12,r7
800017b2:	f0 1f 00 13 	mcall	800017fc <_malloc_trim_r+0x98>
800017b6:	68 28       	ld.w	r8,r4[0x8]
800017b8:	f8 08 01 09 	sub	r9,r12,r8
800017bc:	58 f9       	cp.w	r9,15
800017be:	e0 8a 00 0a 	brle	800017d2 <_malloc_trim_r+0x6e>
800017c2:	a1 a9       	sbr	r9,0x0
800017c4:	91 19       	st.w	r8[0x4],r9
800017c6:	48 f8       	lddpc	r8,80001800 <_malloc_trim_r+0x9c>
800017c8:	70 09       	ld.w	r9,r8[0x0]
800017ca:	48 f8       	lddpc	r8,80001804 <_malloc_trim_r+0xa0>
800017cc:	f8 09 01 09 	sub	r9,r12,r9
800017d0:	91 09       	st.w	r8[0x0],r9
800017d2:	0e 9c       	mov	r12,r7
800017d4:	f0 1f 00 0d 	mcall	80001808 <_malloc_trim_r+0xa4>
800017d8:	d8 2a       	popm	r4-r7,pc,r12=0
800017da:	68 28       	ld.w	r8,r4[0x8]
800017dc:	0a 16       	sub	r6,r5
800017de:	a1 a6       	sbr	r6,0x0
800017e0:	91 16       	st.w	r8[0x4],r6
800017e2:	48 98       	lddpc	r8,80001804 <_malloc_trim_r+0xa0>
800017e4:	70 09       	ld.w	r9,r8[0x0]
800017e6:	0a 19       	sub	r9,r5
800017e8:	0e 9c       	mov	r12,r7
800017ea:	91 09       	st.w	r8[0x0],r9
800017ec:	f0 1f 00 07 	mcall	80001808 <_malloc_trim_r+0xa4>
800017f0:	da 2a       	popm	r4-r7,pc,r12=1
800017f2:	00 00       	add	r0,r0
800017f4:	80 00       	ld.sh	r0,r0[0x0]
800017f6:	16 ea       	st.h	--r11,r10
800017f8:	00 00       	add	r0,r0
800017fa:	01 10       	ld.sh	r0,r0++
800017fc:	80 00       	ld.sh	r0,r0[0x0]
800017fe:	16 f0       	st.b	--r11,r0
80001800:	00 00       	add	r0,r0
80001802:	05 1c       	ld.sh	r12,r2++
80001804:	00 00       	add	r0,r0
80001806:	05 38       	ld.ub	r8,r2++
80001808:	80 00       	ld.sh	r0,r0[0x0]
8000180a:	16 ec       	st.h	--r11,r12

8000180c <_free_r>:
8000180c:	d4 21       	pushm	r4-r7,lr
8000180e:	16 96       	mov	r6,r11
80001810:	18 97       	mov	r7,r12
80001812:	58 0b       	cp.w	r11,0
80001814:	e0 80 00 c8 	breq	800019a4 <_free_r+0x198>
80001818:	f0 1f 00 4c 	mcall	80001948 <_free_r+0x13c>
8000181c:	20 86       	sub	r6,8
8000181e:	4c ca       	lddpc	r10,8000194c <_free_r+0x140>
80001820:	6c 18       	ld.w	r8,r6[0x4]
80001822:	74 2e       	ld.w	lr,r10[0x8]
80001824:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001828:	a1 c8       	cbr	r8,0x0
8000182a:	ec 08 00 09 	add	r9,r6,r8
8000182e:	72 1b       	ld.w	r11,r9[0x4]
80001830:	e0 1b ff fc 	andl	r11,0xfffc
80001834:	1c 39       	cp.w	r9,lr
80001836:	c1 d1       	brne	80001870 <_free_r+0x64>
80001838:	f6 08 00 08 	add	r8,r11,r8
8000183c:	58 0c       	cp.w	r12,0
8000183e:	c0 81       	brne	8000184e <_free_r+0x42>
80001840:	6c 09       	ld.w	r9,r6[0x0]
80001842:	12 16       	sub	r6,r9
80001844:	12 08       	add	r8,r9
80001846:	6c 3b       	ld.w	r11,r6[0xc]
80001848:	6c 29       	ld.w	r9,r6[0x8]
8000184a:	97 29       	st.w	r11[0x8],r9
8000184c:	93 3b       	st.w	r9[0xc],r11
8000184e:	10 99       	mov	r9,r8
80001850:	95 26       	st.w	r10[0x8],r6
80001852:	a1 a9       	sbr	r9,0x0
80001854:	8d 19       	st.w	r6[0x4],r9
80001856:	4b f9       	lddpc	r9,80001950 <_free_r+0x144>
80001858:	72 09       	ld.w	r9,r9[0x0]
8000185a:	12 38       	cp.w	r8,r9
8000185c:	c0 63       	brcs	80001868 <_free_r+0x5c>
8000185e:	4b e8       	lddpc	r8,80001954 <_free_r+0x148>
80001860:	0e 9c       	mov	r12,r7
80001862:	70 0b       	ld.w	r11,r8[0x0]
80001864:	f0 1f 00 3d 	mcall	80001958 <_free_r+0x14c>
80001868:	0e 9c       	mov	r12,r7
8000186a:	f0 1f 00 3d 	mcall	8000195c <_free_r+0x150>
8000186e:	d8 22       	popm	r4-r7,pc
80001870:	93 1b       	st.w	r9[0x4],r11
80001872:	58 0c       	cp.w	r12,0
80001874:	c0 30       	breq	8000187a <_free_r+0x6e>
80001876:	30 0c       	mov	r12,0
80001878:	c1 08       	rjmp	80001898 <_free_r+0x8c>
8000187a:	6c 0e       	ld.w	lr,r6[0x0]
8000187c:	f4 c5 ff f8 	sub	r5,r10,-8
80001880:	1c 16       	sub	r6,lr
80001882:	1c 08       	add	r8,lr
80001884:	6c 2e       	ld.w	lr,r6[0x8]
80001886:	0a 3e       	cp.w	lr,r5
80001888:	f9 bc 00 01 	moveq	r12,1
8000188c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001890:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001894:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001898:	f2 0b 00 0e 	add	lr,r9,r11
8000189c:	7c 1e       	ld.w	lr,lr[0x4]
8000189e:	ed be 00 00 	bld	lr,0x0
800018a2:	c1 30       	breq	800018c8 <_free_r+0xbc>
800018a4:	16 08       	add	r8,r11
800018a6:	58 0c       	cp.w	r12,0
800018a8:	c0 c1       	brne	800018c0 <_free_r+0xb4>
800018aa:	4a 9e       	lddpc	lr,8000194c <_free_r+0x140>
800018ac:	72 2b       	ld.w	r11,r9[0x8]
800018ae:	2f 8e       	sub	lr,-8
800018b0:	1c 3b       	cp.w	r11,lr
800018b2:	c0 71       	brne	800018c0 <_free_r+0xb4>
800018b4:	97 36       	st.w	r11[0xc],r6
800018b6:	97 26       	st.w	r11[0x8],r6
800018b8:	8d 2b       	st.w	r6[0x8],r11
800018ba:	8d 3b       	st.w	r6[0xc],r11
800018bc:	30 1c       	mov	r12,1
800018be:	c0 58       	rjmp	800018c8 <_free_r+0xbc>
800018c0:	72 2b       	ld.w	r11,r9[0x8]
800018c2:	72 39       	ld.w	r9,r9[0xc]
800018c4:	93 2b       	st.w	r9[0x8],r11
800018c6:	97 39       	st.w	r11[0xc],r9
800018c8:	10 99       	mov	r9,r8
800018ca:	ec 08 09 08 	st.w	r6[r8],r8
800018ce:	a1 a9       	sbr	r9,0x0
800018d0:	8d 19       	st.w	r6[0x4],r9
800018d2:	58 0c       	cp.w	r12,0
800018d4:	c6 51       	brne	8000199e <_free_r+0x192>
800018d6:	e0 48 01 ff 	cp.w	r8,511
800018da:	e0 8b 00 13 	brhi	80001900 <_free_r+0xf4>
800018de:	a3 98       	lsr	r8,0x3
800018e0:	f4 08 00 39 	add	r9,r10,r8<<0x3
800018e4:	72 2b       	ld.w	r11,r9[0x8]
800018e6:	8d 39       	st.w	r6[0xc],r9
800018e8:	8d 2b       	st.w	r6[0x8],r11
800018ea:	97 36       	st.w	r11[0xc],r6
800018ec:	93 26       	st.w	r9[0x8],r6
800018ee:	a3 48       	asr	r8,0x2
800018f0:	74 19       	ld.w	r9,r10[0x4]
800018f2:	30 1b       	mov	r11,1
800018f4:	f6 08 09 48 	lsl	r8,r11,r8
800018f8:	f3 e8 10 08 	or	r8,r9,r8
800018fc:	95 18       	st.w	r10[0x4],r8
800018fe:	c5 08       	rjmp	8000199e <_free_r+0x192>
80001900:	f0 0b 16 09 	lsr	r11,r8,0x9
80001904:	58 4b       	cp.w	r11,4
80001906:	e0 8b 00 06 	brhi	80001912 <_free_r+0x106>
8000190a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000190e:	2c 8b       	sub	r11,-56
80001910:	c2 b8       	rjmp	80001966 <_free_r+0x15a>
80001912:	59 4b       	cp.w	r11,20
80001914:	e0 8b 00 04 	brhi	8000191c <_free_r+0x110>
80001918:	2a 5b       	sub	r11,-91
8000191a:	c2 68       	rjmp	80001966 <_free_r+0x15a>
8000191c:	e0 4b 00 54 	cp.w	r11,84
80001920:	e0 8b 00 06 	brhi	8000192c <_free_r+0x120>
80001924:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001928:	29 2b       	sub	r11,-110
8000192a:	c1 e8       	rjmp	80001966 <_free_r+0x15a>
8000192c:	e0 4b 01 54 	cp.w	r11,340
80001930:	e0 8b 00 06 	brhi	8000193c <_free_r+0x130>
80001934:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001938:	28 9b       	sub	r11,-119
8000193a:	c1 68       	rjmp	80001966 <_free_r+0x15a>
8000193c:	e0 4b 05 54 	cp.w	r11,1364
80001940:	e0 88 00 10 	brls	80001960 <_free_r+0x154>
80001944:	37 eb       	mov	r11,126
80001946:	c1 08       	rjmp	80001966 <_free_r+0x15a>
80001948:	80 00       	ld.sh	r0,r0[0x0]
8000194a:	16 ea       	st.h	--r11,r10
8000194c:	00 00       	add	r0,r0
8000194e:	01 10       	ld.sh	r0,r0++
80001950:	00 00       	add	r0,r0
80001952:	05 18       	ld.sh	r8,r2++
80001954:	00 00       	add	r0,r0
80001956:	05 34       	ld.ub	r4,r2++
80001958:	80 00       	ld.sh	r0,r0[0x0]
8000195a:	17 64       	ld.uh	r4,--r11
8000195c:	80 00       	ld.sh	r0,r0[0x0]
8000195e:	16 ec       	st.h	--r11,r12
80001960:	f0 0b 16 12 	lsr	r11,r8,0x12
80001964:	28 4b       	sub	r11,-124
80001966:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000196a:	78 29       	ld.w	r9,r12[0x8]
8000196c:	18 39       	cp.w	r9,r12
8000196e:	c0 e1       	brne	8000198a <_free_r+0x17e>
80001970:	74 18       	ld.w	r8,r10[0x4]
80001972:	a3 4b       	asr	r11,0x2
80001974:	30 1c       	mov	r12,1
80001976:	f8 0b 09 4b 	lsl	r11,r12,r11
8000197a:	f1 eb 10 0b 	or	r11,r8,r11
8000197e:	12 98       	mov	r8,r9
80001980:	95 1b       	st.w	r10[0x4],r11
80001982:	c0 a8       	rjmp	80001996 <_free_r+0x18a>
80001984:	72 29       	ld.w	r9,r9[0x8]
80001986:	18 39       	cp.w	r9,r12
80001988:	c0 60       	breq	80001994 <_free_r+0x188>
8000198a:	72 1a       	ld.w	r10,r9[0x4]
8000198c:	e0 1a ff fc 	andl	r10,0xfffc
80001990:	14 38       	cp.w	r8,r10
80001992:	cf 93       	brcs	80001984 <_free_r+0x178>
80001994:	72 38       	ld.w	r8,r9[0xc]
80001996:	8d 38       	st.w	r6[0xc],r8
80001998:	8d 29       	st.w	r6[0x8],r9
8000199a:	93 36       	st.w	r9[0xc],r6
8000199c:	91 26       	st.w	r8[0x8],r6
8000199e:	0e 9c       	mov	r12,r7
800019a0:	f0 1f 00 02 	mcall	800019a8 <_free_r+0x19c>
800019a4:	d8 22       	popm	r4-r7,pc
800019a6:	00 00       	add	r0,r0
800019a8:	80 00       	ld.sh	r0,r0[0x0]
800019aa:	16 ec       	st.h	--r11,r12

Disassembly of section .exception:

80001a00 <_evba>:
	...

80001a28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001a28:	c7 a8       	rjmp	80001b1c <privilegedCalls>
	...

80001b00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001b00:	1c 9f       	mov	pc,lr

80001b02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001b02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001b06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001b0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001b0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001b12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001b14:	c0 31       	brne	80001b1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001b16:	4b 9c       	lddpc	r12,80001bf8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001b18:	18 9f       	mov	pc,r12

80001b1a <_int0_exit>:
_int0_exit:
	rete
80001b1a:	d6 03       	rete

80001b1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001b1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001b1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001b20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001b22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001b24:	9b 3c       	st.w	sp[0xc],r12

80001b26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001b26:	4b 6c       	lddpc	r12,80001bfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001b28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001b2a:	c0 61       	brne	80001b36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001b2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001b2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001b30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b32:	d3 02       	popm	r11-r12
	rete
80001b34:	d6 03       	rete

80001b36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001b36:	4b 3c       	lddpc	r12,80001c00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001b38:	18 3b       	cp.w	r11,r12
	brne privexception
80001b3a:	c0 61       	brne	80001b46 <privexception>
	ld.w r12,sp[USERSR]
80001b3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001b3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001b40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001b42:	d3 02       	popm	r11-r12
	rete
80001b44:	d6 03       	rete

80001b46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001b46:	c0 08       	rjmp	80001b46 <privexception>

80001b48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001b48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001b4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001b4e:	4a ec       	lddpc	r12,80001c04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001b50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001b52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001b54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001b58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001b5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001b60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001b62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001b64:	1c 9f       	mov	pc,lr

80001b66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001b66:	d3 03       	ssrf	0x10
	mov pc,lr
80001b68:	1c 9f       	mov	pc,lr

80001b6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001b6a:	d5 03       	csrf	0x10
	mov pc,lr
80001b6c:	1c 9f       	mov	pc,lr

80001b6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001b6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001b72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001b74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001b78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001b7c:	1c 9f       	mov	pc,lr

80001b7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001b7e:	4a 3c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001b80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001b82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001b84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001b86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001b88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001b8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001b8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001b8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001b90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001b92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001b94:	33 40       	mov	r0,52
	add r0,r12
80001b96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001b98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001b9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001b9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001ba2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001ba4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001ba6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001ba8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001baa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001bac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001bae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001bb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001bb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001bb6:	1c 9f       	mov	pc,lr

80001bb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001bb8:	49 4c       	lddpc	r12,80001c08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001bba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001bbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001bbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001bc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001bc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001bc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001bc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001bca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001bcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001bce:	33 40       	mov	r0,52
	add r0,r12
80001bd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001bd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001bd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001bd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001bda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001bdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001bde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001be0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001be2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001be4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001be6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001be8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001bea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001bec:	d4 01       	pushm	lr
	call timerStart
80001bee:	f0 1f 00 08 	mcall	80001c0c <contextRestoreFromISR+0x54>
	popm lr
80001bf2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001bf4:	1c 9f       	mov	pc,lr
80001bf6:	00 00       	add	r0,r0
80001bf8:	80 00       	ld.sh	r0,r0[0x0]
80001bfa:	0a 9c       	mov	r12,r5
80001bfc:	80 00       	ld.sh	r0,r0[0x0]
80001bfe:	1b 66       	ld.uh	r6,--sp
80001c00:	80 00       	ld.sh	r0,r0[0x0]
80001c02:	1b 6a       	ld.uh	r10,--sp
80001c04:	80 00       	ld.sh	r0,r0[0x0]
80001c06:	1a 00       	add	r0,sp
80001c08:	00 00       	add	r0,r0
80001c0a:	05 98       	ld.ub	r8,r2[0x1]
80001c0c:	80 00       	ld.sh	r0,r0[0x0]
80001c0e:	11 0a       	ld.w	r10,r8++
	...
