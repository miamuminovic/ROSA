
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001bb0  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000078  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000da70  00000590  00000590  00000000  2**0
                  ALLOC
 10 .comment      000000a0  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005e0  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000bd6  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000c0cf  00000000  00000000  00003f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001ffe  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a3d  00000000  00000000  0001203b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000cb8  00000000  00000000  00016a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001ce4  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000019b3  00000000  00000000  00019414  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00613b9c  00000000  00000000  0001adc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000528  00000000  00000000  0062e963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	13 a0       	ld.ub	r0,r9[0x2]

Disassembly of section .text:

80000008 <insert_after>:
#include "include/kernel/lists.h"



int16_t insert_after( tcb * position_tcb, tcb * new_tcb )
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8

	//	printf("position tcb: %d\n", position_tcb);

	if(position_tcb != NULL && new_tcb != NULL)
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
	{
		new_tcb->nexttcb = position_tcb->nexttcb;
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
		new_tcb->prevtcb = position_tcb;
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
		position_tcb->nexttcb = new_tcb;
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
		new_tcb->nexttcb->prevtcb = new_tcb;
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
		
		result = 0;
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
	}

	return result;
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <ROSA_semaphoreCreate>:
#include "include/kernel/semaphore.h"

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 3d       	sub	sp,12
80000078:	ef 4c ff f8 	st.w	r7[-8],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f4 	st.b	r7[-12],r8
	int16_t result = -1;
80000082:	3f f8       	mov	r8,-1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
	
	(*handle) = calloc(1, sizeof(semaphore));
80000088:	31 4b       	mov	r11,20
8000008a:	30 1c       	mov	r12,1
8000008c:	f0 1f 00 13 	mcall	800000d8 <ROSA_semaphoreCreate+0x68>
80000090:	18 98       	mov	r8,r12
80000092:	10 99       	mov	r9,r8
80000094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000098:	91 09       	st.w	r8[0x0],r9
	(*handle)->flag = 0;		// 0 when semaphore is not locked, 1 when semaphore is locked
8000009a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	30 08       	mov	r8,0
800000a2:	b2 08       	st.h	r9[0x0],r8
	(*handle)->ceiling = ceiling;
800000a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000a8:	70 09       	ld.w	r9,r8[0x0]
800000aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000ae:	b2 a8       	st.b	r9[0x2],r8
	(*handle)->current_task = NULL;
800000b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	30 09       	mov	r9,0
800000b8:	91 19       	st.w	r8[0x4],r9
	(*handle)->task_priority = 15;
800000ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000be:	70 09       	ld.w	r9,r8[0x0]
800000c0:	30 f8       	mov	r8,15
800000c2:	f3 68 00 08 	st.b	r9[8],r8
	result = 0;
800000c6:	30 08       	mov	r8,0
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	return result;
800000cc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000d0:	10 9c       	mov	r12,r8
800000d2:	2f dd       	sub	sp,-12
800000d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	14 20       	rsub	r0,r10

800000dc <ROSA_semaphoreLock>:
{
	return handle->flag;
}

int16_t ROSA_semaphoreLock(ROSA_semaphoreHandle_t handle)
{
800000dc:	eb cd 40 80 	pushm	r7,lr
800000e0:	1a 97       	mov	r7,sp
800000e2:	20 2d       	sub	sp,8
800000e4:	ef 4c ff f8 	st.w	r7[-8],r12
	int16_t result = -1;
800000e8:	3f f8       	mov	r8,-1
800000ea:	ef 58 ff fe 	st.h	r7[-2],r8
	if(handle->flag == 0)
800000ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000f2:	90 08       	ld.sh	r8,r8[0x0]
800000f4:	58 08       	cp.w	r8,0
800000f6:	c3 81       	brne	80000166 <ROSA_semaphoreLock+0x8a>
	{
		// If the semaphore is not locked, executing task can lock it
		// Task inherits the priority ceiling of the semaphore
		// Dynamic priority of the task is changed if priority of the task is lower than the ceiling of the semaphore
		
		handle->flag = 1;
800000f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800000fc:	30 18       	mov	r8,1
800000fe:	b2 08       	st.h	r9[0x0],r8
		handle->current_task = EXECTASK;
80000100:	4c 58       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
80000102:	70 09       	ld.w	r9,r8[0x0]
80000104:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000108:	91 19       	st.w	r8[0x4],r9
		handle->task_priority = EXECTASK->effective_priority;
8000010a:	4c 38       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
8000010c:	70 08       	ld.w	r8,r8[0x0]
8000010e:	f1 38 00 65 	ld.ub	r8,r8[101]
80000112:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000116:	f3 68 00 08 	st.b	r9[8],r8
		if(EXECTASK->effective_priority > handle->ceiling)
8000011a:	4b f8       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
8000011c:	70 08       	ld.w	r8,r8[0x0]
8000011e:	f1 39 00 65 	ld.ub	r9,r8[101]
80000122:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000126:	11 a8       	ld.ub	r8,r8[0x2]
80000128:	f0 09 18 00 	cp.b	r9,r8
8000012c:	e0 88 00 19 	brls	8000015e <ROSA_semaphoreLock+0x82>
		{
			endCritical=0;
80000130:	4b a8       	lddpc	r8,80000218 <ROSA_semaphoreLock+0x13c>
80000132:	30 09       	mov	r9,0
80000134:	91 09       	st.w	r8[0x0],r9
			//Reinstalling task because it has higher priority, so the ready list should be rearranged
			ROSA_tcbUninstall(EXECTASK);
80000136:	4b 88       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
80000138:	70 08       	ld.w	r8,r8[0x0]
8000013a:	10 9c       	mov	r12,r8
8000013c:	f0 1f 00 38 	mcall	8000021c <ROSA_semaphoreLock+0x140>
			endCritical=1;
80000140:	4b 68       	lddpc	r8,80000218 <ROSA_semaphoreLock+0x13c>
80000142:	30 19       	mov	r9,1
80000144:	91 09       	st.w	r8[0x0],r9
			EXECTASK->effective_priority = handle->ceiling; 
80000146:	4b 48       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
80000148:	70 09       	ld.w	r9,r8[0x0]
8000014a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000014e:	11 a8       	ld.ub	r8,r8[0x2]
80000150:	f3 68 00 65 	st.b	r9[101],r8
			ROSA_tcbInstall(EXECTASK);
80000154:	4b 08       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
80000156:	70 08       	ld.w	r8,r8[0x0]
80000158:	10 9c       	mov	r12,r8
8000015a:	f0 1f 00 32 	mcall	80000220 <ROSA_semaphoreLock+0x144>
		}
		result = 0;
8000015e:	30 08       	mov	r8,0
80000160:	ef 58 ff fe 	st.h	r7[-2],r8
80000164:	c4 f8       	rjmp	80000202 <ROSA_semaphoreLock+0x126>
	}
	else if(handle->flag == 1 && !(EXECTASK == handle->current_task))
80000166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000016a:	90 09       	ld.sh	r9,r8[0x0]
8000016c:	30 18       	mov	r8,1
8000016e:	f0 09 19 00 	cp.h	r9,r8
80000172:	c3 71       	brne	800001e0 <ROSA_semaphoreLock+0x104>
80000174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000178:	70 19       	ld.w	r9,r8[0x4]
8000017a:	4a 78       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
8000017c:	70 08       	ld.w	r8,r8[0x0]
8000017e:	10 39       	cp.w	r9,r8
80000180:	c3 00       	breq	800001e0 <ROSA_semaphoreLock+0x104>
		// If the semaphore is locked, executing task cannot lock it
		// Task is put into the waiting queue for the specific semaphore
		// Task is also removed from the ready list
		
		//enqueue(& handle->waiting_tasks, EXECTASK);
		endCritical=0;
80000182:	4a 68       	lddpc	r8,80000218 <ROSA_semaphoreLock+0x13c>
80000184:	30 09       	mov	r9,0
80000186:	91 09       	st.w	r8[0x0],r9
		ROSA_tcbUninstall(EXECTASK);
80000188:	4a 38       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
8000018a:	70 08       	ld.w	r8,r8[0x0]
8000018c:	10 9c       	mov	r12,r8
8000018e:	f0 1f 00 24 	mcall	8000021c <ROSA_semaphoreLock+0x140>
		endCritical=1;
80000192:	4a 28       	lddpc	r8,80000218 <ROSA_semaphoreLock+0x13c>
80000194:	30 19       	mov	r9,1
80000196:	91 09       	st.w	r8[0x0],r9
		if(handle->BLOCKEDLIST == NULL)
80000198:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000019c:	70 38       	ld.w	r8,r8[0xc]
8000019e:	58 08       	cp.w	r8,0
800001a0:	c0 c1       	brne	800001b8 <ROSA_semaphoreLock+0xdc>
		{
			handle->BLOCKEDLIST=EXECTASK;
800001a2:	49 d8       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
800001a4:	70 09       	ld.w	r9,r8[0x0]
800001a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001aa:	91 39       	st.w	r8[0xc],r9
			handle->BLOCKEDLIST_end=EXECTASK;
800001ac:	49 a8       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
800001ae:	70 09       	ld.w	r9,r8[0x0]
800001b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001b4:	91 49       	st.w	r8[0x10],r9
800001b6:	c0 f8       	rjmp	800001d4 <ROSA_semaphoreLock+0xf8>
		}
		else
		{
			insert_after(handle->BLOCKEDLIST_end, EXECTASK);
800001b8:	49 78       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
800001ba:	70 09       	ld.w	r9,r8[0x0]
800001bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001c0:	70 48       	ld.w	r8,r8[0x10]
800001c2:	12 9b       	mov	r11,r9
800001c4:	10 9c       	mov	r12,r8
800001c6:	f0 1f 00 18 	mcall	80000224 <ROSA_semaphoreLock+0x148>
			handle->BLOCKEDLIST_end=EXECTASK;
800001ca:	49 38       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
800001cc:	70 09       	ld.w	r9,r8[0x0]
800001ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d2:	91 49       	st.w	r8[0x10],r9
		}
		result = 0;
800001d4:	30 08       	mov	r8,0
800001d6:	ef 58 ff fe 	st.h	r7[-2],r8
		interruptEnable();
800001da:	f0 1f 00 14 	mcall	80000228 <ROSA_semaphoreLock+0x14c>
			EXECTASK->effective_priority = handle->ceiling; 
			ROSA_tcbInstall(EXECTASK);
		}
		result = 0;
	}
	else if(handle->flag == 1 && !(EXECTASK == handle->current_task))
800001de:	c1 28       	rjmp	80000202 <ROSA_semaphoreLock+0x126>
		}
		result = 0;
		interruptEnable();
		
	}
	else if(handle->flag == 1 && EXECTASK == handle->current_task)
800001e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001e4:	90 09       	ld.sh	r9,r8[0x0]
800001e6:	30 18       	mov	r8,1
800001e8:	f0 09 19 00 	cp.h	r9,r8
800001ec:	c0 b1       	brne	80000202 <ROSA_semaphoreLock+0x126>
800001ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001f2:	70 19       	ld.w	r9,r8[0x4]
800001f4:	48 88       	lddpc	r8,80000214 <ROSA_semaphoreLock+0x138>
800001f6:	70 08       	ld.w	r8,r8[0x0]
800001f8:	10 39       	cp.w	r9,r8
800001fa:	c0 41       	brne	80000202 <ROSA_semaphoreLock+0x126>
	{
		result = 0;
800001fc:	30 08       	mov	r8,0
800001fe:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	ROSA_yield();
80000202:	f0 1f 00 0b 	mcall	8000022c <ROSA_semaphoreLock+0x150>
	return result;
80000206:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000020a:	10 9c       	mov	r12,r8
8000020c:	2f ed       	sub	sp,-8
8000020e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000212:	00 00       	add	r0,r0
80000214:	00 00       	add	r0,r0
80000216:	05 84       	ld.ub	r4,r2[0x0]
80000218:	00 00       	add	r0,r0
8000021a:	00 08       	add	r8,r0
8000021c:	80 00       	ld.sh	r0,r0[0x0]
8000021e:	07 a8       	ld.ub	r8,r3[0x2]
80000220:	80 00       	ld.sh	r0,r0[0x0]
80000222:	06 b4       	st.h	r3++,r4
80000224:	80 00       	ld.sh	r0,r0[0x0]
80000226:	00 08       	add	r8,r0
80000228:	80 00       	ld.sh	r0,r0[0x0]
8000022a:	1d 6a       	ld.uh	r10,--lr
8000022c:	80 00       	ld.sh	r0,r0[0x0]
8000022e:	0b ee       	ld.ub	lr,r5[0x6]

80000230 <ROSA_semaphoreUnlock>:

int16_t ROSA_semaphoreUnlock(ROSA_semaphoreHandle_t handle)
{
80000230:	eb cd 40 80 	pushm	r7,lr
80000234:	1a 97       	mov	r7,sp
80000236:	20 3d       	sub	sp,12
80000238:	ef 4c ff f4 	st.w	r7[-12],r12
	int16_t result = -1;
8000023c:	3f f8       	mov	r8,-1
8000023e:	ef 58 ff fa 	st.h	r7[-6],r8
	if(handle->flag == 1)
80000242:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000246:	90 09       	ld.sh	r9,r8[0x0]
80000248:	30 18       	mov	r8,1
8000024a:	f0 09 19 00 	cp.h	r9,r8
8000024e:	c1 61       	brne	8000027a <ROSA_semaphoreUnlock+0x4a>
	{
		// If the semaphore is locked, unlock it, change the priority of the task to the last effective priority
		// Set the pointer to the current task to NULL 
		handle->flag = 0;
80000250:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000254:	30 08       	mov	r8,0
80000256:	b2 08       	st.h	r9[0x0],r8
		//ROSA_tcbUninstall(EXECTASK);
		handle->current_task->effective_priority = handle->task_priority;
80000258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000025c:	70 19       	ld.w	r9,r8[0x4]
8000025e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000262:	f1 38 00 08 	ld.ub	r8,r8[8]
80000266:	f3 68 00 65 	st.b	r9[101],r8
		//ROSA_tcbInstall(EXECTASK);
		handle->current_task = NULL;
8000026a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000026e:	30 09       	mov	r9,0
80000270:	91 19       	st.w	r8[0x4],r9
		result = 0;	
80000272:	30 08       	mov	r8,0
80000274:	ef 58 ff fa 	st.h	r7[-6],r8
80000278:	c0 48       	rjmp	80000280 <ROSA_semaphoreUnlock+0x50>
	}
	else
	{
		// If the semaphore is not locked, do nothing
		result = 0;
8000027a:	30 08       	mov	r8,0
8000027c:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	if(handle->BLOCKEDLIST!=NULL)
80000280:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000284:	70 38       	ld.w	r8,r8[0xc]
80000286:	58 08       	cp.w	r8,0
80000288:	c4 a0       	breq	8000031c <ROSA_semaphoreUnlock+0xec>
		// If there are still some task waiting to take the semaphore, take the first one from the waiting queue
		// Put the task back to ready list
		
		tcb * temp; 
		//dequeue(& handle->waiting_tasks, &temp);
		temp=handle->BLOCKEDLIST;
8000028a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000028e:	70 38       	ld.w	r8,r8[0xc]
80000290:	ef 48 ff fc 	st.w	r7[-4],r8
		if(handle->BLOCKEDLIST==handle->BLOCKEDLIST_end)
80000294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000298:	70 39       	ld.w	r9,r8[0xc]
8000029a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000029e:	70 48       	ld.w	r8,r8[0x10]
800002a0:	10 39       	cp.w	r9,r8
800002a2:	c0 a1       	brne	800002b6 <ROSA_semaphoreUnlock+0x86>
		{
			handle->BLOCKEDLIST=NULL;
800002a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002a8:	30 09       	mov	r9,0
800002aa:	91 39       	st.w	r8[0xc],r9
			handle->BLOCKEDLIST_end=NULL;
800002ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002b0:	30 09       	mov	r9,0
800002b2:	91 49       	st.w	r8[0x10],r9
800002b4:	c0 88       	rjmp	800002c4 <ROSA_semaphoreUnlock+0x94>
		}
		else
		{
			handle->BLOCKEDLIST=handle->BLOCKEDLIST->nexttcb;
800002b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002ba:	70 38       	ld.w	r8,r8[0xc]
800002bc:	70 09       	ld.w	r9,r8[0x0]
800002be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002c2:	91 39       	st.w	r8[0xc],r9
		}
		
		handle->flag = 1;
800002c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800002c8:	30 18       	mov	r8,1
800002ca:	b2 08       	st.h	r9[0x0],r8
		handle->current_task = temp;
800002cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002d4:	91 19       	st.w	r8[0x4],r9
		handle->task_priority = temp->effective_priority;
800002d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002da:	f1 38 00 65 	ld.ub	r8,r8[101]
800002de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800002e2:	f3 68 00 08 	st.b	r9[8],r8
		if(temp->effective_priority > handle->ceiling)
800002e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ea:	f1 39 00 65 	ld.ub	r9,r8[101]
800002ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002f2:	11 a8       	ld.ub	r8,r8[0x2]
800002f4:	f0 09 18 00 	cp.b	r9,r8
800002f8:	e0 88 00 09 	brls	8000030a <ROSA_semaphoreUnlock+0xda>
		{
			temp->effective_priority = handle->ceiling; 
800002fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000300:	11 a8       	ld.ub	r8,r8[0x2]
80000302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000306:	f3 68 00 65 	st.b	r9[101],r8
		}
		ROSA_tcbInstall(temp);
8000030a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000030e:	f0 1f 00 07 	mcall	80000328 <ROSA_semaphoreUnlock+0xf8>
		result = 0;
80000312:	30 08       	mov	r8,0
80000314:	ef 58 ff fa 	st.h	r7[-6],r8
		ROSA_yield();
80000318:	f0 1f 00 05 	mcall	8000032c <ROSA_semaphoreUnlock+0xfc>
	}
	return result;
8000031c:	ef 08 ff fa 	ld.sh	r8,r7[-6]

80000320:	10 9c       	mov	r12,r8
80000322:	2f dd       	sub	sp,-12
80000324:	e3 cd 80 80 	ldm	sp++,r7,pc
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	06 b4       	st.h	r3++,r4
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	0b ee       	ld.ub	lr,r5[0x6]

80000330 <usart_options>:
80000330:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
80000340:	00 00 00 00 74 73 6b 35 00 00 00 00                 ....tsk5....

8000034c <taskA>:
		//ROSA_yield();
	}
}

void taskA(void)
{
8000034c:	eb cd 40 80 	pushm	r7,lr
80000350:	1a 97       	mov	r7,sp
	while(1)
	{
		if (ROSA_semaphoreLock(S1)==0)
80000352:	49 08       	lddpc	r8,80000390 <taskA+0x44>
80000354:	70 08       	ld.w	r8,r8[0x0]
80000356:	10 9c       	mov	r12,r8
80000358:	f0 1f 00 0f 	mcall	80000394 <taskA+0x48>
8000035c:	18 98       	mov	r8,r12
8000035e:	58 08       	cp.w	r8,0
80000360:	c1 11       	brne	80000382 <taskA+0x36>
		{
			ledOn(LED0_GPIO);
80000362:	33 bc       	mov	r12,59
80000364:	f0 1f 00 0d 	mcall	80000398 <taskA+0x4c>
			ROSA_delay(1000);
80000368:	e0 6a 03 e8 	mov	r10,1000
8000036c:	30 0b       	mov	r11,0
8000036e:	f0 1f 00 0c 	mcall	8000039c <taskA+0x50>
			ledOff(LED0_GPIO);
80000372:	33 bc       	mov	r12,59
80000374:	f0 1f 00 0b 	mcall	800003a0 <taskA+0x54>
			ROSA_semaphoreUnlock(S1);
80000378:	48 68       	lddpc	r8,80000390 <taskA+0x44>
8000037a:	70 08       	ld.w	r8,r8[0x0]
8000037c:	10 9c       	mov	r12,r8
8000037e:	f0 1f 00 0a 	mcall	800003a4 <taskA+0x58>
			
		}
		ROSA_delay(2000);
80000382:	e0 6a 07 d0 	mov	r10,2000
80000386:	30 0b       	mov	r11,0
80000388:	f0 1f 00 05 	mcall	8000039c <taskA+0x50>
		
		
	}
8000038c:	ce 3b       	rjmp	80000352 <taskA+0x6>
8000038e:	00 00       	add	r0,r0
80000390:	00 00       	add	r0,r0
80000392:	05 64       	ld.uh	r4,--r2
80000394:	80 00       	ld.sh	r0,r0[0x0]
80000396:	00 dc       	st.w	--r0,r12
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	0f d0       	ld.ub	r0,r7[0x5]
8000039c:	80 00       	ld.sh	r0,r0[0x0]
8000039e:	0a bc       	st.h	r5++,r12
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	0f f0       	ld.ub	r0,r7[0x7]
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	02 30       	cp.w	r0,r1

800003a8 <taskB>:
}

void taskB(void)
{
800003a8:	eb cd 40 80 	pushm	r7,lr
800003ac:	1a 97       	mov	r7,sp
	ROSA_delay(10);
800003ae:	30 aa       	mov	r10,10
800003b0:	30 0b       	mov	r11,0
800003b2:	f0 1f 00 11 	mcall	800003f4 <taskB+0x4c>
	while(1)
	{
		if (ROSA_semaphoreLock(S1)==0)
800003b6:	49 18       	lddpc	r8,800003f8 <taskB+0x50>
800003b8:	70 08       	ld.w	r8,r8[0x0]
800003ba:	10 9c       	mov	r12,r8
800003bc:	f0 1f 00 10 	mcall	800003fc <taskB+0x54>
800003c0:	18 98       	mov	r8,r12
800003c2:	58 08       	cp.w	r8,0
800003c4:	c1 11       	brne	800003e6 <taskB+0x3e>
		{
			ledOn(LED1_GPIO);
800003c6:	33 cc       	mov	r12,60
800003c8:	f0 1f 00 0e 	mcall	80000400 <taskB+0x58>
			ROSA_delay(2000);
800003cc:	e0 6a 07 d0 	mov	r10,2000
800003d0:	30 0b       	mov	r11,0
800003d2:	f0 1f 00 09 	mcall	800003f4 <taskB+0x4c>
			ledOff(LED1_GPIO);
800003d6:	33 cc       	mov	r12,60
800003d8:	f0 1f 00 0b 	mcall	80000404 <taskB+0x5c>
			ROSA_semaphoreUnlock(S1);
800003dc:	48 78       	lddpc	r8,800003f8 <taskB+0x50>
800003de:	70 08       	ld.w	r8,r8[0x0]
800003e0:	10 9c       	mov	r12,r8
800003e2:	f0 1f 00 0a 	mcall	80000408 <taskB+0x60>
		}
		ROSA_delay(2000);
800003e6:	e0 6a 07 d0 	mov	r10,2000
800003ea:	30 0b       	mov	r11,0
800003ec:	f0 1f 00 02 	mcall	800003f4 <taskB+0x4c>
	}
800003f0:	ce 3b       	rjmp	800003b6 <taskB+0xe>
800003f2:	00 00       	add	r0,r0
800003f4:	80 00       	ld.sh	r0,r0[0x0]
800003f6:	0a bc       	st.h	r5++,r12
800003f8:	00 00       	add	r0,r0
800003fa:	05 64       	ld.uh	r4,--r2
800003fc:	80 00       	ld.sh	r0,r0[0x0]
800003fe:	00 dc       	st.w	--r0,r12
80000400:	80 00       	ld.sh	r0,r0[0x0]
80000402:	0f d0       	ld.ub	r0,r7[0x5]
80000404:	80 00       	ld.sh	r0,r0[0x0]
80000406:	0f f0       	ld.ub	r0,r7[0x7]
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	02 30       	cp.w	r0,r1

8000040c <taskC>:
}

void taskC(void)
{
8000040c:	eb cd 40 80 	pushm	r7,lr
80000410:	1a 97       	mov	r7,sp
	ROSA_delay(20);
80000412:	31 4a       	mov	r10,20
80000414:	30 0b       	mov	r11,0
80000416:	f0 1f 00 11 	mcall	80000458 <taskC+0x4c>
	while(1)
	{
		if (ROSA_semaphoreLock(S1)==0)
8000041a:	49 18       	lddpc	r8,8000045c <taskC+0x50>
8000041c:	70 08       	ld.w	r8,r8[0x0]
8000041e:	10 9c       	mov	r12,r8
80000420:	f0 1f 00 10 	mcall	80000460 <taskC+0x54>
80000424:	18 98       	mov	r8,r12
80000426:	58 08       	cp.w	r8,0
80000428:	c1 11       	brne	8000044a <taskC+0x3e>
		{
			ledOn(LED2_GPIO);
8000042a:	33 dc       	mov	r12,61
8000042c:	f0 1f 00 0e 	mcall	80000464 <taskC+0x58>
			ROSA_delay(2000);
80000430:	e0 6a 07 d0 	mov	r10,2000
80000434:	30 0b       	mov	r11,0
80000436:	f0 1f 00 09 	mcall	80000458 <taskC+0x4c>
			ledOff(LED2_GPIO);
8000043a:	33 dc       	mov	r12,61
8000043c:	f0 1f 00 0b 	mcall	80000468 <taskC+0x5c>
			ROSA_semaphoreUnlock(S1);
80000440:	48 78       	lddpc	r8,8000045c <taskC+0x50>
80000442:	70 08       	ld.w	r8,r8[0x0]
80000444:	10 9c       	mov	r12,r8
80000446:	f0 1f 00 0a 	mcall	8000046c <taskC+0x60>
		}
		ROSA_delay(2000);
8000044a:	e0 6a 07 d0 	mov	r10,2000
8000044e:	30 0b       	mov	r11,0
80000450:	f0 1f 00 02 	mcall	80000458 <taskC+0x4c>
	}
80000454:	ce 3b       	rjmp	8000041a <taskC+0xe>
80000456:	00 00       	add	r0,r0
80000458:	80 00       	ld.sh	r0,r0[0x0]
8000045a:	0a bc       	st.h	r5++,r12
8000045c:	00 00       	add	r0,r0
8000045e:	05 64       	ld.uh	r4,--r2
80000460:	80 00       	ld.sh	r0,r0[0x0]
80000462:	00 dc       	st.w	--r0,r12
80000464:	80 00       	ld.sh	r0,r0[0x0]
80000466:	0f d0       	ld.ub	r0,r7[0x5]
80000468:	80 00       	ld.sh	r0,r0[0x0]
8000046a:	0f f0       	ld.ub	r0,r7[0x7]
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	02 30       	cp.w	r0,r1

80000470 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000470:	eb cd 40 80 	pushm	r7,lr
80000474:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000476:	f0 1f 00 10 	mcall	800004b4 <main+0x44>
	ROSA_semaphoreCreate(&S1,1);
8000047a:	30 1b       	mov	r11,1
8000047c:	48 fc       	lddpc	r12,800004b8 <main+0x48>
8000047e:	f0 1f 00 10 	mcall	800004bc <main+0x4c>

	//ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 5);
	//ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
	//ROSA_taskCreate(& task3_handle, "tsk3", task3, 0x40, 1);
	//ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 1);
	ROSA_taskCreate(& task5_handle, "tsk5", taskA, 0x40, 3);
80000482:	30 38       	mov	r8,3
80000484:	34 09       	mov	r9,64
80000486:	48 fa       	lddpc	r10,800004c0 <main+0x50>
80000488:	48 fb       	lddpc	r11,800004c4 <main+0x54>
8000048a:	49 0c       	lddpc	r12,800004c8 <main+0x58>
8000048c:	f0 1f 00 10 	mcall	800004cc <main+0x5c>
	ROSA_taskCreate(& task2_handle, "tsk5", taskB, 0x40, 2);
80000490:	30 28       	mov	r8,2
80000492:	34 09       	mov	r9,64
80000494:	48 fa       	lddpc	r10,800004d0 <main+0x60>
80000496:	48 cb       	lddpc	r11,800004c4 <main+0x54>
80000498:	48 fc       	lddpc	r12,800004d4 <main+0x64>
8000049a:	f0 1f 00 0d 	mcall	800004cc <main+0x5c>
	ROSA_taskCreate(& task4_handle, "tsk5", taskC, 0x40, 1);
8000049e:	30 18       	mov	r8,1
800004a0:	34 09       	mov	r9,64
800004a2:	48 ea       	lddpc	r10,800004d8 <main+0x68>
800004a4:	48 8b       	lddpc	r11,800004c4 <main+0x54>
800004a6:	48 ec       	lddpc	r12,800004dc <main+0x6c>
800004a8:	f0 1f 00 09 	mcall	800004cc <main+0x5c>
	
	//Start the ROSA kernel
	ROSA_start();
800004ac:	f0 1f 00 0d 	mcall	800004e0 <main+0x70>
	/* Execution will never return here */
	while(1);
800004b0:	c0 08       	rjmp	800004b0 <main+0x40>
800004b2:	00 00       	add	r0,r0
800004b4:	80 00       	ld.sh	r0,r0[0x0]
800004b6:	05 50       	ld.sh	r0,--r2
800004b8:	00 00       	add	r0,r0
800004ba:	05 64       	ld.uh	r4,--r2
800004bc:	80 00       	ld.sh	r0,r0[0x0]
800004be:	00 70       	tst	r0,r0
800004c0:	80 00       	ld.sh	r0,r0[0x0]
800004c2:	03 4c       	ld.w	r12,--r1
800004c4:	80 00       	ld.sh	r0,r0[0x0]
800004c6:	03 44       	ld.w	r4,--r1
800004c8:	00 00       	add	r0,r0
800004ca:	05 74       	ld.ub	r4,--r2
800004cc:	80 00       	ld.sh	r0,r0[0x0]
800004ce:	09 f4       	ld.ub	r4,r4[0x7]
800004d0:	80 00       	ld.sh	r0,r0[0x0]
800004d2:	03 a8       	ld.ub	r8,r1[0x2]
800004d4:	00 00       	add	r0,r0
800004d6:	05 68       	ld.uh	r8,--r2
800004d8:	80 00       	ld.sh	r0,r0[0x0]
800004da:	04 0c       	add	r12,r2
800004dc:	00 00       	add	r0,r0
800004de:	05 7c       	ld.ub	r12,--r2
800004e0:	80 00       	ld.sh	r0,r0[0x0]
800004e2:	0b 2c       	ld.uh	r12,r5++

800004e4 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800004e4:	eb cd 40 80 	pushm	r7,lr
800004e8:	1a 97       	mov	r7,sp
	interruptDisable();
800004ea:	f0 1f 00 0d 	mcall	8000051c <ROSA_yieldFromISR+0x38>
	contextSaveFromISR();	  //Save the task context
800004ee:	f0 1f 00 0d 	mcall	80000520 <ROSA_yieldFromISR+0x3c>
	system_ticks ++;
800004f2:	48 d8       	lddpc	r8,80000524 <ROSA_yieldFromISR+0x40>
800004f4:	f0 ea 00 00 	ld.d	r10,r8[0]
800004f8:	30 18       	mov	r8,1
800004fa:	30 09       	mov	r9,0
800004fc:	f4 08 00 08 	add	r8,r10,r8
80000500:	f6 09 00 49 	adc	r9,r11,r9
80000504:	48 8a       	lddpc	r10,80000524 <ROSA_yieldFromISR+0x40>
80000506:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
8000050a:	f0 1f 00 08 	mcall	80000528 <ROSA_yieldFromISR+0x44>
	contextRestoreFromISR();  //...and switch over to it.
8000050e:	f0 1f 00 08 	mcall	8000052c <ROSA_yieldFromISR+0x48>
	interruptEnable();
80000512:	f0 1f 00 08 	mcall	80000530 <ROSA_yieldFromISR+0x4c>
}
80000516:	e3 cd 80 80 	ldm	sp++,r7,pc
8000051a:	00 00       	add	r0,r0
8000051c:	80 00       	ld.sh	r0,r0[0x0]
8000051e:	1d 66       	ld.uh	r6,--lr
80000520:	80 00       	ld.sh	r0,r0[0x0]
80000522:	1d 7e       	ld.ub	lr,--lr
80000524:	00 00       	add	r0,r0
80000526:	05 6c       	ld.uh	r12,--r2
80000528:	80 00       	ld.sh	r0,r0[0x0]
8000052a:	0c 0c       	add	r12,r6
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	1d b8       	ld.ub	r8,lr[0x3]
80000530:	80 00       	ld.sh	r0,r0[0x0]
80000532:	1d 6a       	ld.uh	r10,--lr

80000534 <usart_options>:
80000534:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000544:	00 00 00 00                                         ....

80000548 <IDLE_TASK>:
int endCritical=1;

//Idle task creation
ROSA_taskHandle_t idle_task_handle;
void IDLE_TASK (void)
{
80000548:	eb cd 40 80 	pushm	r7,lr
8000054c:	1a 97       	mov	r7,sp
	while(1);
8000054e:	c0 08       	rjmp	8000054e <IDLE_TASK+0x6>

80000550 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000550:	eb cd 40 80 	pushm	r7,lr
80000554:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000556:	f0 1f 00 17 	mcall	800005b0 <ROSA_init+0x60>
	buttonInit();								//Buttons
8000055a:	f0 1f 00 17 	mcall	800005b4 <ROSA_init+0x64>
	joystickInit();								//Joystick
8000055e:	f0 1f 00 17 	mcall	800005b8 <ROSA_init+0x68>
	potInit();									//Potentiometer
80000562:	f0 1f 00 17 	mcall	800005bc <ROSA_init+0x6c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000566:	e0 6a 1b 00 	mov	r10,6912
8000056a:	ea 1a 00 b7 	orh	r10,0xb7
8000056e:	49 5b       	lddpc	r11,800005c0 <ROSA_init+0x70>
80000570:	fe 7c 14 00 	mov	r12,-60416
80000574:	f0 1f 00 14 	mcall	800005c4 <ROSA_init+0x74>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000578:	49 48       	lddpc	r8,800005c8 <ROSA_init+0x78>
8000057a:	30 09       	mov	r9,0
8000057c:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000057e:	49 48       	lddpc	r8,800005cc <ROSA_init+0x7c>
80000580:	30 09       	mov	r9,0
80000582:	91 09       	st.w	r8[0x0],r9
	
	ROSA_taskCreate(& idle_task_handle, "idle", IDLE_TASK, 0x40, 255);
80000584:	e0 68 00 ff 	mov	r8,255
80000588:	34 09       	mov	r9,64
8000058a:	49 2a       	lddpc	r10,800005d0 <ROSA_init+0x80>
8000058c:	49 2b       	lddpc	r11,800005d4 <ROSA_init+0x84>
8000058e:	49 3c       	lddpc	r12,800005d8 <ROSA_init+0x88>
80000590:	f0 1f 00 13 	mcall	800005dc <ROSA_init+0x8c>

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
80000594:	f0 1f 00 13 	mcall	800005e0 <ROSA_init+0x90>
	system_ticks = 0;
80000598:	49 3a       	lddpc	r10,800005e4 <ROSA_init+0x94>
8000059a:	30 08       	mov	r8,0
8000059c:	30 09       	mov	r9,0
8000059e:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(1);
800005a2:	30 1c       	mov	r12,1
800005a4:	f0 1f 00 11 	mcall	800005e8 <ROSA_init+0x98>
	timerStart();
800005a8:	f0 1f 00 11 	mcall	800005ec <ROSA_init+0x9c>
	//...
}
800005ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800005b0:	80 00       	ld.sh	r0,r0[0x0]
800005b2:	0f 44       	ld.w	r4,--r7
800005b4:	80 00       	ld.sh	r0,r0[0x0]
800005b6:	0d 9c       	ld.ub	r12,r6[0x1]
800005b8:	80 00       	ld.sh	r0,r0[0x0]
800005ba:	0d c4       	ld.ub	r4,r6[0x4]
800005bc:	80 00       	ld.sh	r0,r0[0x0]
800005be:	10 10       	sub	r0,r8
800005c0:	80 00       	ld.sh	r0,r0[0x0]
800005c2:	05 34       	ld.ub	r4,r2++
800005c4:	80 00       	ld.sh	r0,r0[0x0]
800005c6:	11 c4       	ld.ub	r4,r8[0x4]
800005c8:	00 00       	add	r0,r0
800005ca:	05 50       	ld.sh	r0,--r2
800005cc:	00 00       	add	r0,r0
800005ce:	05 84       	ld.ub	r4,r2[0x0]
800005d0:	80 00       	ld.sh	r0,r0[0x0]
800005d2:	05 48       	ld.w	r8,--r2
800005d4:	80 00       	ld.sh	r0,r0[0x0]
800005d6:	05 40       	ld.w	r0,--r2
800005d8:	00 00       	add	r0,r0
800005da:	05 80       	ld.ub	r0,r2[0x0]
800005dc:	80 00       	ld.sh	r0,r0[0x0]
800005de:	09 f4       	ld.ub	r4,r4[0x7]
800005e0:	80 00       	ld.sh	r0,r0[0x0]
800005e2:	1d 48       	ld.w	r8,--lr
800005e4:	00 00       	add	r0,r0
800005e6:	05 6c       	ld.uh	r12,--r2
800005e8:	80 00       	ld.sh	r0,r0[0x0]
800005ea:	12 e8       	st.h	--r9,r8
800005ec:	80 00       	ld.sh	r0,r0[0x0]
800005ee:	13 16       	ld.sh	r6,r9++

800005f0 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800005f0:	eb cd 40 80 	pushm	r7,lr
800005f4:	1a 97       	mov	r7,sp
800005f6:	20 6d       	sub	sp,24
800005f8:	ef 4c ff f8 	st.w	r7[-8],r12
800005fc:	ef 4b ff f4 	st.w	r7[-12],r11
80000600:	ef 4a ff f0 	st.w	r7[-16],r10
80000604:	ef 49 ff ec 	st.w	r7[-20],r9
80000608:	ef 48 ff e8 	st.w	r7[-24],r8
	interruptDisable();
8000060c:	f0 1f 00 27 	mcall	800006a8 <ROSA_tcbCreate+0xb8>
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000610:	30 08       	mov	r8,0
80000612:	ef 48 ff fc 	st.w	r7[-4],r8
80000616:	c1 48       	rjmp	8000063e <ROSA_tcbCreate+0x4e>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000618:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000061c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000620:	ee fa ff f4 	ld.w	r10,r7[-12]
80000624:	f4 08 00 08 	add	r8,r10,r8
80000628:	11 88       	ld.ub	r8,r8[0x0]
8000062a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000062e:	f4 09 00 09 	add	r9,r10,r9
80000632:	b2 c8       	st.b	r9[0x4],r8
{
	interruptDisable();
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000638:	2f f8       	sub	r8,-1
8000063a:	ef 48 ff fc 	st.w	r7[-4],r8
8000063e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000642:	58 38       	cp.w	r8,3
80000644:	fe 9a ff ea 	brle	80000618 <ROSA_tcbCreate+0x28>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000064c:	30 09       	mov	r9,0
8000064e:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000650:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000658:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000065a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000065e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000662:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000668:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000066c:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000066e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000672:	a3 68       	lsl	r8,0x2
80000674:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000678:	10 09       	add	r9,r8
8000067a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000067e:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000680:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000684:	70 39       	ld.w	r9,r8[0xc]
80000686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000068a:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
8000068c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000690:	fc 19 00 1c 	movh	r9,0x1c
80000694:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000696:	ee fc ff f8 	ld.w	r12,r7[-8]
8000069a:	f0 1f 00 05 	mcall	800006ac <ROSA_tcbCreate+0xbc>
	interruptEnable();
8000069e:	f0 1f 00 05 	mcall	800006b0 <ROSA_tcbCreate+0xc0>
}
800006a2:	2f ad       	sub	sp,-24
800006a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800006a8:	80 00       	ld.sh	r0,r0[0x0]
800006aa:	1d 66       	ld.uh	r6,--lr
800006ac:	80 00       	ld.sh	r0,r0[0x0]
800006ae:	0b 62       	ld.uh	r2,--r5
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	1d 6a       	ld.uh	r10,--lr

800006b4 <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
800006b4:	eb cd 40 80 	pushm	r7,lr
800006b8:	1a 97       	mov	r7,sp
800006ba:	20 2d       	sub	sp,8
800006bc:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
800006c0:	f0 1f 00 35 	mcall	80000794 <ROSA_tcbInstall+0xe0>
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
800006c4:	4b 58       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
800006c6:	70 08       	ld.w	r8,r8[0x0]
800006c8:	58 08       	cp.w	r8,0
800006ca:	c1 51       	brne	800006f4 <ROSA_tcbInstall+0x40>
	{
		TCBLIST = tcbTask;
800006cc:	4b 38       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
800006ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006d2:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
800006d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006dc:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
800006de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006e6:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
800006ea:	4a d8       	lddpc	r8,8000079c <ROSA_tcbInstall+0xe8>
800006ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006f0:	91 09       	st.w	r8[0x0],r9
800006f2:	c4 b8       	rjmp	80000788 <ROSA_tcbInstall+0xd4>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
800006f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006f8:	f1 39 00 65 	ld.ub	r9,r8[101]
800006fc:	4a 78       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
800006fe:	70 08       	ld.w	r8,r8[0x0]
80000700:	f1 38 00 65 	ld.ub	r8,r8[101]
80000704:	f0 09 18 00 	cp.b	r9,r8
80000708:	c0 d2       	brcc	80000722 <ROSA_tcbInstall+0x6e>
	{
		insert_after(TCBLIST_end, tcbTask);
8000070a:	4a 58       	lddpc	r8,8000079c <ROSA_tcbInstall+0xe8>
8000070c:	70 08       	ld.w	r8,r8[0x0]
8000070e:	ee fb ff f8 	ld.w	r11,r7[-8]
80000712:	10 9c       	mov	r12,r8
80000714:	f0 1f 00 23 	mcall	800007a0 <ROSA_tcbInstall+0xec>
		TCBLIST = tcbTask;
80000718:	4a 08       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
8000071a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000071e:	91 09       	st.w	r8[0x0],r9
80000720:	c3 48       	rjmp	80000788 <ROSA_tcbInstall+0xd4>
	}
	else
	{
		tcb * iterator = TCBLIST;
80000722:	49 e8       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
80000724:	70 08       	ld.w	r8,r8[0x0]
80000726:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
8000072a:	c0 68       	rjmp	80000736 <ROSA_tcbInstall+0x82>
		{
			iterator = iterator->nexttcb;
8000072c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000730:	70 08       	ld.w	r8,r8[0x0]
80000732:	ef 48 ff fc 	st.w	r7[-4],r8
		TCBLIST = tcbTask;
	}
	else
	{
		tcb * iterator = TCBLIST;
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
80000736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000073a:	58 08       	cp.w	r8,0
8000073c:	c1 30       	breq	80000762 <ROSA_tcbInstall+0xae>
8000073e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000742:	f1 39 00 65 	ld.ub	r9,r8[101]
80000746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000074a:	f1 38 00 65 	ld.ub	r8,r8[101]
8000074e:	f0 09 18 00 	cp.b	r9,r8
80000752:	e0 8b 00 08 	brhi	80000762 <ROSA_tcbInstall+0xae>
80000756:	49 28       	lddpc	r8,8000079c <ROSA_tcbInstall+0xe8>
80000758:	70 08       	ld.w	r8,r8[0x0]
8000075a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000075e:	10 39       	cp.w	r9,r8
80000760:	ce 61       	brne	8000072c <ROSA_tcbInstall+0x78>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
80000762:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000766:	71 c8       	ld.w	r8,r8[0x70]
80000768:	ee fb ff f8 	ld.w	r11,r7[-8]
8000076c:	10 9c       	mov	r12,r8
8000076e:	f0 1f 00 0d 	mcall	800007a0 <ROSA_tcbInstall+0xec>
		//insert_by_priority(TCBLIST, tcbTask);
		if(TCBLIST->prevtcb == tcbTask)
80000772:	48 a8       	lddpc	r8,80000798 <ROSA_tcbInstall+0xe4>
80000774:	70 08       	ld.w	r8,r8[0x0]
80000776:	71 c9       	ld.w	r9,r8[0x70]
80000778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000077c:	10 39       	cp.w	r9,r8
8000077e:	c0 51       	brne	80000788 <ROSA_tcbInstall+0xd4>
		{
			TCBLIST_end = tcbTask;
80000780:	48 78       	lddpc	r8,8000079c <ROSA_tcbInstall+0xe8>
80000782:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000786:	91 09       	st.w	r8[0x0],r9
		}		
	}
	interruptEnable();
80000788:	f0 1f 00 07 	mcall	800007a4 <ROSA_tcbInstall+0xf0>
}
8000078c:	2f ed       	sub	sp,-8
8000078e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000792:	00 00       	add	r0,r0
80000794:	80 00       	ld.sh	r0,r0[0x0]
80000796:	1d 66       	ld.uh	r6,--lr
80000798:	00 00       	add	r0,r0
8000079a:	05 50       	ld.sh	r0,--r2
8000079c:	00 00       	add	r0,r0
8000079e:	05 58       	ld.sh	r8,--r2
800007a0:	80 00       	ld.sh	r0,r0[0x0]
800007a2:	00 08       	add	r8,r0
800007a4:	80 00       	ld.sh	r0,r0[0x0]
800007a6:	1d 6a       	ld.uh	r10,--lr

800007a8 <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
800007a8:	eb cd 40 80 	pushm	r7,lr
800007ac:	1a 97       	mov	r7,sp
800007ae:	20 1d       	sub	sp,4
800007b0:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
800007b4:	f0 1f 00 24 	mcall	80000844 <ROSA_tcbUninstall+0x9c>
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
800007b8:	4a 48       	lddpc	r8,80000848 <ROSA_tcbUninstall+0xa0>
800007ba:	70 09       	ld.w	r9,r8[0x0]
800007bc:	4a 48       	lddpc	r8,8000084c <ROSA_tcbUninstall+0xa4>
800007be:	70 08       	ld.w	r8,r8[0x0]
800007c0:	10 39       	cp.w	r9,r8
800007c2:	c0 81       	brne	800007d2 <ROSA_tcbUninstall+0x2a>
	{
		TCBLIST = NULL;
800007c4:	4a 18       	lddpc	r8,80000848 <ROSA_tcbUninstall+0xa0>
800007c6:	30 09       	mov	r9,0
800007c8:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
800007ca:	4a 18       	lddpc	r8,8000084c <ROSA_tcbUninstall+0xa4>
800007cc:	30 09       	mov	r9,0
800007ce:	91 09       	st.w	r8[0x0],r9
800007d0:	c3 08       	rjmp	80000830 <ROSA_tcbUninstall+0x88>
	}
	else 
	{
		if(TCBLIST_end == tcbTask)
800007d2:	49 f8       	lddpc	r8,8000084c <ROSA_tcbUninstall+0xa4>
800007d4:	70 09       	ld.w	r9,r8[0x0]
800007d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007da:	10 39       	cp.w	r9,r8
800007dc:	c0 71       	brne	800007ea <ROSA_tcbUninstall+0x42>
		{
			TCBLIST_end = tcbTask->prevtcb;
800007de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e2:	71 c9       	ld.w	r9,r8[0x70]
800007e4:	49 a8       	lddpc	r8,8000084c <ROSA_tcbUninstall+0xa4>
800007e6:	91 09       	st.w	r8[0x0],r9
800007e8:	c0 c8       	rjmp	80000800 <ROSA_tcbUninstall+0x58>
		}
		else if(TCBLIST == tcbTask)
800007ea:	49 88       	lddpc	r8,80000848 <ROSA_tcbUninstall+0xa0>
800007ec:	70 09       	ld.w	r9,r8[0x0]
800007ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007f2:	10 39       	cp.w	r9,r8
800007f4:	c0 61       	brne	80000800 <ROSA_tcbUninstall+0x58>
		{
			TCBLIST = tcbTask->nexttcb;
800007f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007fa:	70 09       	ld.w	r9,r8[0x0]
800007fc:	49 38       	lddpc	r8,80000848 <ROSA_tcbUninstall+0xa0>
800007fe:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000804:	71 c8       	ld.w	r8,r8[0x70]
80000806:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000080a:	72 09       	ld.w	r9,r9[0x0]
8000080c:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
8000080e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000812:	70 08       	ld.w	r8,r8[0x0]
80000814:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000818:	73 c9       	ld.w	r9,r9[0x70]
8000081a:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
8000081e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000822:	30 09       	mov	r9,0
80000824:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
80000826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000082a:	30 09       	mov	r9,0
8000082c:	f1 49 00 70 	st.w	r8[112],r9
	}
	if (endCritical)
80000830:	48 88       	lddpc	r8,80000850 <ROSA_tcbUninstall+0xa8>
80000832:	70 08       	ld.w	r8,r8[0x0]
80000834:	58 08       	cp.w	r8,0
80000836:	c0 30       	breq	8000083c <ROSA_tcbUninstall+0x94>
		interruptEnable();
80000838:	f0 1f 00 07 	mcall	80000854 <ROSA_tcbUninstall+0xac>
}
8000083c:	2f fd       	sub	sp,-4
8000083e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000842:	00 00       	add	r0,r0
80000844:	80 00       	ld.sh	r0,r0[0x0]
80000846:	1d 66       	ld.uh	r6,--lr
80000848:	00 00       	add	r0,r0
8000084a:	05 50       	ld.sh	r0,--r2
8000084c:	00 00       	add	r0,r0
8000084e:	05 58       	ld.sh	r8,--r2
80000850:	00 00       	add	r0,r0
80000852:	00 08       	add	r8,r0
80000854:	80 00       	ld.sh	r0,r0[0x0]
80000856:	1d 6a       	ld.uh	r10,--lr

80000858 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
80000858:	eb cd 40 80 	pushm	r7,lr
8000085c:	1a 97       	mov	r7,sp
8000085e:	20 2d       	sub	sp,8
80000860:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000864:	f0 1f 00 36 	mcall	8000093c <ROSA_tcbSuspend+0xe4>
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
80000868:	4b 68       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
8000086a:	70 08       	ld.w	r8,r8[0x0]
8000086c:	58 08       	cp.w	r8,0
8000086e:	c1 51       	brne	80000898 <ROSA_tcbSuspend+0x40>
	{
		SUSPENDEDLIST = tcbTask;
80000870:	4b 48       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
80000872:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000876:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000087c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000880:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
80000882:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000886:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000088a:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
8000088e:	4a e8       	lddpc	r8,80000944 <ROSA_tcbSuspend+0xec>
80000890:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000894:	91 09       	st.w	r8[0x0],r9
80000896:	c4 d8       	rjmp	80000930 <ROSA_tcbSuspend+0xd8>
	}
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
80000898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000089c:	f0 ea 00 68 	ld.d	r10,r8[104]
800008a0:	4a 88       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
800008a2:	70 08       	ld.w	r8,r8[0x0]
800008a4:	f0 e8 00 68 	ld.d	r8,r8[104]
800008a8:	10 3a       	cp.w	r10,r8
800008aa:	f2 0b 13 00 	cpc	r11,r9
800008ae:	c0 d2       	brcc	800008c8 <ROSA_tcbSuspend+0x70>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
800008b0:	4a 58       	lddpc	r8,80000944 <ROSA_tcbSuspend+0xec>
800008b2:	70 08       	ld.w	r8,r8[0x0]
800008b4:	ee fb ff f8 	ld.w	r11,r7[-8]
800008b8:	10 9c       	mov	r12,r8
800008ba:	f0 1f 00 24 	mcall	80000948 <ROSA_tcbSuspend+0xf0>
		SUSPENDEDLIST = tcbTask;
800008be:	4a 18       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
800008c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008c4:	91 09       	st.w	r8[0x0],r9
800008c6:	c3 58       	rjmp	80000930 <ROSA_tcbSuspend+0xd8>
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
800008c8:	49 e8       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
800008ca:	70 08       	ld.w	r8,r8[0x0]
800008cc:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
800008d0:	c0 68       	rjmp	800008dc <ROSA_tcbSuspend+0x84>
		{
			iterator = iterator->nexttcb;
800008d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008d6:	70 08       	ld.w	r8,r8[0x0]
800008d8:	ef 48 ff fc 	st.w	r7[-4],r8
		SUSPENDEDLIST = tcbTask;
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
800008dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008e0:	58 08       	cp.w	r8,0
800008e2:	c1 40       	breq	8000090a <ROSA_tcbSuspend+0xb2>
800008e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008e8:	f0 ea 00 68 	ld.d	r10,r8[104]
800008ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008f0:	f0 e8 00 68 	ld.d	r8,r8[104]
800008f4:	10 3a       	cp.w	r10,r8
800008f6:	f2 0b 13 00 	cpc	r11,r9
800008fa:	e0 8b 00 08 	brhi	8000090a <ROSA_tcbSuspend+0xb2>
800008fe:	49 28       	lddpc	r8,80000944 <ROSA_tcbSuspend+0xec>
80000900:	70 08       	ld.w	r8,r8[0x0]
80000902:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000906:	10 39       	cp.w	r9,r8
80000908:	ce 51       	brne	800008d2 <ROSA_tcbSuspend+0x7a>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
8000090a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000090e:	71 c8       	ld.w	r8,r8[0x70]
80000910:	ee fb ff f8 	ld.w	r11,r7[-8]
80000914:	10 9c       	mov	r12,r8
80000916:	f0 1f 00 0d 	mcall	80000948 <ROSA_tcbSuspend+0xf0>
		//insert_by_back_online_time(SUSPENDEDLIST, tcbTask);
		if(SUSPENDEDLIST->prevtcb == tcbTask)
8000091a:	48 a8       	lddpc	r8,80000940 <ROSA_tcbSuspend+0xe8>
8000091c:	70 08       	ld.w	r8,r8[0x0]
8000091e:	71 c9       	ld.w	r9,r8[0x70]
80000920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000924:	10 39       	cp.w	r9,r8
80000926:	c0 51       	brne	80000930 <ROSA_tcbSuspend+0xd8>
		{
			SUSPENDEDLIST_end = tcbTask;
80000928:	48 78       	lddpc	r8,80000944 <ROSA_tcbSuspend+0xec>
8000092a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000092e:	91 09       	st.w	r8[0x0],r9
		}
	}
	interruptEnable();
80000930:	f0 1f 00 07 	mcall	8000094c <ROSA_tcbSuspend+0xf4>
}
80000934:	2f ed       	sub	sp,-8
80000936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000093a:	00 00       	add	r0,r0
8000093c:	80 00       	ld.sh	r0,r0[0x0]
8000093e:	1d 66       	ld.uh	r6,--lr
80000940:	00 00       	add	r0,r0
80000942:	05 54       	ld.sh	r4,--r2
80000944:	00 00       	add	r0,r0
80000946:	05 5c       	ld.sh	r12,--r2
80000948:	80 00       	ld.sh	r0,r0[0x0]
8000094a:	00 08       	add	r8,r0
8000094c:	80 00       	ld.sh	r0,r0[0x0]
8000094e:	1d 6a       	ld.uh	r10,--lr

80000950 <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
80000950:	eb cd 40 80 	pushm	r7,lr
80000954:	1a 97       	mov	r7,sp
80000956:	20 1d       	sub	sp,4
80000958:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
8000095c:	f0 1f 00 22 	mcall	800009e4 <ROSA_tcbUnsuspend+0x94>
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
80000960:	4a 28       	lddpc	r8,800009e8 <ROSA_tcbUnsuspend+0x98>
80000962:	70 09       	ld.w	r9,r8[0x0]
80000964:	4a 28       	lddpc	r8,800009ec <ROSA_tcbUnsuspend+0x9c>
80000966:	70 08       	ld.w	r8,r8[0x0]
80000968:	10 39       	cp.w	r9,r8
8000096a:	c0 81       	brne	8000097a <ROSA_tcbUnsuspend+0x2a>
	{
		SUSPENDEDLIST = NULL;
8000096c:	49 f8       	lddpc	r8,800009e8 <ROSA_tcbUnsuspend+0x98>
8000096e:	30 09       	mov	r9,0
80000970:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
80000972:	49 f8       	lddpc	r8,800009ec <ROSA_tcbUnsuspend+0x9c>
80000974:	30 09       	mov	r9,0
80000976:	91 09       	st.w	r8[0x0],r9
80000978:	c3 08       	rjmp	800009d8 <ROSA_tcbUnsuspend+0x88>
	}
	else
	{
		if(SUSPENDEDLIST == tcbTask)
8000097a:	49 c8       	lddpc	r8,800009e8 <ROSA_tcbUnsuspend+0x98>
8000097c:	70 09       	ld.w	r9,r8[0x0]
8000097e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000982:	10 39       	cp.w	r9,r8
80000984:	c0 71       	brne	80000992 <ROSA_tcbUnsuspend+0x42>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
80000986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000098a:	70 09       	ld.w	r9,r8[0x0]
8000098c:	49 78       	lddpc	r8,800009e8 <ROSA_tcbUnsuspend+0x98>
8000098e:	91 09       	st.w	r8[0x0],r9
80000990:	c0 c8       	rjmp	800009a8 <ROSA_tcbUnsuspend+0x58>
		}
		else if(SUSPENDEDLIST_end == tcbTask)
80000992:	49 78       	lddpc	r8,800009ec <ROSA_tcbUnsuspend+0x9c>
80000994:	70 09       	ld.w	r9,r8[0x0]
80000996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000099a:	10 39       	cp.w	r9,r8
8000099c:	c0 61       	brne	800009a8 <ROSA_tcbUnsuspend+0x58>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
8000099e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009a2:	71 c9       	ld.w	r9,r8[0x70]
800009a4:	49 28       	lddpc	r8,800009ec <ROSA_tcbUnsuspend+0x9c>
800009a6:	91 09       	st.w	r8[0x0],r9
		}
		
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
800009a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ac:	71 c8       	ld.w	r8,r8[0x70]
800009ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800009b2:	72 09       	ld.w	r9,r9[0x0]
800009b4:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
800009b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ba:	70 08       	ld.w	r8,r8[0x0]
800009bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800009c0:	73 c9       	ld.w	r9,r9[0x70]
800009c2:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
800009c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ca:	30 09       	mov	r9,0
800009cc:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
800009ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009d2:	30 09       	mov	r9,0
800009d4:	f1 49 00 70 	st.w	r8[112],r9
	}
	interruptEnable();
800009d8:	f0 1f 00 06 	mcall	800009f0 <ROSA_tcbUnsuspend+0xa0>
}
800009dc:	2f fd       	sub	sp,-4
800009de:	e3 cd 80 80 	ldm	sp++,r7,pc
800009e2:	00 00       	add	r0,r0
800009e4:	80 00       	ld.sh	r0,r0[0x0]
800009e6:	1d 66       	ld.uh	r6,--lr
800009e8:	00 00       	add	r0,r0
800009ea:	05 54       	ld.sh	r4,--r2
800009ec:	00 00       	add	r0,r0
800009ee:	05 5c       	ld.sh	r12,--r2
800009f0:	80 00       	ld.sh	r0,r0[0x0]
800009f2:	1d 6a       	ld.uh	r10,--lr

800009f4 <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
800009f4:	eb cd 40 80 	pushm	r7,lr
800009f8:	1a 97       	mov	r7,sp
800009fa:	20 7d       	sub	sp,28
800009fc:	ef 4c ff f4 	st.w	r7[-12],r12
80000a00:	ef 4b ff f0 	st.w	r7[-16],r11
80000a04:	ef 4a ff ec 	st.w	r7[-20],r10
80000a08:	ef 49 ff e8 	st.w	r7[-24],r9
80000a0c:	ef 68 ff e4 	st.b	r7[-28],r8
	interruptDisable();
80000a10:	f0 1f 00 26 	mcall	80000aa8 <ROSA_taskCreate+0xb4>
	int16_t result = -1;
80000a14:	3f f8       	mov	r8,-1
80000a16:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
80000a1a:	37 4b       	mov	r11,116
80000a1c:	30 1c       	mov	r12,1
80000a1e:	f0 1f 00 24 	mcall	80000aac <ROSA_taskCreate+0xb8>
80000a22:	18 98       	mov	r8,r12
80000a24:	10 99       	mov	r9,r8
80000a26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a2a:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
80000a2c:	30 4b       	mov	r11,4
80000a2e:	ee fc ff e8 	ld.w	r12,r7[-24]
80000a32:	f0 1f 00 1f 	mcall	80000aac <ROSA_taskCreate+0xb8>
80000a36:	18 98       	mov	r8,r12
80000a38:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
80000a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a40:	70 09       	ld.w	r9,r8[0x0]
80000a42:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000a46:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
80000a4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a4e:	70 09       	ld.w	r9,r8[0x0]
80000a50:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000a54:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
80000a58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a5c:	70 09       	ld.w	r9,r8[0x0]
80000a5e:	30 18       	mov	r8,1
80000a60:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
80000a64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a68:	70 0a       	ld.w	r10,r8[0x0]
80000a6a:	30 08       	mov	r8,0
80000a6c:	30 09       	mov	r9,0
80000a6e:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
80000a72:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000a76:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a7a:	72 0c       	ld.w	r12,r9[0x0]
80000a7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a80:	ee fa ff ec 	ld.w	r10,r7[-20]
80000a84:	ee fb ff f0 	ld.w	r11,r7[-16]
80000a88:	f0 1f 00 0a 	mcall	80000ab0 <ROSA_taskCreate+0xbc>
	ROSA_tcbInstall(*th);
80000a8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a90:	70 08       	ld.w	r8,r8[0x0]
80000a92:	10 9c       	mov	r12,r8
80000a94:	f0 1f 00 08 	mcall	80000ab4 <ROSA_taskCreate+0xc0>
	interruptEnable();
80000a98:	f0 1f 00 08 	mcall	80000ab8 <ROSA_taskCreate+0xc4>
	return result;
80000a9c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000aa0:	10 9c       	mov	r12,r8
80000aa2:	2f 9d       	sub	sp,-28
80000aa4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000aa8:	80 00       	ld.sh	r0,r0[0x0]
80000aaa:	1d 66       	ld.uh	r6,--lr
80000aac:	80 00       	ld.sh	r0,r0[0x0]
80000aae:	14 20       	rsub	r0,r10
80000ab0:	80 00       	ld.sh	r0,r0[0x0]
80000ab2:	05 f0       	ld.ub	r0,r2[0x7]
80000ab4:	80 00       	ld.sh	r0,r0[0x0]
80000ab6:	06 b4       	st.h	r3++,r4
80000ab8:	80 00       	ld.sh	r0,r0[0x0]
80000aba:	1d 6a       	ld.uh	r10,--lr

80000abc <ROSA_delay>:
	return result;
}


int16_t ROSA_delay(uint64_t ticks)
{
80000abc:	eb cd 40 c0 	pushm	r6-r7,lr
80000ac0:	1a 97       	mov	r7,sp
80000ac2:	20 2d       	sub	sp,8
80000ac4:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
80000ac8:	f0 1f 00 12 	mcall	80000b10 <ROSA_delay+0x54>
	ROSA_tcbUninstall(EXECTASK);
80000acc:	49 28       	lddpc	r8,80000b14 <ROSA_delay+0x58>
80000ace:	70 08       	ld.w	r8,r8[0x0]
80000ad0:	10 9c       	mov	r12,r8
80000ad2:	f0 1f 00 12 	mcall	80000b18 <ROSA_delay+0x5c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
80000ad6:	49 08       	lddpc	r8,80000b14 <ROSA_delay+0x58>
80000ad8:	70 06       	ld.w	r6,r8[0x0]
80000ada:	f0 1f 00 11 	mcall	80000b1c <ROSA_delay+0x60>
80000ade:	14 98       	mov	r8,r10
80000ae0:	16 99       	mov	r9,r11
80000ae2:	10 9a       	mov	r10,r8
80000ae4:	12 9b       	mov	r11,r9
80000ae6:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000aea:	f4 08 00 08 	add	r8,r10,r8
80000aee:	f6 09 00 49 	adc	r9,r11,r9
80000af2:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
80000af6:	48 88       	lddpc	r8,80000b14 <ROSA_delay+0x58>
80000af8:	70 08       	ld.w	r8,r8[0x0]
80000afa:	10 9c       	mov	r12,r8
80000afc:	f0 1f 00 09 	mcall	80000b20 <ROSA_delay+0x64>
	interruptEnable();
80000b00:	f0 1f 00 09 	mcall	80000b24 <ROSA_delay+0x68>
	ROSA_yield();
80000b04:	f0 1f 00 09 	mcall	80000b28 <ROSA_delay+0x6c>
}
80000b08:	2f ed       	sub	sp,-8
80000b0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000b0e:	00 00       	add	r0,r0
80000b10:	80 00       	ld.sh	r0,r0[0x0]
80000b12:	1d 66       	ld.uh	r6,--lr
80000b14:	00 00       	add	r0,r0
80000b16:	05 84       	ld.ub	r4,r2[0x0]
80000b18:	80 00       	ld.sh	r0,r0[0x0]
80000b1a:	07 a8       	ld.ub	r8,r3[0x2]
80000b1c:	80 00       	ld.sh	r0,r0[0x0]
80000b1e:	0d 84       	ld.ub	r4,r6[0x0]
80000b20:	80 00       	ld.sh	r0,r0[0x0]
80000b22:	08 58       	eor	r8,r4
80000b24:	80 00       	ld.sh	r0,r0[0x0]
80000b26:	1d 6a       	ld.uh	r10,--lr
80000b28:	80 00       	ld.sh	r0,r0[0x0]
80000b2a:	0b ee       	ld.ub	lr,r5[0x6]

80000b2c <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000b2c:	4b 5c       	lddpc	r12,80000c00 <_yield+0xa>
	lda.w r11,EXECTASK
80000b2e:	4b 6b       	lddpc	r11,80000c04 <_yield+0xe>
	ld.w r12,r12[0x0]
80000b30:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
80000b32:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000b34:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000b36:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000b38:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000b3c:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000b3e:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000b40:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000b42:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000b46:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000b48:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000b4a:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000b4c:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000b4e:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000b50:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000b52:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000b54:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000b56:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000b58:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000b5a:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000b5c:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000b5e:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000b60:	1c 9f       	mov	pc,lr

80000b62 <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000b62:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000b64:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000b66:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000b68:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000b6c:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000b70:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000b74:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000b78:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000b7c:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000b80:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000b84:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000b88:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000b8c:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000b8e:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000b90:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000b92:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000b94:	1c 9f       	mov	pc,lr

80000b96 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000b96:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000b98:	49 bc       	lddpc	r12,80000c04 <_yield+0xe>
	ld.w r12,r12[0x0]
80000b9a:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000b9c:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000b9e:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000ba0:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000ba2:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000ba4:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000ba6:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000ba8:	33 40       	mov	r0,52
	add r0,r12
80000baa:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000bac:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000bb0:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000bb2:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000bb4:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000bb8:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000bba:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000bbc:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000bbe:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000bc0:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000bc2:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000bc4:	1c 9f       	mov	pc,lr

80000bc6 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000bc6:	49 0c       	lddpc	r12,80000c04 <_yield+0xe>
	ld.w r12,r12[0x0]
80000bc8:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000bca:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000bcc:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000bce:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000bd2:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000bd4:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000bd6:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000bd8:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000bda:	33 40       	mov	r0,52
	add r0,r12
80000bdc:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000bde:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000be2:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000be4:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000be6:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000be8:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000bea:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000bec:	d6 13       	rets

80000bee <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000bee:	d4 01       	pushm	lr
	lda.w lr,_yield
80000bf0:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000bf4:	d7 33       	scall

80000bf6 <_yield>:
_yield:
	call contextSave
80000bf6:	cd 0f       	rcall	80000b96 <contextSave>
	call scheduler
80000bf8:	f0 1f 00 04 	mcall	80000c08 <_yield+0x12>
	call contextRestore
80000bfc:	ce 5f       	rcall	80000bc6 <contextRestore>
80000bfe:	00 00       	add	r0,r0
80000c00:	00 00       	add	r0,r0
80000c02:	05 50       	ld.sh	r0,--r2
80000c04:	00 00       	add	r0,r0
80000c06:	05 84       	ld.ub	r4,r2[0x0]
80000c08:	80 00       	ld.sh	r0,r0[0x0]
80000c0a:	0c 0c       	add	r12,r6

80000c0c <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000c0c:	eb cd 40 80 	pushm	r7,lr
80000c10:	1a 97       	mov	r7,sp
80000c12:	20 3d       	sub	sp,12
	interruptDisable();
80000c14:	f0 1f 00 19 	mcall	80000c78 <scheduler+0x6c>
	tcb * iterator = SUSPENDEDLIST;
80000c18:	49 98       	lddpc	r8,80000c7c <scheduler+0x70>
80000c1a:	70 08       	ld.w	r8,r8[0x0]
80000c1c:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
80000c20:	f0 1f 00 18 	mcall	80000c80 <scheduler+0x74>
80000c24:	14 98       	mov	r8,r10
80000c26:	16 99       	mov	r9,r11
80000c28:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000c2c:	c0 d8       	rjmp	80000c46 <scheduler+0x3a>
	{
		ROSA_tcbUnsuspend(iterator);
80000c2e:	ee fc ff f4 	ld.w	r12,r7[-12]
80000c32:	f0 1f 00 15 	mcall	80000c84 <scheduler+0x78>
		ROSA_tcbInstall(iterator);
80000c36:	ee fc ff f4 	ld.w	r12,r7[-12]
80000c3a:	f0 1f 00 14 	mcall	80000c88 <scheduler+0x7c>
		iterator = SUSPENDEDLIST;
80000c3e:	49 08       	lddpc	r8,80000c7c <scheduler+0x70>
80000c40:	70 08       	ld.w	r8,r8[0x0]
80000c42:	ef 48 ff f4 	st.w	r7[-12],r8
void scheduler(void)
{
	interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000c46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c4a:	58 08       	cp.w	r8,0
80000c4c:	c0 c0       	breq	80000c64 <scheduler+0x58>
80000c4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c52:	f0 ea 00 68 	ld.d	r10,r8[104]
80000c56:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000c5a:	10 3a       	cp.w	r10,r8
80000c5c:	f2 0b 13 00 	cpc	r11,r9
80000c60:	fe 98 ff e7 	brls	80000c2e <scheduler+0x22>
			//iterator = NULL;
		//}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	EXECTASK=TCBLIST;
80000c64:	48 a8       	lddpc	r8,80000c8c <scheduler+0x80>
80000c66:	70 09       	ld.w	r9,r8[0x0]
80000c68:	48 a8       	lddpc	r8,80000c90 <scheduler+0x84>
80000c6a:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
80000c6c:	f0 1f 00 0a 	mcall	80000c94 <scheduler+0x88>
}
80000c70:	2f dd       	sub	sp,-12
80000c72:	e3 cd 80 80 	ldm	sp++,r7,pc
80000c76:	00 00       	add	r0,r0
80000c78:	80 00       	ld.sh	r0,r0[0x0]
80000c7a:	1d 66       	ld.uh	r6,--lr
80000c7c:	00 00       	add	r0,r0
80000c7e:	05 54       	ld.sh	r4,--r2
80000c80:	80 00       	ld.sh	r0,r0[0x0]
80000c82:	0d 84       	ld.ub	r4,r6[0x0]
80000c84:	80 00       	ld.sh	r0,r0[0x0]
80000c86:	09 50       	ld.sh	r0,--r4
80000c88:	80 00       	ld.sh	r0,r0[0x0]
80000c8a:	06 b4       	st.h	r3++,r4
80000c8c:	00 00       	add	r0,r0
80000c8e:	05 50       	ld.sh	r0,--r2
80000c90:	00 00       	add	r0,r0
80000c92:	05 84       	ld.ub	r4,r2[0x0]
80000c94:	80 00       	ld.sh	r0,r0[0x0]
80000c96:	1d 6a       	ld.uh	r10,--lr

80000c98 <C.0.9448>:
80000c98:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000ca8 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000ca8:	eb cd 40 80 	pushm	r7,lr
80000cac:	1a 97       	mov	r7,sp
80000cae:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000cb0:	fe 78 38 00 	mov	r8,-51200
80000cb4:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000cb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cbc:	70 88       	ld.w	r8,r8[0x20]
80000cbe:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000cc6:	e2 18 00 10 	andl	r8,0x10,COH
80000cca:	c0 30       	breq	80000cd0 <timerISR+0x28>
	{
		ROSA_yieldFromISR();
80000ccc:	f0 1f 00 03 	mcall	80000cd8 <timerISR+0x30>
	}
}
80000cd0:	2f ed       	sub	sp,-8
80000cd2:	e3 cd 40 80 	ldm	sp++,r7,lr
80000cd6:	d6 03       	rete
80000cd8:	80 00       	ld.sh	r0,r0[0x0]
80000cda:	04 e4       	st.h	--r2,r4

80000cdc <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000cdc:	eb cd 40 80 	pushm	r7,lr
80000ce0:	1a 97       	mov	r7,sp
80000ce2:	20 7d       	sub	sp,28
80000ce4:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000ce8:	4a 48       	lddpc	r8,80000d78 <timerPeriodSet+0x9c>
80000cea:	ee ca 00 18 	sub	r10,r7,24
80000cee:	10 9b       	mov	r11,r8
80000cf0:	f6 e8 00 00 	ld.d	r8,r11[0]
80000cf4:	f4 e9 00 00 	st.d	r10[0],r8
80000cf8:	f6 e8 00 08 	ld.d	r8,r11[8]
80000cfc:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000d00:	30 48       	mov	r8,4
80000d02:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000d06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d0a:	20 18       	sub	r8,1
80000d0c:	a3 68       	lsl	r8,0x2
80000d0e:	ee 08 00 08 	add	r8,r7,r8
80000d12:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000d16:	e0 68 1b 00 	mov	r8,6912
80000d1a:	ea 18 00 b7 	orh	r8,0xb7
80000d1e:	f0 09 0c 08 	divs	r8,r8,r9
80000d22:	10 99       	mov	r9,r8
80000d24:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000d28:	b1 39       	mul	r9,r8
80000d2a:	e0 68 4d d3 	mov	r8,19923
80000d2e:	ea 18 10 62 	orh	r8,0x1062
80000d32:	f2 08 06 48 	mulu.d	r8,r9,r8
80000d36:	f2 08 16 06 	lsr	r8,r9,0x6
80000d3a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000d3e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000d42:	f0 1f 00 0f 	mcall	80000d7c <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000d46:	ee fc ff f8 	ld.w	r12,r7[-8]
80000d4a:	f0 1f 00 0e 	mcall	80000d80 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000d4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d56:	f2 08 02 4a 	mul	r10,r9,r8
80000d5a:	e0 68 9f 81 	mov	r8,40833
80000d5e:	ea 18 16 5e 	orh	r8,0x165e
80000d62:	f4 08 04 48 	muls.d	r8,r10,r8
80000d66:	b5 49       	asr	r9,0x14
80000d68:	f4 08 14 1f 	asr	r8,r10,0x1f
80000d6c:	f2 08 01 08 	sub	r8,r9,r8
}
80000d70:	10 9c       	mov	r12,r8
80000d72:	2f 9d       	sub	sp,-28
80000d74:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d78:	80 00       	ld.sh	r0,r0[0x0]
80000d7a:	0c 98       	mov	r8,r6
80000d7c:	80 00       	ld.sh	r0,r0[0x0]
80000d7e:	13 5c       	ld.sh	r12,--r9
80000d80:	80 00       	ld.sh	r0,r0[0x0]
80000d82:	13 46       	ld.w	r6,--r9

80000d84 <ROSA_getTickCount>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t ROSA_getTickCount(void)
{
80000d84:	eb cd 40 80 	pushm	r7,lr
80000d88:	1a 97       	mov	r7,sp
	return system_ticks;
80000d8a:	48 48       	lddpc	r8,80000d98 <ROSA_getTickCount+0x14>
80000d8c:	f0 e8 00 00 	ld.d	r8,r8[0]
80000d90:	10 9a       	mov	r10,r8
80000d92:	12 9b       	mov	r11,r9
80000d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d98:	00 00       	add	r0,r0
80000d9a:	05 6c       	ld.uh	r12,--r2

80000d9c <buttonInit>:
80000d9c:	eb cd 40 80 	pushm	r7,lr
80000da0:	1a 97       	mov	r7,sp
80000da2:	30 1b       	mov	r11,1
80000da4:	35 8c       	mov	r12,88
80000da6:	f0 1f 00 07 	mcall	80000dc0 <buttonInit+0x24>
80000daa:	30 1b       	mov	r11,1
80000dac:	35 5c       	mov	r12,85
80000dae:	f0 1f 00 05 	mcall	80000dc0 <buttonInit+0x24>
80000db2:	30 1b       	mov	r11,1
80000db4:	35 2c       	mov	r12,82
80000db6:	f0 1f 00 03 	mcall	80000dc0 <buttonInit+0x24>
80000dba:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dbe:	00 00       	add	r0,r0
80000dc0:	80 00       	ld.sh	r0,r0[0x0]
80000dc2:	0d fc       	ld.ub	r12,r6[0x7]

80000dc4 <joystickInit>:
80000dc4:	eb cd 40 80 	pushm	r7,lr
80000dc8:	1a 97       	mov	r7,sp
80000dca:	30 1b       	mov	r11,1
80000dcc:	31 bc       	mov	r12,27
80000dce:	f0 1f 00 0b 	mcall	80000df8 <joystickInit+0x34>
80000dd2:	30 1b       	mov	r11,1
80000dd4:	31 9c       	mov	r12,25
80000dd6:	f0 1f 00 09 	mcall	80000df8 <joystickInit+0x34>
80000dda:	30 1b       	mov	r11,1
80000ddc:	31 cc       	mov	r12,28
80000dde:	f0 1f 00 07 	mcall	80000df8 <joystickInit+0x34>
80000de2:	30 1b       	mov	r11,1
80000de4:	31 4c       	mov	r12,20
80000de6:	f0 1f 00 05 	mcall	80000df8 <joystickInit+0x34>
80000dea:	30 1b       	mov	r11,1
80000dec:	31 ac       	mov	r12,26
80000dee:	f0 1f 00 03 	mcall	80000df8 <joystickInit+0x34>
80000df2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000df6:	00 00       	add	r0,r0
80000df8:	80 00       	ld.sh	r0,r0[0x0]
80000dfa:	0d fc       	ld.ub	r12,r6[0x7]

80000dfc <gpioInit>:
80000dfc:	eb cd 40 80 	pushm	r7,lr
80000e00:	1a 97       	mov	r7,sp
80000e02:	20 7d       	sub	sp,28
80000e04:	ef 4c ff ec 	st.w	r7[-20],r12
80000e08:	ef 4b ff e8 	st.w	r7[-24],r11
80000e0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e10:	a5 58       	asr	r8,0x5
80000e12:	ef 48 ff f4 	st.w	r7[-12],r8
80000e16:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e1e:	ef 48 ff fc 	st.w	r7[-4],r8
80000e22:	30 19       	mov	r9,1
80000e24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e28:	f2 08 09 48 	lsl	r8,r9,r8
80000e2c:	ef 48 ff f8 	st.w	r7[-8],r8
80000e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e34:	a9 68       	lsl	r8,0x8
80000e36:	e0 28 f0 00 	sub	r8,61440
80000e3a:	ef 48 ff f0 	st.w	r7[-16],r8
80000e3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e46:	91 19       	st.w	r8[0x4],r9
80000e48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e50:	91 69       	st.w	r8[0x18],r9
80000e52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e5a:	91 a9       	st.w	r8[0x28],r9
80000e5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000e60:	ef 48 ff e4 	st.w	r7[-28],r8
80000e64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e68:	58 08       	cp.w	r8,0
80000e6a:	c0 60       	breq	80000e76 <gpioInit+0x7a>
80000e6c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000e70:	58 18       	cp.w	r8,1
80000e72:	c0 90       	breq	80000e84 <gpioInit+0x88>
80000e74:	c0 f8       	rjmp	80000e92 <gpioInit+0x96>
80000e76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e7e:	f1 49 00 44 	st.w	r8[68],r9
80000e82:	c0 e8       	rjmp	80000e9e <gpioInit+0xa2>
80000e84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e8c:	f1 49 00 48 	st.w	r8[72],r9
80000e90:	c0 78       	rjmp	80000e9e <gpioInit+0xa2>
80000e92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e9a:	f1 49 00 48 	st.w	r8[72],r9
80000e9e:	2f 9d       	sub	sp,-28
80000ea0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ea4 <gpioClear>:
80000ea4:	eb cd 40 80 	pushm	r7,lr
80000ea8:	1a 97       	mov	r7,sp
80000eaa:	20 5d       	sub	sp,20
80000eac:	ef 4c ff ec 	st.w	r7[-20],r12
80000eb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000eb4:	a5 58       	asr	r8,0x5
80000eb6:	ef 48 ff f4 	st.w	r7[-12],r8
80000eba:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ebe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000ec2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ec6:	30 19       	mov	r9,1
80000ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ecc:	f2 08 09 48 	lsl	r8,r9,r8
80000ed0:	ef 48 ff f8 	st.w	r7[-8],r8
80000ed4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ed8:	a9 68       	lsl	r8,0x8
80000eda:	e0 28 f0 00 	sub	r8,61440
80000ede:	ef 48 ff f0 	st.w	r7[-16],r8
80000ee2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ee6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eea:	f1 49 00 58 	st.w	r8[88],r9
80000eee:	2f bd       	sub	sp,-20
80000ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ef4 <gpioSet>:
80000ef4:	eb cd 40 80 	pushm	r7,lr
80000ef8:	1a 97       	mov	r7,sp
80000efa:	20 5d       	sub	sp,20
80000efc:	ef 4c ff ec 	st.w	r7[-20],r12
80000f00:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f04:	a5 58       	asr	r8,0x5
80000f06:	ef 48 ff f4 	st.w	r7[-12],r8
80000f0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f12:	ef 48 ff fc 	st.w	r7[-4],r8
80000f16:	30 19       	mov	r9,1
80000f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f1c:	f2 08 09 48 	lsl	r8,r9,r8
80000f20:	ef 48 ff f8 	st.w	r7[-8],r8
80000f24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f28:	a9 68       	lsl	r8,0x8
80000f2a:	e0 28 f0 00 	sub	r8,61440
80000f2e:	ef 48 ff f0 	st.w	r7[-16],r8
80000f32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f3a:	f1 49 00 54 	st.w	r8[84],r9
80000f3e:	2f bd       	sub	sp,-20
80000f40:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f44 <ledInit>:
80000f44:	eb cd 40 80 	pushm	r7,lr
80000f48:	1a 97       	mov	r7,sp
80000f4a:	20 9d       	sub	sp,36
80000f4c:	49 e8       	lddpc	r8,80000fc4 <ledInit+0x80>
80000f4e:	ee cb 00 24 	sub	r11,r7,36
80000f52:	10 9a       	mov	r10,r8
80000f54:	f4 e8 00 00 	ld.d	r8,r10[0]
80000f58:	f6 e9 00 00 	st.d	r11[0],r8
80000f5c:	f4 e8 00 08 	ld.d	r8,r10[8]
80000f60:	f6 e9 00 08 	st.d	r11[8],r8
80000f64:	f4 e8 00 10 	ld.d	r8,r10[16]
80000f68:	f6 e9 00 10 	st.d	r11[16],r8
80000f6c:	f4 e8 00 18 	ld.d	r8,r10[24]
80000f70:	f6 e9 00 18 	st.d	r11[24],r8
80000f74:	30 08       	mov	r8,0
80000f76:	ef 48 ff fc 	st.w	r7[-4],r8
80000f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f7e:	a3 68       	lsl	r8,0x2
80000f80:	ee 08 00 08 	add	r8,r7,r8
80000f84:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f88:	10 9c       	mov	r12,r8
80000f8a:	f0 1f 00 10 	mcall	80000fc8 <ledInit+0x84>
80000f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f92:	a3 68       	lsl	r8,0x2
80000f94:	ee 08 00 08 	add	r8,r7,r8
80000f98:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f9c:	30 0b       	mov	r11,0
80000f9e:	10 9c       	mov	r12,r8
80000fa0:	f0 1f 00 0b 	mcall	80000fcc <ledInit+0x88>
80000fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fa8:	58 78       	cp.w	r8,7
80000faa:	5f 18       	srne	r8
80000fac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fb4:	2f f8       	sub	r8,-1
80000fb6:	ef 48 ff fc 	st.w	r7[-4],r8
80000fba:	58 09       	cp.w	r9,0
80000fbc:	cd f1       	brne	80000f7a <ledInit+0x36>
80000fbe:	2f 7d       	sub	sp,-36
80000fc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fc4:	80 00       	ld.sh	r0,r0[0x0]
80000fc6:	20 00       	sub	r0,0
80000fc8:	80 00       	ld.sh	r0,r0[0x0]
80000fca:	0f f0       	ld.ub	r0,r7[0x7]
80000fcc:	80 00       	ld.sh	r0,r0[0x0]
80000fce:	0d fc       	ld.ub	r12,r6[0x7]

80000fd0 <ledOn>:
80000fd0:	eb cd 40 80 	pushm	r7,lr
80000fd4:	1a 97       	mov	r7,sp
80000fd6:	20 1d       	sub	sp,4
80000fd8:	ef 4c ff fc 	st.w	r7[-4],r12
80000fdc:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fe0:	f0 1f 00 03 	mcall	80000fec <ledOn+0x1c>
80000fe4:	2f fd       	sub	sp,-4
80000fe6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fea:	00 00       	add	r0,r0
80000fec:	80 00       	ld.sh	r0,r0[0x0]
80000fee:	0e a4       	st.w	r7++,r4

80000ff0 <ledOff>:
80000ff0:	eb cd 40 80 	pushm	r7,lr
80000ff4:	1a 97       	mov	r7,sp
80000ff6:	20 1d       	sub	sp,4
80000ff8:	ef 4c ff fc 	st.w	r7[-4],r12
80000ffc:	ee fc ff fc 	ld.w	r12,r7[-4]
80001000:	f0 1f 00 03 	mcall	8000100c <ledOff+0x1c>
80001004:	2f fd       	sub	sp,-4
80001006:	e3 cd 80 80 	ldm	sp++,r7,pc
8000100a:	00 00       	add	r0,r0
8000100c:	80 00       	ld.sh	r0,r0[0x0]
8000100e:	0e f4       	st.b	--r7,r4

80001010 <potInit>:
80001010:	d3 01       	pushm	r11-r12
80001012:	e0 6c 10 00 	mov	r12,4096
80001016:	ea 1c ff ff 	orh	r12,0xffff
8000101a:	31 6b       	mov	r11,22
8000101c:	99 2b       	st.w	r12[0x8],r11
8000101e:	99 6b       	st.w	r12[0x18],r11
80001020:	99 6b       	st.w	r12[0x18],r11
80001022:	e0 6c 3c 00 	mov	r12,15360
80001026:	ea 1c ff ff 	orh	r12,0xffff
8000102a:	30 1b       	mov	r11,1
8000102c:	99 0b       	st.w	r12[0x0],r11
8000102e:	e0 6b 0f 1f 	mov	r11,3871
80001032:	b1 6b       	lsl	r11,0x10
80001034:	99 1b       	st.w	r12[0x4],r11
80001036:	30 2b       	mov	r11,2
80001038:	99 4b       	st.w	r12[0x10],r11
8000103a:	d3 02       	popm	r11-r12
8000103c:	1c 9f       	mov	pc,lr

8000103e <potGetValue>:
8000103e:	d1 81       	pushm	r10-r11
80001040:	e0 6c 3c 00 	mov	r12,15360
80001044:	ea 1c ff ff 	orh	r12,0xffff
80001048:	30 2b       	mov	r11,2
8000104a:	99 0b       	st.w	r12[0x0],r11

8000104c <a1>:
8000104c:	78 7a       	ld.w	r10,r12[0x1c]
8000104e:	16 7a       	tst	r10,r11
80001050:	cf e0       	breq	8000104c <a1>
80001052:	78 dc       	ld.w	r12,r12[0x34]
80001054:	d1 82       	popm	r10-r11
80001056:	1c 9f       	mov	pc,lr

80001058 <usartReset>:
80001058:	eb cd 40 80 	pushm	r7,lr
8000105c:	1a 97       	mov	r7,sp
8000105e:	20 3d       	sub	sp,12
80001060:	ef 4c ff f8 	st.w	r7[-8],r12
80001064:	f0 1f 00 16 	mcall	800010bc <usartReset+0x64>
80001068:	18 98       	mov	r8,r12
8000106a:	ef 48 ff fc 	st.w	r7[-4],r8
8000106e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001072:	58 08       	cp.w	r8,0
80001074:	c0 30       	breq	8000107a <usartReset+0x22>
80001076:	f0 1f 00 13 	mcall	800010c0 <usartReset+0x68>
8000107a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000107e:	3f f8       	mov	r8,-1
80001080:	93 38       	st.w	r9[0xc],r8
80001082:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001086:	70 58       	ld.w	r8,r8[0x14]
80001088:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000108c:	58 08       	cp.w	r8,0
8000108e:	c0 30       	breq	80001094 <usartReset+0x3c>
80001090:	f0 1f 00 0d 	mcall	800010c4 <usartReset+0x6c>
80001094:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001098:	30 08       	mov	r8,0
8000109a:	93 18       	st.w	r9[0x4],r8
8000109c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010a0:	30 08       	mov	r8,0
800010a2:	93 98       	st.w	r9[0x24],r8
800010a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010a8:	30 08       	mov	r8,0
800010aa:	93 a8       	st.w	r9[0x28],r8
800010ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800010b0:	ea 68 61 0c 	mov	r8,680204
800010b4:	93 08       	st.w	r9[0x0],r8
800010b6:	2f dd       	sub	sp,-12
800010b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800010bc:	80 00       	ld.sh	r0,r0[0x0]
800010be:	1d 6e       	ld.uh	lr,--lr
800010c0:	80 00       	ld.sh	r0,r0[0x0]
800010c2:	1d 66       	ld.uh	r6,--lr
800010c4:	80 00       	ld.sh	r0,r0[0x0]
800010c6:	1d 6a       	ld.uh	r10,--lr

800010c8 <usartSetBaudrate>:
800010c8:	eb cd 40 80 	pushm	r7,lr
800010cc:	1a 97       	mov	r7,sp
800010ce:	20 bd       	sub	sp,44
800010d0:	ef 4c ff ec 	st.w	r7[-20],r12
800010d4:	ef 4b ff e8 	st.w	r7[-24],r11
800010d8:	ef 4a ff e4 	st.w	r7[-28],r10
800010dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010e0:	f0 09 15 04 	lsl	r9,r8,0x4
800010e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010e8:	10 39       	cp.w	r9,r8
800010ea:	e0 8b 00 06 	brhi	800010f6 <usartSetBaudrate+0x2e>
800010ee:	31 09       	mov	r9,16
800010f0:	ef 49 ff d4 	st.w	r7[-44],r9
800010f4:	c0 48       	rjmp	800010fc <usartSetBaudrate+0x34>
800010f6:	30 88       	mov	r8,8
800010f8:	ef 48 ff d4 	st.w	r7[-44],r8
800010fc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80001100:	ef 49 ff f0 	st.w	r7[-16],r9
80001104:	ee f8 ff e4 	ld.w	r8,r7[-28]
80001108:	f0 0a 15 03 	lsl	r10,r8,0x3
8000110c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001110:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001114:	f2 08 02 48 	mul	r8,r9,r8
80001118:	a1 98       	lsr	r8,0x1
8000111a:	10 0a       	add	r10,r8
8000111c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001120:	ee f8 ff e8 	ld.w	r8,r7[-24]
80001124:	f2 08 02 48 	mul	r8,r9,r8
80001128:	f4 08 0d 08 	divu	r8,r10,r8
8000112c:	ef 48 ff f4 	st.w	r7[-12],r8
80001130:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001134:	a3 98       	lsr	r8,0x3
80001136:	ef 48 ff f8 	st.w	r7[-8],r8
8000113a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000113e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001142:	ef 48 ff fc 	st.w	r7[-4],r8
80001146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000114a:	58 08       	cp.w	r8,0
8000114c:	c0 70       	breq	8000115a <usartSetBaudrate+0x92>
8000114e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001152:	e0 48 ff ff 	cp.w	r8,65535
80001156:	e0 88 00 06 	brls	80001162 <usartSetBaudrate+0x9a>
8000115a:	30 18       	mov	r8,1
8000115c:	ef 48 ff d8 	st.w	r7[-40],r8
80001160:	c2 c8       	rjmp	800011b8 <usartSetBaudrate+0xf0>
80001162:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001166:	70 18       	ld.w	r8,r8[0x4]
80001168:	10 99       	mov	r9,r8
8000116a:	e4 19 ff f7 	andh	r9,0xfff7
8000116e:	e0 19 fe cf 	andl	r9,0xfecf
80001172:	ef 49 ff dc 	st.w	r7[-36],r9
80001176:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000117a:	59 08       	cp.w	r8,16
8000117c:	c0 60       	breq	80001188 <usartSetBaudrate+0xc0>
8000117e:	e8 68 00 00 	mov	r8,524288
80001182:	ef 48 ff e0 	st.w	r7[-32],r8
80001186:	c0 48       	rjmp	8000118e <usartSetBaudrate+0xc6>
80001188:	30 09       	mov	r9,0
8000118a:	ef 49 ff e0 	st.w	r7[-32],r9
8000118e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001192:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001196:	10 49       	or	r9,r8
80001198:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000119c:	91 19       	st.w	r8[0x4],r9
8000119e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800011a2:	f0 09 15 10 	lsl	r9,r8,0x10
800011a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011aa:	10 49       	or	r9,r8
800011ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800011b0:	91 89       	st.w	r8[0x20],r9
800011b2:	30 09       	mov	r9,0
800011b4:	ef 49 ff d8 	st.w	r7[-40],r9
800011b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800011bc:	10 9c       	mov	r12,r8
800011be:	2f 5d       	sub	sp,-44
800011c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800011c4 <usartInit>:
800011c4:	eb cd 40 80 	pushm	r7,lr
800011c8:	1a 97       	mov	r7,sp
800011ca:	20 4d       	sub	sp,16
800011cc:	ef 4c ff f8 	st.w	r7[-8],r12
800011d0:	ef 4b ff f4 	st.w	r7[-12],r11
800011d4:	ef 4a ff f0 	st.w	r7[-16],r10
800011d8:	fe 78 10 00 	mov	r8,-61440
800011dc:	ef 48 ff fc 	st.w	r7[-4],r8
800011e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011e4:	30 18       	mov	r8,1
800011e6:	93 28       	st.w	r9[0x8],r8
800011e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011ec:	30 28       	mov	r8,2
800011ee:	93 28       	st.w	r9[0x8],r8
800011f0:	ee fc ff f8 	ld.w	r12,r7[-8]
800011f4:	f0 1f 00 3b 	mcall	800012e0 <usartInit+0x11c>
800011f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001200:	70 08       	ld.w	r8,r8[0x0]
80001202:	12 9a       	mov	r10,r9
80001204:	10 9b       	mov	r11,r8
80001206:	ee fc ff f8 	ld.w	r12,r7[-8]
8000120a:	f0 1f 00 37 	mcall	800012e4 <usartInit+0x120>
8000120e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001212:	11 c9       	ld.ub	r9,r8[0x4]
80001214:	30 98       	mov	r8,9
80001216:	f0 09 18 00 	cp.b	r9,r8
8000121a:	c0 a1       	brne	8000122e <usartInit+0x6a>
8000121c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001220:	70 18       	ld.w	r8,r8[0x4]
80001222:	10 99       	mov	r9,r8
80001224:	b1 b9       	sbr	r9,0x11
80001226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000122a:	91 19       	st.w	r8[0x4],r9
8000122c:	c0 d8       	rjmp	80001246 <usartInit+0x82>
8000122e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001232:	70 19       	ld.w	r9,r8[0x4]
80001234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001238:	11 c8       	ld.ub	r8,r8[0x4]
8000123a:	20 58       	sub	r8,5
8000123c:	a7 68       	lsl	r8,0x6
8000123e:	10 49       	or	r9,r8
80001240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001244:	91 19       	st.w	r8[0x4],r9
80001246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000124a:	70 1a       	ld.w	r10,r8[0x4]
8000124c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001250:	11 d8       	ld.ub	r8,r8[0x5]
80001252:	f0 09 15 09 	lsl	r9,r8,0x9
80001256:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000125a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000125e:	af 68       	lsl	r8,0xe
80001260:	f3 e8 10 08 	or	r8,r9,r8
80001264:	f5 e8 10 09 	or	r9,r10,r8
80001268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000126c:	91 19       	st.w	r8[0x4],r9
8000126e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001272:	90 39       	ld.sh	r9,r8[0x6]
80001274:	30 28       	mov	r8,2
80001276:	f0 09 19 00 	cp.h	r9,r8
8000127a:	e0 88 00 14 	brls	800012a2 <usartInit+0xde>
8000127e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001282:	70 18       	ld.w	r8,r8[0x4]
80001284:	10 99       	mov	r9,r8
80001286:	ad b9       	sbr	r9,0xd
80001288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000128c:	91 19       	st.w	r8[0x4],r9
8000128e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001292:	90 38       	ld.sh	r8,r8[0x6]
80001294:	5c 78       	castu.h	r8
80001296:	20 28       	sub	r8,2
80001298:	10 99       	mov	r9,r8
8000129a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000129e:	91 a9       	st.w	r8[0x28],r9
800012a0:	c0 d8       	rjmp	800012ba <usartInit+0xf6>
800012a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012a6:	70 19       	ld.w	r9,r8[0x4]
800012a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012ac:	90 38       	ld.sh	r8,r8[0x6]
800012ae:	5c 78       	castu.h	r8
800012b0:	ad 68       	lsl	r8,0xc
800012b2:	10 49       	or	r9,r8
800012b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012b8:	91 19       	st.w	r8[0x4],r9
800012ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012be:	70 18       	ld.w	r8,r8[0x4]
800012c0:	10 99       	mov	r9,r8
800012c2:	e0 19 ff f0 	andl	r9,0xfff0
800012c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ca:	91 19       	st.w	r8[0x4],r9
800012cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012d0:	35 08       	mov	r8,80
800012d2:	93 08       	st.w	r9[0x0],r8
800012d4:	30 08       	mov	r8,0
800012d6:	10 9c       	mov	r12,r8
800012d8:	2f cd       	sub	sp,-16
800012da:	e3 cd 80 80 	ldm	sp++,r7,pc
800012de:	00 00       	add	r0,r0
800012e0:	80 00       	ld.sh	r0,r0[0x0]
800012e2:	10 58       	eor	r8,r8
800012e4:	80 00       	ld.sh	r0,r0[0x0]
800012e6:	10 c8       	st.b	r8++,r8

800012e8 <timerInit>:
800012e8:	d5 01       	pushm	r11,lr
800012ea:	d2 01       	pushm	r12
800012ec:	f0 1f 00 28 	mcall	8000138c <timerClearInterrupt+0x10>
800012f0:	f0 1f 00 28 	mcall	80001390 <timerClearInterrupt+0x14>
800012f4:	e0 6c 38 00 	mov	r12,14336
800012f8:	ea 1c ff ff 	orh	r12,0xffff
800012fc:	e0 6b c0 00 	mov	r11,49152
80001300:	ea 1b 00 00 	orh	r11,0x0
80001304:	99 1b       	st.w	r12[0x4],r11
80001306:	30 1b       	mov	r11,1
80001308:	a5 6b       	lsl	r11,0x4
8000130a:	99 9b       	st.w	r12[0x24],r11
8000130c:	d2 02       	popm	r12
8000130e:	f0 1f 00 22 	mcall	80001394 <timerClearInterrupt+0x18>
80001312:	d5 02       	popm	r11,lr
80001314:	1c 9f       	mov	pc,lr

80001316 <timerReset>:
80001316:	d3 01       	pushm	r11-r12
80001318:	e0 6c 38 00 	mov	r12,14336
8000131c:	ea 1c ff ff 	orh	r12,0xffff
80001320:	30 5b       	mov	r11,5
80001322:	99 0b       	st.w	r12[0x0],r11
80001324:	e0 6b 00 0c 	mov	r11,12
80001328:	ea 1b 00 00 	orh	r11,0x0
8000132c:	76 0b       	ld.w	r11,r11[0x0]
8000132e:	99 7b       	st.w	r12[0x1c],r11
80001330:	d3 02       	popm	r11-r12
80001332:	1c 9f       	mov	pc,lr

80001334 <timerStop>:
80001334:	d3 01       	pushm	r11-r12
80001336:	e0 6c 38 00 	mov	r12,14336
8000133a:	ea 1c ff ff 	orh	r12,0xffff
8000133e:	30 2b       	mov	r11,2
80001340:	99 0b       	st.w	r12[0x0],r11
80001342:	d3 02       	popm	r11-r12
80001344:	1c 9f       	mov	pc,lr

80001346 <timerRCSet>:
80001346:	d3 01       	pushm	r11-r12
80001348:	49 4b       	lddpc	r11,80001398 <timerClearInterrupt+0x1c>
8000134a:	97 0c       	st.w	r11[0x0],r12
8000134c:	e0 6c 38 00 	mov	r12,14336
80001350:	ea 1c ff ff 	orh	r12,0xffff
80001354:	76 0b       	ld.w	r11,r11[0x0]
80001356:	99 7b       	st.w	r12[0x1c],r11
80001358:	d3 02       	popm	r11-r12
8000135a:	1c 9f       	mov	pc,lr

8000135c <timerPrescaleSet>:
8000135c:	d3 81       	pushm	r10-r12
8000135e:	49 0b       	lddpc	r11,8000139c <timerClearInterrupt+0x20>
80001360:	97 0c       	st.w	r11[0x0],r12
80001362:	e0 6c 38 00 	mov	r12,14336
80001366:	ea 1c ff ff 	orh	r12,0xffff
8000136a:	78 1a       	ld.w	r10,r12[0x4]
8000136c:	3f 8b       	mov	r11,-8
8000136e:	16 6a       	and	r10,r11
80001370:	48 bb       	lddpc	r11,8000139c <timerClearInterrupt+0x20>
80001372:	76 0b       	ld.w	r11,r11[0x0]
80001374:	14 4b       	or	r11,r10
80001376:	99 1b       	st.w	r12[0x4],r11
80001378:	d3 82       	popm	r10-r12
8000137a:	1c 9f       	mov	pc,lr

8000137c <timerClearInterrupt>:
8000137c:	d2 01       	pushm	r12
8000137e:	e0 6c 38 00 	mov	r12,14336
80001382:	ea 1c ff ff 	orh	r12,0xffff
80001386:	78 8c       	ld.w	r12,r12[0x20]
80001388:	d2 02       	popm	r12
8000138a:	1c 9f       	mov	pc,lr
8000138c:	80 00       	ld.sh	r0,r0[0x0]
8000138e:	1d 66       	ld.uh	r6,--lr
80001390:	80 00       	ld.sh	r0,r0[0x0]
80001392:	13 7c       	ld.ub	r12,--r9
80001394:	80 00       	ld.sh	r0,r0[0x0]
80001396:	0c dc       	st.w	--r6,r12
80001398:	00 00       	add	r0,r0
8000139a:	00 0c       	add	r12,r0
8000139c:	00 00       	add	r0,r0
8000139e:	00 10       	sub	r0,r0

800013a0 <_stext>:
800013a0:	49 7d       	lddpc	sp,800013fc <udata_end+0x4>
800013a2:	49 80       	lddpc	r0,80001400 <udata_end+0x8>
800013a4:	1a d0       	st.w	--sp,r0
800013a6:	e5 cd 20 00 	ldmts	sp,sp
800013aa:	1b 00       	ld.w	r0,sp++
800013ac:	49 60       	lddpc	r0,80001404 <udata_end+0xc>
800013ae:	e3 b0 00 01 	mtsr	0x4,r0
800013b2:	d5 53       	csrf	0x15
800013b4:	e0 6c 0c 00 	mov	r12,3072
800013b8:	ea 1c ff ff 	orh	r12,0xffff
800013bc:	e0 6b 01 07 	mov	r11,263
800013c0:	99 ab       	st.w	r12[0x28],r11
800013c2:	30 4b       	mov	r11,4
800013c4:	99 0b       	st.w	r12[0x0],r11
800013c6:	e0 6a 00 80 	mov	r10,128

800013ca <xw8>:
800013ca:	79 5b       	ld.w	r11,r12[0x54]
800013cc:	14 7b       	tst	r11,r10
800013ce:	cf e0       	breq	800013ca <xw8>
800013d0:	30 5b       	mov	r11,5
800013d2:	99 0b       	st.w	r12[0x0],r11

800013d4 <idata_>:
800013d4:	48 d0       	lddpc	r0,80001408 <udata_end+0x10>
800013d6:	48 e1       	lddpc	r1,8000140c <udata_end+0x14>
800013d8:	02 30       	cp.w	r0,r1
800013da:	c0 62       	brcc	800013e6 <idata_end>
800013dc:	48 d2       	lddpc	r2,80001410 <udata_end+0x18>

800013de <idata_loop>:
800013de:	05 04       	ld.w	r4,r2++
800013e0:	00 a4       	st.w	r0++,r4
800013e2:	02 30       	cp.w	r0,r1
800013e4:	cf d3       	brcs	800013de <idata_loop>

800013e6 <idata_end>:
800013e6:	48 c0       	lddpc	r0,80001414 <udata_end+0x1c>
800013e8:	48 c1       	lddpc	r1,80001418 <udata_end+0x20>
800013ea:	02 30       	cp.w	r0,r1
800013ec:	c0 62       	brcc	800013f8 <udata_end>
800013ee:	30 02       	mov	r2,0
800013f0:	30 03       	mov	r3,0

800013f2 <udata_loop>:
800013f2:	00 a2       	st.w	r0++,r2
800013f4:	02 30       	cp.w	r0,r1
800013f6:	cf e3       	brcs	800013f2 <udata_loop>

800013f8 <udata_end>:
800013f8:	48 9f       	lddpc	pc,8000141c <udata_end+0x24>
800013fa:	00 00       	add	r0,r0
800013fc:	00 01       	add	r1,r0
800013fe:	00 00       	add	r0,r0
80001400:	00 00       	add	r0,r0
80001402:	f0 00       	*unknown*
80001404:	80 00       	ld.sh	r0,r0[0x0]
80001406:	1c 00       	add	r0,lr
80001408:	00 00       	add	r0,r0
8000140a:	00 08       	add	r8,r0
8000140c:	00 00       	add	r0,r0
8000140e:	05 18       	ld.sh	r8,r2++
80001410:	80 00       	ld.sh	r0,r0[0x0]
80001412:	20 88       	sub	r8,8
80001414:	00 00       	add	r0,r0
80001416:	05 18       	ld.sh	r8,r2++
80001418:	00 00       	add	r0,r0
8000141a:	05 90       	ld.ub	r0,r2[0x1]
8000141c:	80 00       	ld.sh	r0,r0[0x0]
8000141e:	04 70       	tst	r0,r2

80001420 <calloc>:
80001420:	d4 01       	pushm	lr
80001422:	48 48       	lddpc	r8,80001430 <calloc+0x10>
80001424:	16 9a       	mov	r10,r11
80001426:	18 9b       	mov	r11,r12
80001428:	70 0c       	ld.w	r12,r8[0x0]
8000142a:	f0 1f 00 03 	mcall	80001434 <calloc+0x14>
8000142e:	d8 02       	popm	pc
80001430:	00 00       	add	r0,r0
80001432:	01 04       	ld.w	r4,r0++
80001434:	80 00       	ld.sh	r0,r0[0x0]
80001436:	14 38       	cp.w	r8,r10

80001438 <_calloc_r>:
80001438:	d4 21       	pushm	r4-r7,lr
8000143a:	f4 0b 02 4b 	mul	r11,r10,r11
8000143e:	f0 1f 00 15 	mcall	80001490 <_calloc_r+0x58>
80001442:	18 97       	mov	r7,r12
80001444:	c2 30       	breq	8000148a <_calloc_r+0x52>
80001446:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000144a:	e0 1a ff fc 	andl	r10,0xfffc
8000144e:	20 4a       	sub	r10,4
80001450:	e0 4a 00 24 	cp.w	r10,36
80001454:	e0 8b 00 18 	brhi	80001484 <_calloc_r+0x4c>
80001458:	18 98       	mov	r8,r12
8000145a:	59 3a       	cp.w	r10,19
8000145c:	e0 88 00 0f 	brls	8000147a <_calloc_r+0x42>
80001460:	30 09       	mov	r9,0
80001462:	10 a9       	st.w	r8++,r9
80001464:	10 a9       	st.w	r8++,r9
80001466:	59 ba       	cp.w	r10,27
80001468:	e0 88 00 09 	brls	8000147a <_calloc_r+0x42>
8000146c:	10 a9       	st.w	r8++,r9
8000146e:	10 a9       	st.w	r8++,r9
80001470:	e0 4a 00 24 	cp.w	r10,36
80001474:	c0 31       	brne	8000147a <_calloc_r+0x42>
80001476:	10 a9       	st.w	r8++,r9
80001478:	10 a9       	st.w	r8++,r9
8000147a:	30 09       	mov	r9,0
8000147c:	10 a9       	st.w	r8++,r9
8000147e:	91 19       	st.w	r8[0x4],r9
80001480:	91 09       	st.w	r8[0x0],r9
80001482:	c0 48       	rjmp	8000148a <_calloc_r+0x52>
80001484:	30 0b       	mov	r11,0
80001486:	f0 1f 00 04 	mcall	80001494 <_calloc_r+0x5c>
8000148a:	0e 9c       	mov	r12,r7
8000148c:	d8 22       	popm	r4-r7,pc
8000148e:	00 00       	add	r0,r0
80001490:	80 00       	ld.sh	r0,r0[0x0]
80001492:	14 98       	mov	r8,r10
80001494:	80 00       	ld.sh	r0,r0[0x0]
80001496:	18 e8       	st.h	--r12,r8

80001498 <_malloc_r>:
80001498:	d4 31       	pushm	r0-r7,lr
8000149a:	f6 c8 ff f5 	sub	r8,r11,-11
8000149e:	18 95       	mov	r5,r12
800014a0:	10 97       	mov	r7,r8
800014a2:	e0 17 ff f8 	andl	r7,0xfff8
800014a6:	59 68       	cp.w	r8,22
800014a8:	f9 b7 08 10 	movls	r7,16
800014ac:	16 37       	cp.w	r7,r11
800014ae:	5f 38       	srlo	r8
800014b0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800014b4:	c0 50       	breq	800014be <_malloc_r+0x26>
800014b6:	30 c8       	mov	r8,12
800014b8:	99 38       	st.w	r12[0xc],r8
800014ba:	e0 8f 01 f3 	bral	800018a0 <_malloc_r+0x408>
800014be:	f0 1f 00 50 	mcall	800015fc <_malloc_r+0x164>
800014c2:	e0 47 01 f7 	cp.w	r7,503
800014c6:	e0 8b 00 1c 	brhi	800014fe <_malloc_r+0x66>
800014ca:	ee 03 16 03 	lsr	r3,r7,0x3
800014ce:	4c d8       	lddpc	r8,80001600 <_malloc_r+0x168>
800014d0:	f0 03 00 38 	add	r8,r8,r3<<0x3
800014d4:	70 36       	ld.w	r6,r8[0xc]
800014d6:	10 36       	cp.w	r6,r8
800014d8:	c0 61       	brne	800014e4 <_malloc_r+0x4c>
800014da:	ec c8 ff f8 	sub	r8,r6,-8
800014de:	70 36       	ld.w	r6,r8[0xc]
800014e0:	10 36       	cp.w	r6,r8
800014e2:	c0 c0       	breq	800014fa <_malloc_r+0x62>
800014e4:	6c 18       	ld.w	r8,r6[0x4]
800014e6:	e0 18 ff fc 	andl	r8,0xfffc
800014ea:	6c 3a       	ld.w	r10,r6[0xc]
800014ec:	ec 08 00 09 	add	r9,r6,r8
800014f0:	0a 9c       	mov	r12,r5
800014f2:	6c 28       	ld.w	r8,r6[0x8]
800014f4:	95 28       	st.w	r10[0x8],r8
800014f6:	91 3a       	st.w	r8[0xc],r10
800014f8:	c4 68       	rjmp	80001584 <_malloc_r+0xec>
800014fa:	2f e3       	sub	r3,-2
800014fc:	c4 c8       	rjmp	80001594 <_malloc_r+0xfc>
800014fe:	ee 03 16 09 	lsr	r3,r7,0x9
80001502:	c0 41       	brne	8000150a <_malloc_r+0x72>
80001504:	ee 03 16 03 	lsr	r3,r7,0x3
80001508:	c2 68       	rjmp	80001554 <_malloc_r+0xbc>
8000150a:	58 43       	cp.w	r3,4
8000150c:	e0 8b 00 06 	brhi	80001518 <_malloc_r+0x80>
80001510:	ee 03 16 06 	lsr	r3,r7,0x6
80001514:	2c 83       	sub	r3,-56
80001516:	c1 f8       	rjmp	80001554 <_malloc_r+0xbc>
80001518:	59 43       	cp.w	r3,20
8000151a:	e0 8b 00 04 	brhi	80001522 <_malloc_r+0x8a>
8000151e:	2a 53       	sub	r3,-91
80001520:	c1 a8       	rjmp	80001554 <_malloc_r+0xbc>
80001522:	e0 43 00 54 	cp.w	r3,84
80001526:	e0 8b 00 06 	brhi	80001532 <_malloc_r+0x9a>
8000152a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000152e:	29 23       	sub	r3,-110
80001530:	c1 28       	rjmp	80001554 <_malloc_r+0xbc>
80001532:	e0 43 01 54 	cp.w	r3,340
80001536:	e0 8b 00 06 	brhi	80001542 <_malloc_r+0xaa>
8000153a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000153e:	28 93       	sub	r3,-119
80001540:	c0 a8       	rjmp	80001554 <_malloc_r+0xbc>
80001542:	e0 43 05 54 	cp.w	r3,1364
80001546:	e0 88 00 04 	brls	8000154e <_malloc_r+0xb6>
8000154a:	37 e3       	mov	r3,126
8000154c:	c0 48       	rjmp	80001554 <_malloc_r+0xbc>
8000154e:	ee 03 16 12 	lsr	r3,r7,0x12
80001552:	28 43       	sub	r3,-124
80001554:	4a ba       	lddpc	r10,80001600 <_malloc_r+0x168>
80001556:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000155a:	74 36       	ld.w	r6,r10[0xc]
8000155c:	c1 98       	rjmp	8000158e <_malloc_r+0xf6>
8000155e:	6c 19       	ld.w	r9,r6[0x4]
80001560:	e0 19 ff fc 	andl	r9,0xfffc
80001564:	f2 07 01 0b 	sub	r11,r9,r7
80001568:	58 fb       	cp.w	r11,15
8000156a:	e0 8a 00 04 	brle	80001572 <_malloc_r+0xda>
8000156e:	20 13       	sub	r3,1
80001570:	c1 18       	rjmp	80001592 <_malloc_r+0xfa>
80001572:	6c 38       	ld.w	r8,r6[0xc]
80001574:	58 0b       	cp.w	r11,0
80001576:	c0 b5       	brlt	8000158c <_malloc_r+0xf4>
80001578:	6c 2a       	ld.w	r10,r6[0x8]
8000157a:	ec 09 00 09 	add	r9,r6,r9
8000157e:	0a 9c       	mov	r12,r5
80001580:	91 2a       	st.w	r8[0x8],r10
80001582:	95 38       	st.w	r10[0xc],r8
80001584:	72 18       	ld.w	r8,r9[0x4]
80001586:	a1 a8       	sbr	r8,0x0
80001588:	93 18       	st.w	r9[0x4],r8
8000158a:	cb c8       	rjmp	80001702 <_malloc_r+0x26a>
8000158c:	10 96       	mov	r6,r8
8000158e:	14 36       	cp.w	r6,r10
80001590:	ce 71       	brne	8000155e <_malloc_r+0xc6>
80001592:	2f f3       	sub	r3,-1
80001594:	49 ba       	lddpc	r10,80001600 <_malloc_r+0x168>
80001596:	f4 cc ff f8 	sub	r12,r10,-8
8000159a:	78 26       	ld.w	r6,r12[0x8]
8000159c:	18 36       	cp.w	r6,r12
8000159e:	c6 e0       	breq	8000167a <_malloc_r+0x1e2>
800015a0:	6c 19       	ld.w	r9,r6[0x4]
800015a2:	e0 19 ff fc 	andl	r9,0xfffc
800015a6:	f2 07 01 08 	sub	r8,r9,r7
800015aa:	58 f8       	cp.w	r8,15
800015ac:	e0 89 00 90 	brgt	800016cc <_malloc_r+0x234>
800015b0:	99 3c       	st.w	r12[0xc],r12
800015b2:	99 2c       	st.w	r12[0x8],r12
800015b4:	58 08       	cp.w	r8,0
800015b6:	c0 55       	brlt	800015c0 <_malloc_r+0x128>
800015b8:	ec 09 00 09 	add	r9,r6,r9
800015bc:	0a 9c       	mov	r12,r5
800015be:	ce 3b       	rjmp	80001584 <_malloc_r+0xec>
800015c0:	e0 49 01 ff 	cp.w	r9,511
800015c4:	e0 8b 00 13 	brhi	800015ea <_malloc_r+0x152>
800015c8:	a3 99       	lsr	r9,0x3
800015ca:	f4 09 00 38 	add	r8,r10,r9<<0x3
800015ce:	70 2b       	ld.w	r11,r8[0x8]
800015d0:	8d 38       	st.w	r6[0xc],r8
800015d2:	8d 2b       	st.w	r6[0x8],r11
800015d4:	97 36       	st.w	r11[0xc],r6
800015d6:	91 26       	st.w	r8[0x8],r6
800015d8:	a3 49       	asr	r9,0x2
800015da:	74 18       	ld.w	r8,r10[0x4]
800015dc:	30 1b       	mov	r11,1
800015de:	f6 09 09 49 	lsl	r9,r11,r9
800015e2:	f1 e9 10 09 	or	r9,r8,r9
800015e6:	95 19       	st.w	r10[0x4],r9
800015e8:	c4 98       	rjmp	8000167a <_malloc_r+0x1e2>
800015ea:	f2 0a 16 09 	lsr	r10,r9,0x9
800015ee:	58 4a       	cp.w	r10,4
800015f0:	e0 8b 00 0a 	brhi	80001604 <_malloc_r+0x16c>
800015f4:	f2 0a 16 06 	lsr	r10,r9,0x6
800015f8:	2c 8a       	sub	r10,-56
800015fa:	c2 38       	rjmp	80001640 <_malloc_r+0x1a8>
800015fc:	80 00       	ld.sh	r0,r0[0x0]
800015fe:	18 f6       	st.b	--r12,r6
80001600:	00 00       	add	r0,r0
80001602:	01 08       	ld.w	r8,r0++
80001604:	59 4a       	cp.w	r10,20
80001606:	e0 8b 00 04 	brhi	8000160e <_malloc_r+0x176>
8000160a:	2a 5a       	sub	r10,-91
8000160c:	c1 a8       	rjmp	80001640 <_malloc_r+0x1a8>
8000160e:	e0 4a 00 54 	cp.w	r10,84
80001612:	e0 8b 00 06 	brhi	8000161e <_malloc_r+0x186>
80001616:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000161a:	29 2a       	sub	r10,-110
8000161c:	c1 28       	rjmp	80001640 <_malloc_r+0x1a8>
8000161e:	e0 4a 01 54 	cp.w	r10,340
80001622:	e0 8b 00 06 	brhi	8000162e <_malloc_r+0x196>
80001626:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000162a:	28 9a       	sub	r10,-119
8000162c:	c0 a8       	rjmp	80001640 <_malloc_r+0x1a8>
8000162e:	e0 4a 05 54 	cp.w	r10,1364
80001632:	e0 88 00 04 	brls	8000163a <_malloc_r+0x1a2>
80001636:	37 ea       	mov	r10,126
80001638:	c0 48       	rjmp	80001640 <_malloc_r+0x1a8>
8000163a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000163e:	28 4a       	sub	r10,-124
80001640:	4c 8b       	lddpc	r11,80001760 <_malloc_r+0x2c8>
80001642:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001646:	68 28       	ld.w	r8,r4[0x8]
80001648:	08 38       	cp.w	r8,r4
8000164a:	c0 e1       	brne	80001666 <_malloc_r+0x1ce>
8000164c:	76 19       	ld.w	r9,r11[0x4]
8000164e:	a3 4a       	asr	r10,0x2
80001650:	30 1e       	mov	lr,1
80001652:	fc 0a 09 4a 	lsl	r10,lr,r10
80001656:	f3 ea 10 0a 	or	r10,r9,r10
8000165a:	10 99       	mov	r9,r8
8000165c:	97 1a       	st.w	r11[0x4],r10
8000165e:	c0 a8       	rjmp	80001672 <_malloc_r+0x1da>
80001660:	70 28       	ld.w	r8,r8[0x8]
80001662:	08 38       	cp.w	r8,r4
80001664:	c0 60       	breq	80001670 <_malloc_r+0x1d8>
80001666:	70 1a       	ld.w	r10,r8[0x4]
80001668:	e0 1a ff fc 	andl	r10,0xfffc
8000166c:	14 39       	cp.w	r9,r10
8000166e:	cf 93       	brcs	80001660 <_malloc_r+0x1c8>
80001670:	70 39       	ld.w	r9,r8[0xc]
80001672:	8d 39       	st.w	r6[0xc],r9
80001674:	8d 28       	st.w	r6[0x8],r8
80001676:	91 36       	st.w	r8[0xc],r6
80001678:	93 26       	st.w	r9[0x8],r6
8000167a:	e6 08 14 02 	asr	r8,r3,0x2
8000167e:	30 1b       	mov	r11,1
80001680:	4b 84       	lddpc	r4,80001760 <_malloc_r+0x2c8>
80001682:	f6 08 09 4b 	lsl	r11,r11,r8
80001686:	68 18       	ld.w	r8,r4[0x4]
80001688:	10 3b       	cp.w	r11,r8
8000168a:	e0 8b 00 6f 	brhi	80001768 <_malloc_r+0x2d0>
8000168e:	f7 e8 00 09 	and	r9,r11,r8
80001692:	c0 b1       	brne	800016a8 <_malloc_r+0x210>
80001694:	e0 13 ff fc 	andl	r3,0xfffc
80001698:	a1 7b       	lsl	r11,0x1
8000169a:	2f c3       	sub	r3,-4
8000169c:	c0 38       	rjmp	800016a2 <_malloc_r+0x20a>
8000169e:	2f c3       	sub	r3,-4
800016a0:	a1 7b       	lsl	r11,0x1
800016a2:	f7 e8 00 09 	and	r9,r11,r8
800016a6:	cf c0       	breq	8000169e <_malloc_r+0x206>
800016a8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800016ac:	06 92       	mov	r2,r3
800016ae:	1c 91       	mov	r1,lr
800016b0:	62 36       	ld.w	r6,r1[0xc]
800016b2:	c2 e8       	rjmp	8000170e <_malloc_r+0x276>
800016b4:	6c 1a       	ld.w	r10,r6[0x4]
800016b6:	e0 1a ff fc 	andl	r10,0xfffc
800016ba:	f4 07 01 08 	sub	r8,r10,r7
800016be:	58 f8       	cp.w	r8,15
800016c0:	e0 8a 00 15 	brle	800016ea <_malloc_r+0x252>
800016c4:	6c 3a       	ld.w	r10,r6[0xc]
800016c6:	6c 29       	ld.w	r9,r6[0x8]
800016c8:	95 29       	st.w	r10[0x8],r9
800016ca:	93 3a       	st.w	r9[0xc],r10
800016cc:	0e 99       	mov	r9,r7
800016ce:	ec 07 00 07 	add	r7,r6,r7
800016d2:	a1 a9       	sbr	r9,0x0
800016d4:	99 37       	st.w	r12[0xc],r7
800016d6:	99 27       	st.w	r12[0x8],r7
800016d8:	8d 19       	st.w	r6[0x4],r9
800016da:	ee 08 09 08 	st.w	r7[r8],r8
800016de:	8f 2c       	st.w	r7[0x8],r12
800016e0:	8f 3c       	st.w	r7[0xc],r12
800016e2:	a1 a8       	sbr	r8,0x0
800016e4:	0a 9c       	mov	r12,r5
800016e6:	8f 18       	st.w	r7[0x4],r8
800016e8:	c0 d8       	rjmp	80001702 <_malloc_r+0x26a>
800016ea:	6c 39       	ld.w	r9,r6[0xc]
800016ec:	58 08       	cp.w	r8,0
800016ee:	c0 f5       	brlt	8000170c <_malloc_r+0x274>
800016f0:	ec 0a 00 0a 	add	r10,r6,r10
800016f4:	74 18       	ld.w	r8,r10[0x4]
800016f6:	a1 a8       	sbr	r8,0x0
800016f8:	0a 9c       	mov	r12,r5
800016fa:	95 18       	st.w	r10[0x4],r8
800016fc:	6c 28       	ld.w	r8,r6[0x8]
800016fe:	93 28       	st.w	r9[0x8],r8
80001700:	91 39       	st.w	r8[0xc],r9
80001702:	f0 1f 00 19 	mcall	80001764 <_malloc_r+0x2cc>
80001706:	ec cc ff f8 	sub	r12,r6,-8
8000170a:	d8 32       	popm	r0-r7,pc
8000170c:	12 96       	mov	r6,r9
8000170e:	02 36       	cp.w	r6,r1
80001710:	cd 21       	brne	800016b4 <_malloc_r+0x21c>
80001712:	2f f2       	sub	r2,-1
80001714:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80001718:	c0 30       	breq	8000171e <_malloc_r+0x286>
8000171a:	2f 81       	sub	r1,-8
8000171c:	cc ab       	rjmp	800016b0 <_malloc_r+0x218>
8000171e:	1c 98       	mov	r8,lr
80001720:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80001724:	c0 81       	brne	80001734 <_malloc_r+0x29c>
80001726:	68 19       	ld.w	r9,r4[0x4]
80001728:	f6 08 11 ff 	rsub	r8,r11,-1
8000172c:	f3 e8 00 08 	and	r8,r9,r8
80001730:	89 18       	st.w	r4[0x4],r8
80001732:	c0 78       	rjmp	80001740 <_malloc_r+0x2a8>
80001734:	f0 c9 00 08 	sub	r9,r8,8
80001738:	20 13       	sub	r3,1
8000173a:	70 08       	ld.w	r8,r8[0x0]
8000173c:	12 38       	cp.w	r8,r9
8000173e:	cf 10       	breq	80001720 <_malloc_r+0x288>
80001740:	a1 7b       	lsl	r11,0x1
80001742:	68 18       	ld.w	r8,r4[0x4]
80001744:	10 3b       	cp.w	r11,r8
80001746:	e0 8b 00 11 	brhi	80001768 <_malloc_r+0x2d0>
8000174a:	58 0b       	cp.w	r11,0
8000174c:	c0 e0       	breq	80001768 <_malloc_r+0x2d0>
8000174e:	04 93       	mov	r3,r2
80001750:	c0 38       	rjmp	80001756 <_malloc_r+0x2be>
80001752:	2f c3       	sub	r3,-4
80001754:	a1 7b       	lsl	r11,0x1
80001756:	f7 e8 00 09 	and	r9,r11,r8
8000175a:	ca 71       	brne	800016a8 <_malloc_r+0x210>
8000175c:	cf bb       	rjmp	80001752 <_malloc_r+0x2ba>
8000175e:	00 00       	add	r0,r0
80001760:	00 00       	add	r0,r0
80001762:	01 08       	ld.w	r8,r0++
80001764:	80 00       	ld.sh	r0,r0[0x0]
80001766:	18 f8       	st.b	--r12,r8
80001768:	68 23       	ld.w	r3,r4[0x8]
8000176a:	66 12       	ld.w	r2,r3[0x4]
8000176c:	e0 12 ff fc 	andl	r2,0xfffc
80001770:	0e 32       	cp.w	r2,r7
80001772:	5f 39       	srlo	r9
80001774:	e4 07 01 08 	sub	r8,r2,r7
80001778:	58 f8       	cp.w	r8,15
8000177a:	5f aa       	srle	r10
8000177c:	f5 e9 10 09 	or	r9,r10,r9
80001780:	e0 80 00 a2 	breq	800018c4 <_malloc_r+0x42c>
80001784:	4c 88       	lddpc	r8,800018a4 <_malloc_r+0x40c>
80001786:	70 01       	ld.w	r1,r8[0x0]
80001788:	4c 88       	lddpc	r8,800018a8 <_malloc_r+0x410>
8000178a:	2f 01       	sub	r1,-16
8000178c:	70 08       	ld.w	r8,r8[0x0]
8000178e:	0e 01       	add	r1,r7
80001790:	5b f8       	cp.w	r8,-1
80001792:	c0 40       	breq	8000179a <_malloc_r+0x302>
80001794:	28 11       	sub	r1,-127
80001796:	e0 11 ff 80 	andl	r1,0xff80
8000179a:	02 9b       	mov	r11,r1
8000179c:	0a 9c       	mov	r12,r5
8000179e:	f0 1f 00 44 	mcall	800018ac <_malloc_r+0x414>
800017a2:	18 96       	mov	r6,r12
800017a4:	5b fc       	cp.w	r12,-1
800017a6:	c6 e0       	breq	80001882 <_malloc_r+0x3ea>
800017a8:	e6 02 00 08 	add	r8,r3,r2
800017ac:	10 3c       	cp.w	r12,r8
800017ae:	c0 32       	brcc	800017b4 <_malloc_r+0x31c>
800017b0:	08 33       	cp.w	r3,r4
800017b2:	c6 81       	brne	80001882 <_malloc_r+0x3ea>
800017b4:	4b fa       	lddpc	r10,800018b0 <_malloc_r+0x418>
800017b6:	74 09       	ld.w	r9,r10[0x0]
800017b8:	e2 09 00 09 	add	r9,r1,r9
800017bc:	95 09       	st.w	r10[0x0],r9
800017be:	10 36       	cp.w	r6,r8
800017c0:	c0 a1       	brne	800017d4 <_malloc_r+0x33c>
800017c2:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800017c6:	c0 71       	brne	800017d4 <_malloc_r+0x33c>
800017c8:	e2 02 00 02 	add	r2,r1,r2
800017cc:	68 28       	ld.w	r8,r4[0x8]
800017ce:	a1 a2       	sbr	r2,0x0
800017d0:	91 12       	st.w	r8[0x4],r2
800017d2:	c4 c8       	rjmp	8000186a <_malloc_r+0x3d2>
800017d4:	4b 5a       	lddpc	r10,800018a8 <_malloc_r+0x410>
800017d6:	74 0b       	ld.w	r11,r10[0x0]
800017d8:	5b fb       	cp.w	r11,-1
800017da:	c0 31       	brne	800017e0 <_malloc_r+0x348>
800017dc:	95 06       	st.w	r10[0x0],r6
800017de:	c0 68       	rjmp	800017ea <_malloc_r+0x352>
800017e0:	ec 09 00 09 	add	r9,r6,r9
800017e4:	4b 3a       	lddpc	r10,800018b0 <_malloc_r+0x418>
800017e6:	10 19       	sub	r9,r8
800017e8:	95 09       	st.w	r10[0x0],r9
800017ea:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800017ee:	f0 09 11 08 	rsub	r9,r8,8
800017f2:	58 08       	cp.w	r8,0
800017f4:	f2 08 17 10 	movne	r8,r9
800017f8:	ed d8 e1 06 	addne	r6,r6,r8
800017fc:	28 08       	sub	r8,-128
800017fe:	ec 01 00 01 	add	r1,r6,r1
80001802:	0a 9c       	mov	r12,r5
80001804:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80001808:	f0 01 01 01 	sub	r1,r8,r1
8000180c:	02 9b       	mov	r11,r1
8000180e:	f0 1f 00 28 	mcall	800018ac <_malloc_r+0x414>
80001812:	4a 88       	lddpc	r8,800018b0 <_malloc_r+0x418>
80001814:	5b fc       	cp.w	r12,-1
80001816:	ec 0c 17 00 	moveq	r12,r6
8000181a:	f9 b1 00 00 	moveq	r1,0
8000181e:	70 09       	ld.w	r9,r8[0x0]
80001820:	0c 1c       	sub	r12,r6
80001822:	89 26       	st.w	r4[0x8],r6
80001824:	02 0c       	add	r12,r1
80001826:	12 01       	add	r1,r9
80001828:	a1 ac       	sbr	r12,0x0
8000182a:	91 01       	st.w	r8[0x0],r1
8000182c:	8d 1c       	st.w	r6[0x4],r12
8000182e:	08 33       	cp.w	r3,r4
80001830:	c1 d0       	breq	8000186a <_malloc_r+0x3d2>
80001832:	58 f2       	cp.w	r2,15
80001834:	e0 8b 00 05 	brhi	8000183e <_malloc_r+0x3a6>
80001838:	30 18       	mov	r8,1
8000183a:	8d 18       	st.w	r6[0x4],r8
8000183c:	c2 38       	rjmp	80001882 <_malloc_r+0x3ea>
8000183e:	30 59       	mov	r9,5
80001840:	20 c2       	sub	r2,12
80001842:	e0 12 ff f8 	andl	r2,0xfff8
80001846:	e6 02 00 08 	add	r8,r3,r2
8000184a:	91 29       	st.w	r8[0x8],r9
8000184c:	91 19       	st.w	r8[0x4],r9
8000184e:	66 18       	ld.w	r8,r3[0x4]
80001850:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001854:	e5 e8 10 08 	or	r8,r2,r8
80001858:	87 18       	st.w	r3[0x4],r8
8000185a:	58 f2       	cp.w	r2,15
8000185c:	e0 88 00 07 	brls	8000186a <_malloc_r+0x3d2>
80001860:	e6 cb ff f8 	sub	r11,r3,-8
80001864:	0a 9c       	mov	r12,r5
80001866:	f0 1f 00 14 	mcall	800018b4 <_malloc_r+0x41c>
8000186a:	49 49       	lddpc	r9,800018b8 <_malloc_r+0x420>
8000186c:	72 0a       	ld.w	r10,r9[0x0]
8000186e:	49 18       	lddpc	r8,800018b0 <_malloc_r+0x418>
80001870:	70 08       	ld.w	r8,r8[0x0]
80001872:	14 38       	cp.w	r8,r10
80001874:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001878:	49 19       	lddpc	r9,800018bc <_malloc_r+0x424>
8000187a:	72 0a       	ld.w	r10,r9[0x0]
8000187c:	14 38       	cp.w	r8,r10
8000187e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001882:	68 28       	ld.w	r8,r4[0x8]
80001884:	70 18       	ld.w	r8,r8[0x4]
80001886:	e0 18 ff fc 	andl	r8,0xfffc
8000188a:	0e 38       	cp.w	r8,r7
8000188c:	5f 39       	srlo	r9
8000188e:	0e 18       	sub	r8,r7
80001890:	58 f8       	cp.w	r8,15
80001892:	5f aa       	srle	r10
80001894:	f5 e9 10 09 	or	r9,r10,r9
80001898:	c1 60       	breq	800018c4 <_malloc_r+0x42c>
8000189a:	0a 9c       	mov	r12,r5
8000189c:	f0 1f 00 09 	mcall	800018c0 <_malloc_r+0x428>
800018a0:	d8 3a       	popm	r0-r7,pc,r12=0
800018a2:	00 00       	add	r0,r0
800018a4:	00 00       	add	r0,r0
800018a6:	05 20       	ld.uh	r0,r2++
800018a8:	00 00       	add	r0,r0
800018aa:	05 14       	ld.sh	r4,r2++
800018ac:	80 00       	ld.sh	r0,r0[0x0]
800018ae:	18 fc       	st.b	--r12,r12
800018b0:	00 00       	add	r0,r0
800018b2:	05 24       	ld.uh	r4,r2++
800018b4:	80 00       	ld.sh	r0,r0[0x0]
800018b6:	1a 18       	sub	r8,sp
800018b8:	00 00       	add	r0,r0
800018ba:	05 1c       	ld.sh	r12,r2++
800018bc:	00 00       	add	r0,r0
800018be:	05 18       	ld.sh	r8,r2++
800018c0:	80 00       	ld.sh	r0,r0[0x0]
800018c2:	18 f8       	st.b	--r12,r8
800018c4:	68 26       	ld.w	r6,r4[0x8]
800018c6:	a1 a8       	sbr	r8,0x0
800018c8:	0e 99       	mov	r9,r7
800018ca:	a1 a9       	sbr	r9,0x0
800018cc:	8d 19       	st.w	r6[0x4],r9
800018ce:	ec 07 00 07 	add	r7,r6,r7
800018d2:	0a 9c       	mov	r12,r5
800018d4:	89 27       	st.w	r4[0x8],r7
800018d6:	8f 18       	st.w	r7[0x4],r8
800018d8:	f0 1f 00 03 	mcall	800018e4 <_malloc_r+0x44c>
800018dc:	ec cc ff f8 	sub	r12,r6,-8
800018e0:	d8 32       	popm	r0-r7,pc
800018e2:	00 00       	add	r0,r0
800018e4:	80 00       	ld.sh	r0,r0[0x0]
800018e6:	18 f8       	st.b	--r12,r8

800018e8 <memset>:
800018e8:	18 98       	mov	r8,r12
800018ea:	c0 38       	rjmp	800018f0 <memset+0x8>
800018ec:	10 cb       	st.b	r8++,r11
800018ee:	20 1a       	sub	r10,1
800018f0:	58 0a       	cp.w	r10,0
800018f2:	cf d1       	brne	800018ec <memset+0x4>
800018f4:	5e fc       	retal	r12

800018f6 <__malloc_lock>:
800018f6:	5e fc       	retal	r12

800018f8 <__malloc_unlock>:
800018f8:	5e fc       	retal	r12
800018fa:	d7 03       	nop

800018fc <_sbrk_r>:
800018fc:	d4 21       	pushm	r4-r7,lr
800018fe:	30 08       	mov	r8,0
80001900:	18 97       	mov	r7,r12
80001902:	48 76       	lddpc	r6,8000191c <_sbrk_r+0x20>
80001904:	16 9c       	mov	r12,r11
80001906:	8d 08       	st.w	r6[0x0],r8
80001908:	f0 1f 00 06 	mcall	80001920 <_sbrk_r+0x24>
8000190c:	5b fc       	cp.w	r12,-1
8000190e:	c0 51       	brne	80001918 <_sbrk_r+0x1c>
80001910:	6c 08       	ld.w	r8,r6[0x0]
80001912:	58 08       	cp.w	r8,0
80001914:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001918:	d8 22       	popm	r4-r7,pc
8000191a:	00 00       	add	r0,r0
8000191c:	00 00       	add	r0,r0
8000191e:	05 88       	ld.ub	r8,r2[0x0]
80001920:	80 00       	ld.sh	r0,r0[0x0]
80001922:	19 24       	ld.uh	r4,r12++

80001924 <_sbrk>:
80001924:	d4 01       	pushm	lr
80001926:	48 c8       	lddpc	r8,80001954 <_sbrk+0x30>
80001928:	70 09       	ld.w	r9,r8[0x0]
8000192a:	58 09       	cp.w	r9,0
8000192c:	c0 31       	brne	80001932 <_sbrk+0xe>
8000192e:	48 b9       	lddpc	r9,80001958 <_sbrk+0x34>
80001930:	91 09       	st.w	r8[0x0],r9
80001932:	48 99       	lddpc	r9,80001954 <_sbrk+0x30>
80001934:	48 aa       	lddpc	r10,8000195c <_sbrk+0x38>
80001936:	72 08       	ld.w	r8,r9[0x0]
80001938:	f0 0c 00 0c 	add	r12,r8,r12
8000193c:	14 3c       	cp.w	r12,r10
8000193e:	e0 8b 00 04 	brhi	80001946 <_sbrk+0x22>
80001942:	93 0c       	st.w	r9[0x0],r12
80001944:	c0 68       	rjmp	80001950 <_sbrk+0x2c>
80001946:	f0 1f 00 07 	mcall	80001960 <_sbrk+0x3c>
8000194a:	30 c8       	mov	r8,12
8000194c:	99 08       	st.w	r12[0x0],r8
8000194e:	3f f8       	mov	r8,-1
80001950:	10 9c       	mov	r12,r8
80001952:	d8 02       	popm	pc
80001954:	00 00       	add	r0,r0
80001956:	05 4c       	ld.w	r12,--r2
80001958:	00 00       	add	r0,r0
8000195a:	05 90       	ld.ub	r0,r2[0x1]
8000195c:	00 00       	add	r0,r0
8000195e:	e0 00       	*unknown*
80001960:	80 00       	ld.sh	r0,r0[0x0]
80001962:	19 64       	ld.uh	r4,--r12

80001964 <__errno>:
80001964:	48 28       	lddpc	r8,8000196c <__errno+0x8>
80001966:	70 0c       	ld.w	r12,r8[0x0]
80001968:	2f 4c       	sub	r12,-12
8000196a:	5e fc       	retal	r12
8000196c:	00 00       	add	r0,r0
8000196e:	01 04       	ld.w	r4,r0++

80001970 <_malloc_trim_r>:
80001970:	d4 21       	pushm	r4-r7,lr
80001972:	16 95       	mov	r5,r11
80001974:	18 97       	mov	r7,r12
80001976:	f0 1f 00 23 	mcall	80001a00 <_malloc_trim_r+0x90>
8000197a:	4a 34       	lddpc	r4,80001a04 <_malloc_trim_r+0x94>
8000197c:	68 28       	ld.w	r8,r4[0x8]
8000197e:	70 16       	ld.w	r6,r8[0x4]
80001980:	e0 16 ff fc 	andl	r6,0xfffc
80001984:	ec c8 ff 91 	sub	r8,r6,-111
80001988:	f0 05 01 05 	sub	r5,r8,r5
8000198c:	e0 15 ff 80 	andl	r5,0xff80
80001990:	ea c5 00 80 	sub	r5,r5,128
80001994:	e0 45 00 7f 	cp.w	r5,127
80001998:	e0 8a 00 23 	brle	800019de <_malloc_trim_r+0x6e>
8000199c:	30 0b       	mov	r11,0
8000199e:	0e 9c       	mov	r12,r7
800019a0:	f0 1f 00 1a 	mcall	80001a08 <_malloc_trim_r+0x98>
800019a4:	68 28       	ld.w	r8,r4[0x8]
800019a6:	0c 08       	add	r8,r6
800019a8:	10 3c       	cp.w	r12,r8
800019aa:	c1 a1       	brne	800019de <_malloc_trim_r+0x6e>
800019ac:	ea 0b 11 00 	rsub	r11,r5,0
800019b0:	0e 9c       	mov	r12,r7
800019b2:	f0 1f 00 16 	mcall	80001a08 <_malloc_trim_r+0x98>
800019b6:	5b fc       	cp.w	r12,-1
800019b8:	c1 71       	brne	800019e6 <_malloc_trim_r+0x76>
800019ba:	30 0b       	mov	r11,0
800019bc:	0e 9c       	mov	r12,r7
800019be:	f0 1f 00 13 	mcall	80001a08 <_malloc_trim_r+0x98>
800019c2:	68 28       	ld.w	r8,r4[0x8]
800019c4:	f8 08 01 09 	sub	r9,r12,r8
800019c8:	58 f9       	cp.w	r9,15
800019ca:	e0 8a 00 0a 	brle	800019de <_malloc_trim_r+0x6e>
800019ce:	a1 a9       	sbr	r9,0x0
800019d0:	91 19       	st.w	r8[0x4],r9
800019d2:	48 f8       	lddpc	r8,80001a0c <_malloc_trim_r+0x9c>
800019d4:	70 09       	ld.w	r9,r8[0x0]
800019d6:	48 f8       	lddpc	r8,80001a10 <_malloc_trim_r+0xa0>
800019d8:	f8 09 01 09 	sub	r9,r12,r9
800019dc:	91 09       	st.w	r8[0x0],r9
800019de:	0e 9c       	mov	r12,r7
800019e0:	f0 1f 00 0d 	mcall	80001a14 <_malloc_trim_r+0xa4>
800019e4:	d8 2a       	popm	r4-r7,pc,r12=0
800019e6:	68 28       	ld.w	r8,r4[0x8]
800019e8:	0a 16       	sub	r6,r5
800019ea:	a1 a6       	sbr	r6,0x0
800019ec:	91 16       	st.w	r8[0x4],r6
800019ee:	48 98       	lddpc	r8,80001a10 <_malloc_trim_r+0xa0>
800019f0:	70 09       	ld.w	r9,r8[0x0]
800019f2:	0a 19       	sub	r9,r5
800019f4:	0e 9c       	mov	r12,r7
800019f6:	91 09       	st.w	r8[0x0],r9
800019f8:	f0 1f 00 07 	mcall	80001a14 <_malloc_trim_r+0xa4>
800019fc:	da 2a       	popm	r4-r7,pc,r12=1
800019fe:	00 00       	add	r0,r0
80001a00:	80 00       	ld.sh	r0,r0[0x0]
80001a02:	18 f6       	st.b	--r12,r6
80001a04:	00 00       	add	r0,r0
80001a06:	01 08       	ld.w	r8,r0++
80001a08:	80 00       	ld.sh	r0,r0[0x0]
80001a0a:	18 fc       	st.b	--r12,r12
80001a0c:	00 00       	add	r0,r0
80001a0e:	05 14       	ld.sh	r4,r2++
80001a10:	00 00       	add	r0,r0
80001a12:	05 24       	ld.uh	r4,r2++
80001a14:	80 00       	ld.sh	r0,r0[0x0]
80001a16:	18 f8       	st.b	--r12,r8

80001a18 <_free_r>:
80001a18:	d4 21       	pushm	r4-r7,lr
80001a1a:	16 96       	mov	r6,r11
80001a1c:	18 97       	mov	r7,r12
80001a1e:	58 0b       	cp.w	r11,0
80001a20:	e0 80 00 c8 	breq	80001bb0 <_free_r+0x198>
80001a24:	f0 1f 00 4c 	mcall	80001b54 <_free_r+0x13c>
80001a28:	20 86       	sub	r6,8
80001a2a:	4c ca       	lddpc	r10,80001b58 <_free_r+0x140>
80001a2c:	6c 18       	ld.w	r8,r6[0x4]
80001a2e:	74 2e       	ld.w	lr,r10[0x8]
80001a30:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001a34:	a1 c8       	cbr	r8,0x0
80001a36:	ec 08 00 09 	add	r9,r6,r8
80001a3a:	72 1b       	ld.w	r11,r9[0x4]
80001a3c:	e0 1b ff fc 	andl	r11,0xfffc
80001a40:	1c 39       	cp.w	r9,lr
80001a42:	c1 d1       	brne	80001a7c <_free_r+0x64>
80001a44:	f6 08 00 08 	add	r8,r11,r8
80001a48:	58 0c       	cp.w	r12,0
80001a4a:	c0 81       	brne	80001a5a <_free_r+0x42>
80001a4c:	6c 09       	ld.w	r9,r6[0x0]
80001a4e:	12 16       	sub	r6,r9
80001a50:	12 08       	add	r8,r9
80001a52:	6c 3b       	ld.w	r11,r6[0xc]
80001a54:	6c 29       	ld.w	r9,r6[0x8]
80001a56:	97 29       	st.w	r11[0x8],r9
80001a58:	93 3b       	st.w	r9[0xc],r11
80001a5a:	10 99       	mov	r9,r8
80001a5c:	95 26       	st.w	r10[0x8],r6
80001a5e:	a1 a9       	sbr	r9,0x0
80001a60:	8d 19       	st.w	r6[0x4],r9
80001a62:	4b f9       	lddpc	r9,80001b5c <_free_r+0x144>
80001a64:	72 09       	ld.w	r9,r9[0x0]
80001a66:	12 38       	cp.w	r8,r9
80001a68:	c0 63       	brcs	80001a74 <_free_r+0x5c>
80001a6a:	4b e8       	lddpc	r8,80001b60 <_free_r+0x148>
80001a6c:	0e 9c       	mov	r12,r7
80001a6e:	70 0b       	ld.w	r11,r8[0x0]
80001a70:	f0 1f 00 3d 	mcall	80001b64 <_free_r+0x14c>
80001a74:	0e 9c       	mov	r12,r7
80001a76:	f0 1f 00 3d 	mcall	80001b68 <_free_r+0x150>
80001a7a:	d8 22       	popm	r4-r7,pc
80001a7c:	93 1b       	st.w	r9[0x4],r11
80001a7e:	58 0c       	cp.w	r12,0
80001a80:	c0 30       	breq	80001a86 <_free_r+0x6e>
80001a82:	30 0c       	mov	r12,0
80001a84:	c1 08       	rjmp	80001aa4 <_free_r+0x8c>
80001a86:	6c 0e       	ld.w	lr,r6[0x0]
80001a88:	f4 c5 ff f8 	sub	r5,r10,-8
80001a8c:	1c 16       	sub	r6,lr
80001a8e:	1c 08       	add	r8,lr
80001a90:	6c 2e       	ld.w	lr,r6[0x8]
80001a92:	0a 3e       	cp.w	lr,r5
80001a94:	f9 bc 00 01 	moveq	r12,1
80001a98:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001a9c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001aa0:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001aa4:	f2 0b 00 0e 	add	lr,r9,r11
80001aa8:	7c 1e       	ld.w	lr,lr[0x4]
80001aaa:	ed be 00 00 	bld	lr,0x0
80001aae:	c1 30       	breq	80001ad4 <_free_r+0xbc>
80001ab0:	16 08       	add	r8,r11
80001ab2:	58 0c       	cp.w	r12,0
80001ab4:	c0 c1       	brne	80001acc <_free_r+0xb4>
80001ab6:	4a 9e       	lddpc	lr,80001b58 <_free_r+0x140>
80001ab8:	72 2b       	ld.w	r11,r9[0x8]
80001aba:	2f 8e       	sub	lr,-8
80001abc:	1c 3b       	cp.w	r11,lr
80001abe:	c0 71       	brne	80001acc <_free_r+0xb4>
80001ac0:	97 36       	st.w	r11[0xc],r6
80001ac2:	97 26       	st.w	r11[0x8],r6
80001ac4:	8d 2b       	st.w	r6[0x8],r11
80001ac6:	8d 3b       	st.w	r6[0xc],r11
80001ac8:	30 1c       	mov	r12,1
80001aca:	c0 58       	rjmp	80001ad4 <_free_r+0xbc>
80001acc:	72 2b       	ld.w	r11,r9[0x8]
80001ace:	72 39       	ld.w	r9,r9[0xc]
80001ad0:	93 2b       	st.w	r9[0x8],r11
80001ad2:	97 39       	st.w	r11[0xc],r9
80001ad4:	10 99       	mov	r9,r8
80001ad6:	ec 08 09 08 	st.w	r6[r8],r8
80001ada:	a1 a9       	sbr	r9,0x0
80001adc:	8d 19       	st.w	r6[0x4],r9
80001ade:	58 0c       	cp.w	r12,0
80001ae0:	c6 51       	brne	80001baa <_free_r+0x192>
80001ae2:	e0 48 01 ff 	cp.w	r8,511
80001ae6:	e0 8b 00 13 	brhi	80001b0c <_free_r+0xf4>
80001aea:	a3 98       	lsr	r8,0x3
80001aec:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001af0:	72 2b       	ld.w	r11,r9[0x8]
80001af2:	8d 39       	st.w	r6[0xc],r9
80001af4:	8d 2b       	st.w	r6[0x8],r11
80001af6:	97 36       	st.w	r11[0xc],r6
80001af8:	93 26       	st.w	r9[0x8],r6
80001afa:	a3 48       	asr	r8,0x2
80001afc:	74 19       	ld.w	r9,r10[0x4]
80001afe:	30 1b       	mov	r11,1
80001b00:	f6 08 09 48 	lsl	r8,r11,r8
80001b04:	f3 e8 10 08 	or	r8,r9,r8
80001b08:	95 18       	st.w	r10[0x4],r8
80001b0a:	c5 08       	rjmp	80001baa <_free_r+0x192>
80001b0c:	f0 0b 16 09 	lsr	r11,r8,0x9
80001b10:	58 4b       	cp.w	r11,4
80001b12:	e0 8b 00 06 	brhi	80001b1e <_free_r+0x106>
80001b16:	f0 0b 16 06 	lsr	r11,r8,0x6
80001b1a:	2c 8b       	sub	r11,-56
80001b1c:	c2 b8       	rjmp	80001b72 <_free_r+0x15a>
80001b1e:	59 4b       	cp.w	r11,20
80001b20:	e0 8b 00 04 	brhi	80001b28 <_free_r+0x110>
80001b24:	2a 5b       	sub	r11,-91
80001b26:	c2 68       	rjmp	80001b72 <_free_r+0x15a>
80001b28:	e0 4b 00 54 	cp.w	r11,84
80001b2c:	e0 8b 00 06 	brhi	80001b38 <_free_r+0x120>
80001b30:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001b34:	29 2b       	sub	r11,-110
80001b36:	c1 e8       	rjmp	80001b72 <_free_r+0x15a>
80001b38:	e0 4b 01 54 	cp.w	r11,340
80001b3c:	e0 8b 00 06 	brhi	80001b48 <_free_r+0x130>
80001b40:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001b44:	28 9b       	sub	r11,-119
80001b46:	c1 68       	rjmp	80001b72 <_free_r+0x15a>
80001b48:	e0 4b 05 54 	cp.w	r11,1364
80001b4c:	e0 88 00 10 	brls	80001b6c <_free_r+0x154>
80001b50:	37 eb       	mov	r11,126
80001b52:	c1 08       	rjmp	80001b72 <_free_r+0x15a>
80001b54:	80 00       	ld.sh	r0,r0[0x0]
80001b56:	18 f6       	st.b	--r12,r6
80001b58:	00 00       	add	r0,r0
80001b5a:	01 08       	ld.w	r8,r0++
80001b5c:	00 00       	add	r0,r0
80001b5e:	05 10       	ld.sh	r0,r2++
80001b60:	00 00       	add	r0,r0
80001b62:	05 20       	ld.uh	r0,r2++
80001b64:	80 00       	ld.sh	r0,r0[0x0]
80001b66:	19 70       	ld.ub	r0,--r12
80001b68:	80 00       	ld.sh	r0,r0[0x0]
80001b6a:	18 f8       	st.b	--r12,r8
80001b6c:	f0 0b 16 12 	lsr	r11,r8,0x12
80001b70:	28 4b       	sub	r11,-124
80001b72:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001b76:	78 29       	ld.w	r9,r12[0x8]
80001b78:	18 39       	cp.w	r9,r12
80001b7a:	c0 e1       	brne	80001b96 <_free_r+0x17e>
80001b7c:	74 18       	ld.w	r8,r10[0x4]
80001b7e:	a3 4b       	asr	r11,0x2
80001b80:	30 1c       	mov	r12,1
80001b82:	f8 0b 09 4b 	lsl	r11,r12,r11
80001b86:	f1 eb 10 0b 	or	r11,r8,r11
80001b8a:	12 98       	mov	r8,r9
80001b8c:	95 1b       	st.w	r10[0x4],r11
80001b8e:	c0 a8       	rjmp	80001ba2 <_free_r+0x18a>
80001b90:	72 29       	ld.w	r9,r9[0x8]
80001b92:	18 39       	cp.w	r9,r12
80001b94:	c0 60       	breq	80001ba0 <_free_r+0x188>
80001b96:	72 1a       	ld.w	r10,r9[0x4]
80001b98:	e0 1a ff fc 	andl	r10,0xfffc
80001b9c:	14 38       	cp.w	r8,r10
80001b9e:	cf 93       	brcs	80001b90 <_free_r+0x178>
80001ba0:	72 38       	ld.w	r8,r9[0xc]
80001ba2:	8d 38       	st.w	r6[0xc],r8
80001ba4:	8d 29       	st.w	r6[0x8],r9
80001ba6:	93 36       	st.w	r9[0xc],r6
80001ba8:	91 26       	st.w	r8[0x8],r6
80001baa:	0e 9c       	mov	r12,r7
80001bac:	f0 1f 00 02 	mcall	80001bb4 <_free_r+0x19c>
80001bb0:	d8 22       	popm	r4-r7,pc
80001bb2:	00 00       	add	r0,r0
80001bb4:	80 00       	ld.sh	r0,r0[0x0]
80001bb6:	18 f8       	st.b	--r12,r8

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0c a8       	st.w	r6++,r8
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	05 84       	ld.ub	r4,r2[0x0]
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	13 16       	ld.sh	r6,r9++
	...
