
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a34  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002594  00002d14  2**0
                  ALLOC
  9 .bss          00000070  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da78  00000588  00000588  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000005b0  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000af8  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000c4d3  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002056  00000000  00000000  00010333  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004438  00000000  00000000  00012389  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c08  00000000  00000000  000167c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001c5f  00000000  00000000  000173cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018bf  00000000  00000000  0001902b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00532b9e  00000000  00000000  0001a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004f8  00000000  00000000  0054d488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	12 0c       	add	r12,r9

Disassembly of section .text:

80000008 <insert_after>:
#include "include/kernel/lists.h"



int16_t insert_after( tcb * position_tcb, tcb * new_tcb )
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8

	//	printf("position tcb: %d\n", position_tcb);

	if(position_tcb != NULL && new_tcb != NULL)
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
	{
		new_tcb->nexttcb = position_tcb->nexttcb;
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
		new_tcb->prevtcb = position_tcb;
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
		position_tcb->nexttcb = new_tcb;
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
		new_tcb->nexttcb->prevtcb = new_tcb;
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
		
		result = 0;
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
	}

	return result;
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <usart_options>:
80000070:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
80000080:	00 00 00 00 74 73 6b 33 00 00 00 00 74 73 6b 35     ....tsk3....tsk5
80000090:	00 00 00 00                                         ....

80000094 <task3>:
/*************************************************************
 * Task3
 * LED2 toggles
 ************************************************************/
void task3(void)
{
80000094:	eb cd 40 80 	pushm	r7,lr
80000098:	1a 97       	mov	r7,sp
	//uint64_t currentTime = ROSA_getTickCount();
	while(1) {
		ledToggle(LED2_GPIO);
8000009a:	33 dc       	mov	r12,61
8000009c:	f0 1f 00 05 	mcall	800000b0 <task3+0x1c>
		ROSA_delay(30);
800000a0:	31 ea       	mov	r10,30
800000a2:	30 0b       	mov	r11,0
800000a4:	f0 1f 00 04 	mcall	800000b4 <task3+0x20>
		//ROSA_delayUntil(&currentTime, 30);
		
		//delay_ms(100);
		ROSA_yield();
800000a8:	f0 1f 00 04 	mcall	800000b8 <task3+0x24>
	}
800000ac:	cf 7b       	rjmp	8000009a <task3+0x6>
800000ae:	00 00       	add	r0,r0
800000b0:	80 00       	ld.sh	r0,r0[0x0]
800000b2:	0e 5c       	eor	r12,r7
800000b4:	80 00       	ld.sh	r0,r0[0x0]
800000b6:	08 30       	cp.w	r0,r4
800000b8:	80 00       	ld.sh	r0,r0[0x0]
800000ba:	09 ea       	ld.ub	r10,r4[0x6]

800000bc <task4>:
/*************************************************************
 * Task4
 * LED3 toggles
 ************************************************************/
void task4(void)
{
800000bc:	eb cd 40 80 	pushm	r7,lr
800000c0:	1a 97       	mov	r7,sp
800000c2:	20 2d       	sub	sp,8
	uint64_t current_ticks;
	current_ticks = ROSA_getTickCount(); 
800000c4:	f0 1f 00 09 	mcall	800000e8 <task4+0x2c>
800000c8:	14 98       	mov	r8,r10
800000ca:	16 99       	mov	r9,r11
800000cc:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1) {
		ledToggle(LED3_GPIO);
800000d0:	33 ec       	mov	r12,62
800000d2:	f0 1f 00 07 	mcall	800000ec <task4+0x30>
		ROSA_delayUntil(&current_ticks,500);
800000d6:	ee c8 00 08 	sub	r8,r7,8
800000da:	e0 6a 01 f4 	mov	r10,500
800000de:	30 0b       	mov	r11,0
800000e0:	10 9c       	mov	r12,r8
800000e2:	f0 1f 00 04 	mcall	800000f0 <task4+0x34>
		//ROSA_yield();
	}
800000e6:	cf 5b       	rjmp	800000d0 <task4+0x14>
800000e8:	80 00       	ld.sh	r0,r0[0x0]
800000ea:	0b 80       	ld.ub	r0,r5[0x0]
800000ec:	80 00       	ld.sh	r0,r0[0x0]
800000ee:	0e 5c       	eor	r12,r7
800000f0:	80 00       	ld.sh	r0,r0[0x0]
800000f2:	08 a0       	st.w	r4++,r0

800000f4 <task5>:
/*************************************************************
 * Task2
 * deletes task5 after some time, then turns on LED4
 ************************************************************/
void task5(void)
{
800000f4:	eb cd 40 80 	pushm	r7,lr
800000f8:	1a 97       	mov	r7,sp
	
	while(1)
	{
		//set green LED only
		
		ledOff(LED4_GPIO);
800000fa:	33 3c       	mov	r12,51
800000fc:	f0 1f 00 11 	mcall	80000140 <task5+0x4c>
		ledOn(LED5_GPIO);
80000100:	33 4c       	mov	r12,52
80000102:	f0 1f 00 11 	mcall	80000144 <task5+0x50>
		
		ROSA_taskDelete(task4_handle);
80000106:	49 18       	lddpc	r8,80000148 <task5+0x54>
80000108:	70 08       	ld.w	r8,r8[0x0]
8000010a:	10 9c       	mov	r12,r8
8000010c:	f0 1f 00 10 	mcall	8000014c <task5+0x58>
		
		//blink LED4 on board
		//ROSA_tcbUninstall(task3_handle);
		//ROSA_tcbSuspend(task3_handle);
		ROSA_delay(1000);
80000110:	e0 6a 03 e8 	mov	r10,1000
80000114:	30 0b       	mov	r11,0
80000116:	f0 1f 00 0f 	mcall	80000150 <task5+0x5c>
		
		//possibly make critical sections such that system ticks will still increment properly (if possible)
		
		
		ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 4);
8000011a:	30 48       	mov	r8,4
8000011c:	34 09       	mov	r9,64
8000011e:	48 ea       	lddpc	r10,80000154 <task5+0x60>
80000120:	48 eb       	lddpc	r11,80000158 <task5+0x64>
80000122:	48 ac       	lddpc	r12,80000148 <task5+0x54>
80000124:	f0 1f 00 0e 	mcall	8000015c <task5+0x68>
		//stop blinking LED4 on board
		//ROSA_tcbUnsuspend(task3_handle);
		//ROSA_tcbInstall(task3_handle);
		ledOff(LED5_GPIO);	//set red LED only
80000128:	33 4c       	mov	r12,52
8000012a:	f0 1f 00 06 	mcall	80000140 <task5+0x4c>
		ledOn(LED4_GPIO);
8000012e:	33 3c       	mov	r12,51
80000130:	f0 1f 00 05 	mcall	80000144 <task5+0x50>
		//delay_ms(1000);
		ROSA_delay(5000);
80000134:	e0 6a 13 88 	mov	r10,5000
80000138:	30 0b       	mov	r11,0
8000013a:	f0 1f 00 06 	mcall	80000150 <task5+0x5c>
		
		//ROSA_yield();
	}
8000013e:	cd eb       	rjmp	800000fa <task5+0x6>
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	0e 3c       	cp.w	r12,r7
80000144:	80 00       	ld.sh	r0,r0[0x0]
80000146:	0e 1c       	sub	r12,r7
80000148:	00 00       	add	r0,r0
8000014a:	05 78       	ld.ub	r8,--r2
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	07 7c       	ld.ub	r12,--r3
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	08 30       	cp.w	r0,r4
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	00 bc       	st.h	r0++,r12
80000158:	80 00       	ld.sh	r0,r0[0x0]
8000015a:	00 7c       	tst	r12,r0
8000015c:	80 00       	ld.sh	r0,r0[0x0]
8000015e:	06 b4       	st.h	r3++,r4

80000160 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
80000160:	eb cd 40 80 	pushm	r7,lr
80000164:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
80000166:	f0 1f 00 0a 	mcall	8000018c <main+0x2c>


	//ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 5);
	//ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
	ROSA_taskCreate(& task3_handle, "tsk3", task3, 0x40, 1);
8000016a:	30 18       	mov	r8,1
8000016c:	34 09       	mov	r9,64
8000016e:	48 9a       	lddpc	r10,80000190 <main+0x30>
80000170:	48 9b       	lddpc	r11,80000194 <main+0x34>
80000172:	48 ac       	lddpc	r12,80000198 <main+0x38>
80000174:	f0 1f 00 0a 	mcall	8000019c <main+0x3c>
	//ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 1);
	ROSA_taskCreate(& task5_handle, "tsk5", task5, 0x40, 1);
80000178:	30 18       	mov	r8,1
8000017a:	34 09       	mov	r9,64
8000017c:	48 9a       	lddpc	r10,800001a0 <main+0x40>
8000017e:	48 ab       	lddpc	r11,800001a4 <main+0x44>
80000180:	48 ac       	lddpc	r12,800001a8 <main+0x48>
80000182:	f0 1f 00 07 	mcall	8000019c <main+0x3c>
	
	//Start the ROSA kernel
	ROSA_start();
80000186:	f0 1f 00 0a 	mcall	800001ac <main+0x4c>
	/* Execution will never return here */
	while(1);
8000018a:	c0 08       	rjmp	8000018a <main+0x2a>
8000018c:	80 00       	ld.sh	r0,r0[0x0]
8000018e:	02 1c       	sub	r12,r1
80000190:	80 00       	ld.sh	r0,r0[0x0]
80000192:	00 94       	mov	r4,r0
80000194:	80 00       	ld.sh	r0,r0[0x0]
80000196:	00 84       	andn	r4,r0
80000198:	00 00       	add	r0,r0
8000019a:	05 74       	ld.ub	r4,--r2
8000019c:	80 00       	ld.sh	r0,r0[0x0]
8000019e:	06 b4       	st.h	r3++,r4
800001a0:	80 00       	ld.sh	r0,r0[0x0]
800001a2:	00 f4       	st.b	--r0,r4
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	00 8c       	andn	r12,r0
800001a8:	00 00       	add	r0,r0
800001aa:	05 70       	ld.ub	r0,--r2
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	09 28       	ld.uh	r8,r4++

800001b0 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800001b0:	eb cd 40 80 	pushm	r7,lr
800001b4:	1a 97       	mov	r7,sp
	interruptDisable();
800001b6:	f0 1f 00 0d 	mcall	800001e8 <ROSA_yieldFromISR+0x38>
	contextSaveFromISR();	  //Save the task context
800001ba:	f0 1f 00 0d 	mcall	800001ec <ROSA_yieldFromISR+0x3c>
	system_ticks ++;
800001be:	48 d8       	lddpc	r8,800001f0 <ROSA_yieldFromISR+0x40>
800001c0:	f0 ea 00 00 	ld.d	r10,r8[0]
800001c4:	30 18       	mov	r8,1
800001c6:	30 09       	mov	r9,0
800001c8:	f4 08 00 08 	add	r8,r10,r8
800001cc:	f6 09 00 49 	adc	r9,r11,r9
800001d0:	48 8a       	lddpc	r10,800001f0 <ROSA_yieldFromISR+0x40>
800001d2:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
800001d6:	f0 1f 00 08 	mcall	800001f4 <ROSA_yieldFromISR+0x44>
	contextRestoreFromISR();  //...and switch over to it.
800001da:	f0 1f 00 08 	mcall	800001f8 <ROSA_yieldFromISR+0x48>
	interruptEnable();
800001de:	f0 1f 00 08 	mcall	800001fc <ROSA_yieldFromISR+0x4c>
}
800001e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800001e6:	00 00       	add	r0,r0
800001e8:	80 00       	ld.sh	r0,r0[0x0]
800001ea:	1d 66       	ld.uh	r6,--lr
800001ec:	80 00       	ld.sh	r0,r0[0x0]
800001ee:	1d 7e       	ld.ub	lr,--lr
800001f0:	00 00       	add	r0,r0
800001f2:	05 68       	ld.uh	r8,--r2
800001f4:	80 00       	ld.sh	r0,r0[0x0]
800001f6:	0a 08       	add	r8,r5
800001f8:	80 00       	ld.sh	r0,r0[0x0]
800001fa:	1d b8       	ld.ub	r8,lr[0x3]
800001fc:	80 00       	ld.sh	r0,r0[0x0]
800001fe:	1d 6a       	ld.uh	r10,--lr

80000200 <usart_options>:
80000200:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
80000210:	00 00 00 00                                         ....

80000214 <IDLE_TASK>:
tcb * EXECTASK;

//Idle task creation
ROSA_taskHandle_t idle_task_handle;
void IDLE_TASK (void)
{
80000214:	eb cd 40 80 	pushm	r7,lr
80000218:	1a 97       	mov	r7,sp
	while(1);
8000021a:	c0 08       	rjmp	8000021a <IDLE_TASK+0x6>

8000021c <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
8000021c:	eb cd 40 80 	pushm	r7,lr
80000220:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
80000222:	f0 1f 00 17 	mcall	8000027c <ROSA_init+0x60>
	buttonInit();								//Buttons
80000226:	f0 1f 00 17 	mcall	80000280 <ROSA_init+0x64>
	joystickInit();								//Joystick
8000022a:	f0 1f 00 17 	mcall	80000284 <ROSA_init+0x68>
	potInit();									//Potentiometer
8000022e:	f0 1f 00 17 	mcall	80000288 <ROSA_init+0x6c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
80000232:	e0 6a 1b 00 	mov	r10,6912
80000236:	ea 1a 00 b7 	orh	r10,0xb7
8000023a:	49 5b       	lddpc	r11,8000028c <ROSA_init+0x70>
8000023c:	fe 7c 14 00 	mov	r12,-60416
80000240:	f0 1f 00 14 	mcall	80000290 <ROSA_init+0x74>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000244:	49 48       	lddpc	r8,80000294 <ROSA_init+0x78>
80000246:	30 09       	mov	r9,0
80000248:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
8000024a:	49 48       	lddpc	r8,80000298 <ROSA_init+0x7c>
8000024c:	30 09       	mov	r9,0
8000024e:	91 09       	st.w	r8[0x0],r9
	
	ROSA_taskCreate(& idle_task_handle, "idle", IDLE_TASK, 0x40, 255);
80000250:	e0 68 00 ff 	mov	r8,255
80000254:	34 09       	mov	r9,64
80000256:	49 2a       	lddpc	r10,8000029c <ROSA_init+0x80>
80000258:	49 2b       	lddpc	r11,800002a0 <ROSA_init+0x84>
8000025a:	49 3c       	lddpc	r12,800002a4 <ROSA_init+0x88>
8000025c:	f0 1f 00 13 	mcall	800002a8 <ROSA_init+0x8c>

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
80000260:	f0 1f 00 13 	mcall	800002ac <ROSA_init+0x90>
	system_ticks = 0;
80000264:	49 3a       	lddpc	r10,800002b0 <ROSA_init+0x94>
80000266:	30 08       	mov	r8,0
80000268:	30 09       	mov	r9,0
8000026a:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(1);
8000026e:	30 1c       	mov	r12,1
80000270:	f0 1f 00 11 	mcall	800002b4 <ROSA_init+0x98>
	timerStart();
80000274:	f0 1f 00 11 	mcall	800002b8 <ROSA_init+0x9c>
	//...
}
80000278:	e3 cd 80 80 	ldm	sp++,r7,pc
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	0d 90       	ld.ub	r0,r6[0x1]
80000280:	80 00       	ld.sh	r0,r0[0x0]
80000282:	0b 98       	ld.ub	r8,r5[0x1]
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	0b c0       	ld.ub	r0,r5[0x4]
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	0e 7c       	tst	r12,r7
8000028c:	80 00       	ld.sh	r0,r0[0x0]
8000028e:	02 00       	add	r0,r1
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	10 30       	cp.w	r0,r8
80000294:	00 00       	add	r0,r0
80000296:	05 50       	ld.sh	r0,--r2
80000298:	00 00       	add	r0,r0
8000029a:	05 80       	ld.ub	r0,r2[0x0]
8000029c:	80 00       	ld.sh	r0,r0[0x0]
8000029e:	02 14       	sub	r4,r1
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	02 0c       	add	r12,r1
800002a4:	00 00       	add	r0,r0
800002a6:	05 7c       	ld.ub	r12,--r2
800002a8:	80 00       	ld.sh	r0,r0[0x0]
800002aa:	06 b4       	st.h	r3++,r4
800002ac:	80 00       	ld.sh	r0,r0[0x0]
800002ae:	1d 48       	ld.w	r8,--lr
800002b0:	00 00       	add	r0,r0
800002b2:	05 68       	ld.uh	r8,--r2
800002b4:	80 00       	ld.sh	r0,r0[0x0]
800002b6:	11 54       	ld.sh	r4,--r8
800002b8:	80 00       	ld.sh	r0,r0[0x0]
800002ba:	11 82       	ld.ub	r2,r8[0x0]

800002bc <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800002bc:	eb cd 40 80 	pushm	r7,lr
800002c0:	1a 97       	mov	r7,sp
800002c2:	20 6d       	sub	sp,24
800002c4:	ef 4c ff f8 	st.w	r7[-8],r12
800002c8:	ef 4b ff f4 	st.w	r7[-12],r11
800002cc:	ef 4a ff f0 	st.w	r7[-16],r10
800002d0:	ef 49 ff ec 	st.w	r7[-20],r9
800002d4:	ef 48 ff e8 	st.w	r7[-24],r8
	interruptDisable();
800002d8:	f0 1f 00 27 	mcall	80000374 <ROSA_tcbCreate+0xb8>
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800002dc:	30 08       	mov	r8,0
800002de:	ef 48 ff fc 	st.w	r7[-4],r8
800002e2:	c1 48       	rjmp	8000030a <ROSA_tcbCreate+0x4e>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800002e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800002e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800002f0:	f4 08 00 08 	add	r8,r10,r8
800002f4:	11 88       	ld.ub	r8,r8[0x0]
800002f6:	ee fa ff f8 	ld.w	r10,r7[-8]
800002fa:	f4 09 00 09 	add	r9,r10,r9
800002fe:	b2 c8       	st.b	r9[0x4],r8
{
	interruptDisable();
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000304:	2f f8       	sub	r8,-1
80000306:	ef 48 ff fc 	st.w	r7[-4],r8
8000030a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000030e:	58 38       	cp.w	r8,3
80000310:	fe 9a ff ea 	brle	800002e4 <ROSA_tcbCreate+0x28>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
80000314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000318:	30 09       	mov	r9,0
8000031a:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
8000031c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000320:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000324:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
80000326:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000032a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000032e:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000334:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000338:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
8000033a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000033e:	a3 68       	lsl	r8,0x2
80000340:	ee f9 ff ec 	ld.w	r9,r7[-20]
80000344:	10 09       	add	r9,r8
80000346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000034a:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
8000034c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000350:	70 39       	ld.w	r9,r8[0xc]
80000352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000356:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000035c:	fc 19 00 1c 	movh	r9,0x1c
80000360:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
80000362:	ee fc ff f8 	ld.w	r12,r7[-8]
80000366:	f0 1f 00 05 	mcall	80000378 <ROSA_tcbCreate+0xbc>
	interruptEnable();
8000036a:	f0 1f 00 05 	mcall	8000037c <ROSA_tcbCreate+0xc0>
}
8000036e:	2f ad       	sub	sp,-24
80000370:	e3 cd 80 80 	ldm	sp++,r7,pc
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	1d 66       	ld.uh	r6,--lr
80000378:	80 00       	ld.sh	r0,r0[0x0]
8000037a:	09 5e       	ld.sh	lr,--r4
8000037c:	80 00       	ld.sh	r0,r0[0x0]
8000037e:	1d 6a       	ld.uh	r10,--lr

80000380 <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
80000380:	eb cd 40 80 	pushm	r7,lr
80000384:	1a 97       	mov	r7,sp
80000386:	20 2d       	sub	sp,8
80000388:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
8000038c:	f0 1f 00 35 	mcall	80000460 <ROSA_tcbInstall+0xe0>
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
80000390:	4b 58       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
80000392:	70 08       	ld.w	r8,r8[0x0]
80000394:	58 08       	cp.w	r8,0
80000396:	c1 51       	brne	800003c0 <ROSA_tcbInstall+0x40>
	{
		TCBLIST = tcbTask;
80000398:	4b 38       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
8000039a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000039e:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
800003a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003a8:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
800003aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003b2:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
800003b6:	4a d8       	lddpc	r8,80000468 <ROSA_tcbInstall+0xe8>
800003b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003bc:	91 09       	st.w	r8[0x0],r9
800003be:	c4 b8       	rjmp	80000454 <ROSA_tcbInstall+0xd4>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
800003c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c4:	f1 39 00 65 	ld.ub	r9,r8[101]
800003c8:	4a 78       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
800003ca:	70 08       	ld.w	r8,r8[0x0]
800003cc:	f1 38 00 65 	ld.ub	r8,r8[101]
800003d0:	f0 09 18 00 	cp.b	r9,r8
800003d4:	c0 d2       	brcc	800003ee <ROSA_tcbInstall+0x6e>
	{
		insert_after(TCBLIST_end, tcbTask);
800003d6:	4a 58       	lddpc	r8,80000468 <ROSA_tcbInstall+0xe8>
800003d8:	70 08       	ld.w	r8,r8[0x0]
800003da:	ee fb ff f8 	ld.w	r11,r7[-8]
800003de:	10 9c       	mov	r12,r8
800003e0:	f0 1f 00 23 	mcall	8000046c <ROSA_tcbInstall+0xec>
		TCBLIST = tcbTask;
800003e4:	4a 08       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
800003e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800003ea:	91 09       	st.w	r8[0x0],r9
800003ec:	c3 48       	rjmp	80000454 <ROSA_tcbInstall+0xd4>
	}
	else
	{
		tcb * iterator = TCBLIST;
800003ee:	49 e8       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
800003f0:	70 08       	ld.w	r8,r8[0x0]
800003f2:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
800003f6:	c0 68       	rjmp	80000402 <ROSA_tcbInstall+0x82>
		{
			iterator = iterator->nexttcb;
800003f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003fc:	70 08       	ld.w	r8,r8[0x0]
800003fe:	ef 48 ff fc 	st.w	r7[-4],r8
		TCBLIST = tcbTask;
	}
	else
	{
		tcb * iterator = TCBLIST;
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
80000402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000406:	58 08       	cp.w	r8,0
80000408:	c1 30       	breq	8000042e <ROSA_tcbInstall+0xae>
8000040a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000040e:	f1 39 00 65 	ld.ub	r9,r8[101]
80000412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000416:	f1 38 00 65 	ld.ub	r8,r8[101]
8000041a:	f0 09 18 00 	cp.b	r9,r8
8000041e:	e0 8b 00 08 	brhi	8000042e <ROSA_tcbInstall+0xae>
80000422:	49 28       	lddpc	r8,80000468 <ROSA_tcbInstall+0xe8>
80000424:	70 08       	ld.w	r8,r8[0x0]
80000426:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000042a:	10 39       	cp.w	r9,r8
8000042c:	ce 61       	brne	800003f8 <ROSA_tcbInstall+0x78>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
8000042e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000432:	71 c8       	ld.w	r8,r8[0x70]
80000434:	ee fb ff f8 	ld.w	r11,r7[-8]
80000438:	10 9c       	mov	r12,r8
8000043a:	f0 1f 00 0d 	mcall	8000046c <ROSA_tcbInstall+0xec>
		//insert_by_priority(TCBLIST, tcbTask);
		if(TCBLIST->prevtcb == tcbTask)
8000043e:	48 a8       	lddpc	r8,80000464 <ROSA_tcbInstall+0xe4>
80000440:	70 08       	ld.w	r8,r8[0x0]
80000442:	71 c9       	ld.w	r9,r8[0x70]
80000444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000448:	10 39       	cp.w	r9,r8
8000044a:	c0 51       	brne	80000454 <ROSA_tcbInstall+0xd4>
		{
			TCBLIST_end = tcbTask;
8000044c:	48 78       	lddpc	r8,80000468 <ROSA_tcbInstall+0xe8>
8000044e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000452:	91 09       	st.w	r8[0x0],r9
		}		
	}
	interruptEnable();
80000454:	f0 1f 00 07 	mcall	80000470 <ROSA_tcbInstall+0xf0>
}
80000458:	2f ed       	sub	sp,-8
8000045a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000045e:	00 00       	add	r0,r0
80000460:	80 00       	ld.sh	r0,r0[0x0]
80000462:	1d 66       	ld.uh	r6,--lr
80000464:	00 00       	add	r0,r0
80000466:	05 50       	ld.sh	r0,--r2
80000468:	00 00       	add	r0,r0
8000046a:	05 60       	ld.uh	r0,--r2
8000046c:	80 00       	ld.sh	r0,r0[0x0]
8000046e:	00 08       	add	r8,r0
80000470:	80 00       	ld.sh	r0,r0[0x0]
80000472:	1d 6a       	ld.uh	r10,--lr

80000474 <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
80000474:	eb cd 40 80 	pushm	r7,lr
80000478:	1a 97       	mov	r7,sp
8000047a:	20 1d       	sub	sp,4
8000047c:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
80000480:	f0 1f 00 22 	mcall	80000508 <ROSA_tcbUninstall+0x94>
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
80000484:	4a 28       	lddpc	r8,8000050c <ROSA_tcbUninstall+0x98>
80000486:	70 09       	ld.w	r9,r8[0x0]
80000488:	4a 28       	lddpc	r8,80000510 <ROSA_tcbUninstall+0x9c>
8000048a:	70 08       	ld.w	r8,r8[0x0]
8000048c:	10 39       	cp.w	r9,r8
8000048e:	c0 81       	brne	8000049e <ROSA_tcbUninstall+0x2a>
	{
		TCBLIST = NULL;
80000490:	49 f8       	lddpc	r8,8000050c <ROSA_tcbUninstall+0x98>
80000492:	30 09       	mov	r9,0
80000494:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
80000496:	49 f8       	lddpc	r8,80000510 <ROSA_tcbUninstall+0x9c>
80000498:	30 09       	mov	r9,0
8000049a:	91 09       	st.w	r8[0x0],r9
8000049c:	c3 08       	rjmp	800004fc <ROSA_tcbUninstall+0x88>
	}
	else 
	{
		if(TCBLIST_end == tcbTask)
8000049e:	49 d8       	lddpc	r8,80000510 <ROSA_tcbUninstall+0x9c>
800004a0:	70 09       	ld.w	r9,r8[0x0]
800004a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a6:	10 39       	cp.w	r9,r8
800004a8:	c0 71       	brne	800004b6 <ROSA_tcbUninstall+0x42>
		{
			TCBLIST_end = tcbTask->prevtcb;
800004aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ae:	71 c9       	ld.w	r9,r8[0x70]
800004b0:	49 88       	lddpc	r8,80000510 <ROSA_tcbUninstall+0x9c>
800004b2:	91 09       	st.w	r8[0x0],r9
800004b4:	c0 c8       	rjmp	800004cc <ROSA_tcbUninstall+0x58>
		}
		else if(TCBLIST == tcbTask)
800004b6:	49 68       	lddpc	r8,8000050c <ROSA_tcbUninstall+0x98>
800004b8:	70 09       	ld.w	r9,r8[0x0]
800004ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004be:	10 39       	cp.w	r9,r8
800004c0:	c0 61       	brne	800004cc <ROSA_tcbUninstall+0x58>
		{
			TCBLIST = tcbTask->nexttcb;
800004c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004c6:	70 09       	ld.w	r9,r8[0x0]
800004c8:	49 18       	lddpc	r8,8000050c <ROSA_tcbUninstall+0x98>
800004ca:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
800004cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d0:	71 c8       	ld.w	r8,r8[0x70]
800004d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004d6:	72 09       	ld.w	r9,r9[0x0]
800004d8:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
800004da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004de:	70 08       	ld.w	r8,r8[0x0]
800004e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004e4:	73 c9       	ld.w	r9,r9[0x70]
800004e6:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
800004ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ee:	30 09       	mov	r9,0
800004f0:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
800004f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f6:	30 09       	mov	r9,0
800004f8:	f1 49 00 70 	st.w	r8[112],r9
	}
	interruptEnable();
800004fc:	f0 1f 00 06 	mcall	80000514 <ROSA_tcbUninstall+0xa0>
}
80000500:	2f fd       	sub	sp,-4
80000502:	e3 cd 80 80 	ldm	sp++,r7,pc
80000506:	00 00       	add	r0,r0
80000508:	80 00       	ld.sh	r0,r0[0x0]
8000050a:	1d 66       	ld.uh	r6,--lr
8000050c:	00 00       	add	r0,r0
8000050e:	05 50       	ld.sh	r0,--r2
80000510:	00 00       	add	r0,r0
80000512:	05 60       	ld.uh	r0,--r2
80000514:	80 00       	ld.sh	r0,r0[0x0]
80000516:	1d 6a       	ld.uh	r10,--lr

80000518 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
80000518:	eb cd 40 80 	pushm	r7,lr
8000051c:	1a 97       	mov	r7,sp
8000051e:	20 2d       	sub	sp,8
80000520:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000524:	f0 1f 00 36 	mcall	800005fc <ROSA_tcbSuspend+0xe4>
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
80000528:	4b 68       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
8000052a:	70 08       	ld.w	r8,r8[0x0]
8000052c:	58 08       	cp.w	r8,0
8000052e:	c1 51       	brne	80000558 <ROSA_tcbSuspend+0x40>
	{
		SUSPENDEDLIST = tcbTask;
80000530:	4b 48       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
80000532:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000536:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000538:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000053c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000540:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
80000542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000054a:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
8000054e:	4a e8       	lddpc	r8,80000604 <ROSA_tcbSuspend+0xec>
80000550:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000554:	91 09       	st.w	r8[0x0],r9
80000556:	c4 d8       	rjmp	800005f0 <ROSA_tcbSuspend+0xd8>
	}
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
80000558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000055c:	f0 ea 00 68 	ld.d	r10,r8[104]
80000560:	4a 88       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
80000562:	70 08       	ld.w	r8,r8[0x0]
80000564:	f0 e8 00 68 	ld.d	r8,r8[104]
80000568:	10 3a       	cp.w	r10,r8
8000056a:	f2 0b 13 00 	cpc	r11,r9
8000056e:	c0 d2       	brcc	80000588 <ROSA_tcbSuspend+0x70>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
80000570:	4a 58       	lddpc	r8,80000604 <ROSA_tcbSuspend+0xec>
80000572:	70 08       	ld.w	r8,r8[0x0]
80000574:	ee fb ff f8 	ld.w	r11,r7[-8]
80000578:	10 9c       	mov	r12,r8
8000057a:	f0 1f 00 24 	mcall	80000608 <ROSA_tcbSuspend+0xf0>
		SUSPENDEDLIST = tcbTask;
8000057e:	4a 18       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
80000580:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000584:	91 09       	st.w	r8[0x0],r9
80000586:	c3 58       	rjmp	800005f0 <ROSA_tcbSuspend+0xd8>
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
80000588:	49 e8       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
8000058a:	70 08       	ld.w	r8,r8[0x0]
8000058c:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
80000590:	c0 68       	rjmp	8000059c <ROSA_tcbSuspend+0x84>
		{
			iterator = iterator->nexttcb;
80000592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000596:	70 08       	ld.w	r8,r8[0x0]
80000598:	ef 48 ff fc 	st.w	r7[-4],r8
		SUSPENDEDLIST = tcbTask;
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time && iterator!=SUSPENDEDLIST_end)
8000059c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a0:	58 08       	cp.w	r8,0
800005a2:	c1 40       	breq	800005ca <ROSA_tcbSuspend+0xb2>
800005a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a8:	f0 ea 00 68 	ld.d	r10,r8[104]
800005ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005b0:	f0 e8 00 68 	ld.d	r8,r8[104]
800005b4:	10 3a       	cp.w	r10,r8
800005b6:	f2 0b 13 00 	cpc	r11,r9
800005ba:	e0 8b 00 08 	brhi	800005ca <ROSA_tcbSuspend+0xb2>
800005be:	49 28       	lddpc	r8,80000604 <ROSA_tcbSuspend+0xec>
800005c0:	70 08       	ld.w	r8,r8[0x0]
800005c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005c6:	10 39       	cp.w	r9,r8
800005c8:	ce 51       	brne	80000592 <ROSA_tcbSuspend+0x7a>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
800005ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ce:	71 c8       	ld.w	r8,r8[0x70]
800005d0:	ee fb ff f8 	ld.w	r11,r7[-8]
800005d4:	10 9c       	mov	r12,r8
800005d6:	f0 1f 00 0d 	mcall	80000608 <ROSA_tcbSuspend+0xf0>
		//insert_by_back_online_time(SUSPENDEDLIST, tcbTask);
		if(SUSPENDEDLIST->prevtcb == tcbTask)
800005da:	48 a8       	lddpc	r8,80000600 <ROSA_tcbSuspend+0xe8>
800005dc:	70 08       	ld.w	r8,r8[0x0]
800005de:	71 c9       	ld.w	r9,r8[0x70]
800005e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005e4:	10 39       	cp.w	r9,r8
800005e6:	c0 51       	brne	800005f0 <ROSA_tcbSuspend+0xd8>
		{
			SUSPENDEDLIST_end = tcbTask;
800005e8:	48 78       	lddpc	r8,80000604 <ROSA_tcbSuspend+0xec>
800005ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005ee:	91 09       	st.w	r8[0x0],r9
		}
	}
	interruptEnable();
800005f0:	f0 1f 00 07 	mcall	8000060c <ROSA_tcbSuspend+0xf4>
}
800005f4:	2f ed       	sub	sp,-8
800005f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800005fa:	00 00       	add	r0,r0
800005fc:	80 00       	ld.sh	r0,r0[0x0]
800005fe:	1d 66       	ld.uh	r6,--lr
80000600:	00 00       	add	r0,r0
80000602:	05 58       	ld.sh	r8,--r2
80000604:	00 00       	add	r0,r0
80000606:	05 64       	ld.uh	r4,--r2
80000608:	80 00       	ld.sh	r0,r0[0x0]
8000060a:	00 08       	add	r8,r0
8000060c:	80 00       	ld.sh	r0,r0[0x0]
8000060e:	1d 6a       	ld.uh	r10,--lr

80000610 <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
80000610:	eb cd 40 80 	pushm	r7,lr
80000614:	1a 97       	mov	r7,sp
80000616:	20 1d       	sub	sp,4
80000618:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
8000061c:	f0 1f 00 22 	mcall	800006a4 <ROSA_tcbUnsuspend+0x94>
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
80000620:	4a 28       	lddpc	r8,800006a8 <ROSA_tcbUnsuspend+0x98>
80000622:	70 09       	ld.w	r9,r8[0x0]
80000624:	4a 28       	lddpc	r8,800006ac <ROSA_tcbUnsuspend+0x9c>
80000626:	70 08       	ld.w	r8,r8[0x0]
80000628:	10 39       	cp.w	r9,r8
8000062a:	c0 81       	brne	8000063a <ROSA_tcbUnsuspend+0x2a>
	{
		SUSPENDEDLIST = NULL;
8000062c:	49 f8       	lddpc	r8,800006a8 <ROSA_tcbUnsuspend+0x98>
8000062e:	30 09       	mov	r9,0
80000630:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
80000632:	49 f8       	lddpc	r8,800006ac <ROSA_tcbUnsuspend+0x9c>
80000634:	30 09       	mov	r9,0
80000636:	91 09       	st.w	r8[0x0],r9
80000638:	c3 08       	rjmp	80000698 <ROSA_tcbUnsuspend+0x88>
	}
	else
	{
		if(SUSPENDEDLIST == tcbTask)
8000063a:	49 c8       	lddpc	r8,800006a8 <ROSA_tcbUnsuspend+0x98>
8000063c:	70 09       	ld.w	r9,r8[0x0]
8000063e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000642:	10 39       	cp.w	r9,r8
80000644:	c0 71       	brne	80000652 <ROSA_tcbUnsuspend+0x42>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
80000646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000064a:	70 09       	ld.w	r9,r8[0x0]
8000064c:	49 78       	lddpc	r8,800006a8 <ROSA_tcbUnsuspend+0x98>
8000064e:	91 09       	st.w	r8[0x0],r9
80000650:	c0 c8       	rjmp	80000668 <ROSA_tcbUnsuspend+0x58>
		}
		else if(SUSPENDEDLIST_end == tcbTask)
80000652:	49 78       	lddpc	r8,800006ac <ROSA_tcbUnsuspend+0x9c>
80000654:	70 09       	ld.w	r9,r8[0x0]
80000656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000065a:	10 39       	cp.w	r9,r8
8000065c:	c0 61       	brne	80000668 <ROSA_tcbUnsuspend+0x58>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
8000065e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000662:	71 c9       	ld.w	r9,r8[0x70]
80000664:	49 28       	lddpc	r8,800006ac <ROSA_tcbUnsuspend+0x9c>
80000666:	91 09       	st.w	r8[0x0],r9
		}
		
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
80000668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066c:	71 c8       	ld.w	r8,r8[0x70]
8000066e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000672:	72 09       	ld.w	r9,r9[0x0]
80000674:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
80000676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000067a:	70 08       	ld.w	r8,r8[0x0]
8000067c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000680:	73 c9       	ld.w	r9,r9[0x70]
80000682:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
80000686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000068a:	30 09       	mov	r9,0
8000068c:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
8000068e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000692:	30 09       	mov	r9,0
80000694:	f1 49 00 70 	st.w	r8[112],r9
	}
	interruptEnable();
80000698:	f0 1f 00 06 	mcall	800006b0 <ROSA_tcbUnsuspend+0xa0>
}
8000069c:	2f fd       	sub	sp,-4
8000069e:	e3 cd 80 80 	ldm	sp++,r7,pc
800006a2:	00 00       	add	r0,r0
800006a4:	80 00       	ld.sh	r0,r0[0x0]
800006a6:	1d 66       	ld.uh	r6,--lr
800006a8:	00 00       	add	r0,r0
800006aa:	05 58       	ld.sh	r8,--r2
800006ac:	00 00       	add	r0,r0
800006ae:	05 64       	ld.uh	r4,--r2
800006b0:	80 00       	ld.sh	r0,r0[0x0]
800006b2:	1d 6a       	ld.uh	r10,--lr

800006b4 <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
800006b4:	eb cd 40 80 	pushm	r7,lr
800006b8:	1a 97       	mov	r7,sp
800006ba:	20 7d       	sub	sp,28
800006bc:	ef 4c ff f4 	st.w	r7[-12],r12
800006c0:	ef 4b ff f0 	st.w	r7[-16],r11
800006c4:	ef 4a ff ec 	st.w	r7[-20],r10
800006c8:	ef 49 ff e8 	st.w	r7[-24],r9
800006cc:	ef 68 ff e4 	st.b	r7[-28],r8
	interruptDisable();
800006d0:	f0 1f 00 26 	mcall	80000768 <ROSA_taskCreate+0xb4>
	int16_t result = -1;
800006d4:	3f f8       	mov	r8,-1
800006d6:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
800006da:	37 4b       	mov	r11,116
800006dc:	30 1c       	mov	r12,1
800006de:	f0 1f 00 24 	mcall	8000076c <ROSA_taskCreate+0xb8>
800006e2:	18 98       	mov	r8,r12
800006e4:	10 99       	mov	r9,r8
800006e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800006ea:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
800006ec:	30 4b       	mov	r11,4
800006ee:	ee fc ff e8 	ld.w	r12,r7[-24]
800006f2:	f0 1f 00 1f 	mcall	8000076c <ROSA_taskCreate+0xb8>
800006f6:	18 98       	mov	r8,r12
800006f8:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
800006fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000700:	70 09       	ld.w	r9,r8[0x0]
80000702:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000706:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
8000070a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000070e:	70 09       	ld.w	r9,r8[0x0]
80000710:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000714:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
80000718:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000071c:	70 09       	ld.w	r9,r8[0x0]
8000071e:	30 18       	mov	r8,1
80000720:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
80000724:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000728:	70 0a       	ld.w	r10,r8[0x0]
8000072a:	30 08       	mov	r8,0
8000072c:	30 09       	mov	r9,0
8000072e:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
80000732:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000736:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000073a:	72 0c       	ld.w	r12,r9[0x0]
8000073c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000740:	ee fa ff ec 	ld.w	r10,r7[-20]
80000744:	ee fb ff f0 	ld.w	r11,r7[-16]
80000748:	f0 1f 00 0a 	mcall	80000770 <ROSA_taskCreate+0xbc>
	ROSA_tcbInstall(*th);
8000074c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000750:	70 08       	ld.w	r8,r8[0x0]
80000752:	10 9c       	mov	r12,r8
80000754:	f0 1f 00 08 	mcall	80000774 <ROSA_taskCreate+0xc0>
	interruptEnable();
80000758:	f0 1f 00 08 	mcall	80000778 <ROSA_taskCreate+0xc4>
	return result;
8000075c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000760:	10 9c       	mov	r12,r8
80000762:	2f 9d       	sub	sp,-28
80000764:	e3 cd 80 80 	ldm	sp++,r7,pc
80000768:	80 00       	ld.sh	r0,r0[0x0]
8000076a:	1d 66       	ld.uh	r6,--lr
8000076c:	80 00       	ld.sh	r0,r0[0x0]
8000076e:	12 8c       	andn	r12,r9
80000770:	80 00       	ld.sh	r0,r0[0x0]
80000772:	02 bc       	st.h	r1++,r12
80000774:	80 00       	ld.sh	r0,r0[0x0]
80000776:	03 80       	ld.ub	r0,r1[0x0]
80000778:	80 00       	ld.sh	r0,r0[0x0]
8000077a:	1d 6a       	ld.uh	r10,--lr

8000077c <ROSA_taskDelete>:

int16_t ROSA_taskDelete(ROSA_taskHandle_t th)
{
8000077c:	eb cd 40 80 	pushm	r7,lr
80000780:	1a 97       	mov	r7,sp
80000782:	20 2d       	sub	sp,8
80000784:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
80000788:	f0 1f 00 25 	mcall	8000081c <ROSA_taskDelete+0xa0>
	uint16_t result = -1;
8000078c:	3f f8       	mov	r8,-1
8000078e:	ef 58 ff fe 	st.h	r7[-2],r8
		
	if( th )
80000792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000796:	58 08       	cp.w	r8,0
80000798:	c3 a0       	breq	8000080c <ROSA_taskDelete+0x90>
		//{
			//TCBLIST_end = NULL;
			//TCBLIST_end = NULL;
		//}
		
		if(TCBLIST_end == th)
8000079a:	4a 28       	lddpc	r8,80000820 <ROSA_taskDelete+0xa4>
8000079c:	70 09       	ld.w	r9,r8[0x0]
8000079e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007a2:	10 39       	cp.w	r9,r8
800007a4:	c0 61       	brne	800007b0 <ROSA_taskDelete+0x34>
		{
			TCBLIST_end = th->prevtcb;
800007a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007aa:	71 c9       	ld.w	r9,r8[0x70]
800007ac:	49 d8       	lddpc	r8,80000820 <ROSA_taskDelete+0xa4>
800007ae:	91 09       	st.w	r8[0x0],r9
		}
		if(TCBLIST == th)
800007b0:	49 d8       	lddpc	r8,80000824 <ROSA_taskDelete+0xa8>
800007b2:	70 09       	ld.w	r9,r8[0x0]
800007b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b8:	10 39       	cp.w	r9,r8
800007ba:	c0 61       	brne	800007c6 <ROSA_taskDelete+0x4a>
		{
			TCBLIST = th->nexttcb;
800007bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007c0:	70 09       	ld.w	r9,r8[0x0]
800007c2:	49 98       	lddpc	r8,80000824 <ROSA_taskDelete+0xa8>
800007c4:	91 09       	st.w	r8[0x0],r9
		}
		
		th->prevtcb->nexttcb = th->nexttcb;
800007c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007ca:	71 c8       	ld.w	r8,r8[0x70]
800007cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007d0:	72 09       	ld.w	r9,r9[0x0]
800007d2:	91 09       	st.w	r8[0x0],r9
		th->nexttcb->prevtcb = th->prevtcb;
800007d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007d8:	70 08       	ld.w	r8,r8[0x0]
800007da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007de:	73 c9       	ld.w	r9,r9[0x70]
800007e0:	f1 49 00 70 	st.w	r8[112],r9
		
		free(th->dataarea - th->datasize);
800007e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007e8:	70 39       	ld.w	r9,r8[0xc]
800007ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007ee:	70 48       	ld.w	r8,r8[0x10]
800007f0:	a3 68       	lsl	r8,0x2
800007f2:	5c 38       	neg	r8
800007f4:	f2 08 00 08 	add	r8,r9,r8
800007f8:	10 9c       	mov	r12,r8
800007fa:	f0 1f 00 0c 	mcall	80000828 <ROSA_taskDelete+0xac>
		free(th);
800007fe:	ee fc ff f8 	ld.w	r12,r7[-8]
80000802:	f0 1f 00 0a 	mcall	80000828 <ROSA_taskDelete+0xac>
		
		result = 0;
80000806:	30 08       	mov	r8,0
80000808:	ef 58 ff fe 	st.h	r7[-2],r8
	}
	interruptEnable();
8000080c:	f0 1f 00 08 	mcall	8000082c <ROSA_taskDelete+0xb0>
	return result;
80000810:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000814:	10 9c       	mov	r12,r8
80000816:	2f ed       	sub	sp,-8
80000818:	e3 cd 80 80 	ldm	sp++,r7,pc
8000081c:	80 00       	ld.sh	r0,r0[0x0]
8000081e:	1d 66       	ld.uh	r6,--lr
80000820:	00 00       	add	r0,r0
80000822:	05 60       	ld.uh	r0,--r2
80000824:	00 00       	add	r0,r0
80000826:	05 50       	ld.sh	r0,--r2
80000828:	80 00       	ld.sh	r0,r0[0x0]
8000082a:	13 04       	ld.w	r4,r9++
8000082c:	80 00       	ld.sh	r0,r0[0x0]
8000082e:	1d 6a       	ld.uh	r10,--lr

80000830 <ROSA_delay>:


int16_t ROSA_delay(uint64_t ticks)
{
80000830:	eb cd 40 c0 	pushm	r6-r7,lr
80000834:	1a 97       	mov	r7,sp
80000836:	20 2d       	sub	sp,8
80000838:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
8000083c:	f0 1f 00 12 	mcall	80000884 <ROSA_delay+0x54>
	ROSA_tcbUninstall(EXECTASK);
80000840:	49 28       	lddpc	r8,80000888 <ROSA_delay+0x58>
80000842:	70 08       	ld.w	r8,r8[0x0]
80000844:	10 9c       	mov	r12,r8
80000846:	f0 1f 00 12 	mcall	8000088c <ROSA_delay+0x5c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
8000084a:	49 08       	lddpc	r8,80000888 <ROSA_delay+0x58>
8000084c:	70 06       	ld.w	r6,r8[0x0]
8000084e:	f0 1f 00 11 	mcall	80000890 <ROSA_delay+0x60>
80000852:	14 98       	mov	r8,r10
80000854:	16 99       	mov	r9,r11
80000856:	10 9a       	mov	r10,r8
80000858:	12 9b       	mov	r11,r9
8000085a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000085e:	f4 08 00 08 	add	r8,r10,r8
80000862:	f6 09 00 49 	adc	r9,r11,r9
80000866:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
8000086a:	48 88       	lddpc	r8,80000888 <ROSA_delay+0x58>
8000086c:	70 08       	ld.w	r8,r8[0x0]
8000086e:	10 9c       	mov	r12,r8
80000870:	f0 1f 00 09 	mcall	80000894 <ROSA_delay+0x64>
	interruptEnable();
80000874:	f0 1f 00 09 	mcall	80000898 <ROSA_delay+0x68>
	ROSA_yield();
80000878:	f0 1f 00 09 	mcall	8000089c <ROSA_delay+0x6c>
}
8000087c:	2f ed       	sub	sp,-8
8000087e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80000882:	00 00       	add	r0,r0
80000884:	80 00       	ld.sh	r0,r0[0x0]
80000886:	1d 66       	ld.uh	r6,--lr
80000888:	00 00       	add	r0,r0
8000088a:	05 80       	ld.ub	r0,r2[0x0]
8000088c:	80 00       	ld.sh	r0,r0[0x0]
8000088e:	04 74       	tst	r4,r2
80000890:	80 00       	ld.sh	r0,r0[0x0]
80000892:	0b 80       	ld.ub	r0,r5[0x0]
80000894:	80 00       	ld.sh	r0,r0[0x0]
80000896:	05 18       	ld.sh	r8,r2++
80000898:	80 00       	ld.sh	r0,r0[0x0]
8000089a:	1d 6a       	ld.uh	r10,--lr
8000089c:	80 00       	ld.sh	r0,r0[0x0]
8000089e:	09 ea       	ld.ub	r10,r4[0x6]

800008a0 <ROSA_delayUntil>:

int16_t ROSA_delayUntil(uint64_t* lastWakeTime, uint64_t ticks)
{
800008a0:	eb cd 40 80 	pushm	r7,lr
800008a4:	1a 97       	mov	r7,sp
800008a6:	20 3d       	sub	sp,12
800008a8:	ef 4c ff fc 	st.w	r7[-4],r12
800008ac:	ee eb ff f4 	st.d	r7[-12],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=lastWakeTime+ticks;
	//*lastWakeTime=*lastWakeTime+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
800008b0:	f0 1f 00 18 	mcall	80000910 <ROSA_delayUntil+0x70>
	ROSA_tcbUninstall(EXECTASK);
800008b4:	49 88       	lddpc	r8,80000914 <ROSA_delayUntil+0x74>
800008b6:	70 08       	ld.w	r8,r8[0x0]
800008b8:	10 9c       	mov	r12,r8
800008ba:	f0 1f 00 18 	mcall	80000918 <ROSA_delayUntil+0x78>
	EXECTASK->back_online_time=*lastWakeTime+ticks;
800008be:	49 68       	lddpc	r8,80000914 <ROSA_delayUntil+0x74>
800008c0:	70 0c       	ld.w	r12,r8[0x0]
800008c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008c6:	f0 ea 00 00 	ld.d	r10,r8[0]
800008ca:	ee e8 ff f4 	ld.d	r8,r7[-12]
800008ce:	f4 08 00 08 	add	r8,r10,r8
800008d2:	f6 09 00 49 	adc	r9,r11,r9
800008d6:	f8 e9 00 68 	st.d	r12[104],r8
	*lastWakeTime=*lastWakeTime+ticks;
800008da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008de:	f0 ea 00 00 	ld.d	r10,r8[0]
800008e2:	ee e8 ff f4 	ld.d	r8,r7[-12]
800008e6:	f4 08 00 08 	add	r8,r10,r8
800008ea:	f6 09 00 49 	adc	r9,r11,r9
800008ee:	ee fa ff fc 	ld.w	r10,r7[-4]
800008f2:	f4 e9 00 00 	st.d	r10[0],r8
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	ROSA_tcbSuspend(EXECTASK);
800008f6:	48 88       	lddpc	r8,80000914 <ROSA_delayUntil+0x74>
800008f8:	70 08       	ld.w	r8,r8[0x0]
800008fa:	10 9c       	mov	r12,r8
800008fc:	f0 1f 00 08 	mcall	8000091c <ROSA_delayUntil+0x7c>
	interruptEnable();
80000900:	f0 1f 00 08 	mcall	80000920 <ROSA_delayUntil+0x80>
	ROSA_yield();
80000904:	f0 1f 00 08 	mcall	80000924 <ROSA_delayUntil+0x84>
}
80000908:	2f dd       	sub	sp,-12
8000090a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000090e:	00 00       	add	r0,r0
80000910:	80 00       	ld.sh	r0,r0[0x0]
80000912:	1d 66       	ld.uh	r6,--lr
80000914:	00 00       	add	r0,r0
80000916:	05 80       	ld.ub	r0,r2[0x0]
80000918:	80 00       	ld.sh	r0,r0[0x0]
8000091a:	04 74       	tst	r4,r2
8000091c:	80 00       	ld.sh	r0,r0[0x0]
8000091e:	05 18       	ld.sh	r8,r2++
80000920:	80 00       	ld.sh	r0,r0[0x0]
80000922:	1d 6a       	ld.uh	r10,--lr
80000924:	80 00       	ld.sh	r0,r0[0x0]
80000926:	09 ea       	ld.ub	r10,r4[0x6]

80000928 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000928:	4b 5c       	lddpc	r12,800009fc <_yield+0xa>
	lda.w r11,EXECTASK
8000092a:	4b 6b       	lddpc	r11,80000a00 <_yield+0xe>
	ld.w r12,r12[0x0]
8000092c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000092e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000930:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000932:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000934:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000938:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000093a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000093c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000093e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000942:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000944:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000946:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000948:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000094a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000094c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000094e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000950:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000952:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000954:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000956:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000958:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000095a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000095c:	1c 9f       	mov	pc,lr

8000095e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000095e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000960:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000962:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000964:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000968:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000096c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000970:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000974:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000978:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000097c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000980:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000984:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000988:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
8000098a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
8000098c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
8000098e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000990:	1c 9f       	mov	pc,lr

80000992 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000992:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000994:	49 bc       	lddpc	r12,80000a00 <_yield+0xe>
	ld.w r12,r12[0x0]
80000996:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000998:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
8000099a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
8000099c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
8000099e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800009a0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800009a2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800009a4:	33 40       	mov	r0,52
	add r0,r12
800009a6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800009a8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800009ac:	1a 90       	mov	r0,sp
	st.w --sp,r0
800009ae:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800009b0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800009b4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800009b6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800009b8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800009ba:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800009bc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800009be:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800009c0:	1c 9f       	mov	pc,lr

800009c2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800009c2:	49 0c       	lddpc	r12,80000a00 <_yield+0xe>
	ld.w r12,r12[0x0]
800009c4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800009c6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800009c8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800009ca:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800009ce:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800009d0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800009d2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800009d4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800009d6:	33 40       	mov	r0,52
	add r0,r12
800009d8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800009da:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800009de:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
800009e0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800009e2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
800009e4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
800009e6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
800009e8:	d6 13       	rets

800009ea <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
800009ea:	d4 01       	pushm	lr
	lda.w lr,_yield
800009ec:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
800009f0:	d7 33       	scall

800009f2 <_yield>:
_yield:
	call contextSave
800009f2:	cd 0f       	rcall	80000992 <contextSave>
	call scheduler
800009f4:	f0 1f 00 04 	mcall	80000a04 <_yield+0x12>
	call contextRestore
800009f8:	ce 5f       	rcall	800009c2 <contextRestore>
800009fa:	00 00       	add	r0,r0
800009fc:	00 00       	add	r0,r0
800009fe:	05 50       	ld.sh	r0,--r2
80000a00:	00 00       	add	r0,r0
80000a02:	05 80       	ld.ub	r0,r2[0x0]
80000a04:	80 00       	ld.sh	r0,r0[0x0]
80000a06:	0a 08       	add	r8,r5

80000a08 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000a08:	eb cd 40 80 	pushm	r7,lr
80000a0c:	1a 97       	mov	r7,sp
80000a0e:	20 3d       	sub	sp,12
	interruptDisable();
80000a10:	f0 1f 00 19 	mcall	80000a74 <scheduler+0x6c>
	tcb * iterator = SUSPENDEDLIST;
80000a14:	49 98       	lddpc	r8,80000a78 <scheduler+0x70>
80000a16:	70 08       	ld.w	r8,r8[0x0]
80000a18:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
80000a1c:	f0 1f 00 18 	mcall	80000a7c <scheduler+0x74>
80000a20:	14 98       	mov	r8,r10
80000a22:	16 99       	mov	r9,r11
80000a24:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000a28:	c0 d8       	rjmp	80000a42 <scheduler+0x3a>
	{
		ROSA_tcbUnsuspend(iterator);
80000a2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80000a2e:	f0 1f 00 15 	mcall	80000a80 <scheduler+0x78>
		ROSA_tcbInstall(iterator);
80000a32:	ee fc ff f4 	ld.w	r12,r7[-12]
80000a36:	f0 1f 00 14 	mcall	80000a84 <scheduler+0x7c>
		iterator = SUSPENDEDLIST;
80000a3a:	49 08       	lddpc	r8,80000a78 <scheduler+0x70>
80000a3c:	70 08       	ld.w	r8,r8[0x0]
80000a3e:	ef 48 ff f4 	st.w	r7[-12],r8
void scheduler(void)
{
	interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000a42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a46:	58 08       	cp.w	r8,0
80000a48:	c0 c0       	breq	80000a60 <scheduler+0x58>
80000a4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a4e:	f0 ea 00 68 	ld.d	r10,r8[104]
80000a52:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000a56:	10 3a       	cp.w	r10,r8
80000a58:	f2 0b 13 00 	cpc	r11,r9
80000a5c:	fe 98 ff e7 	brls	80000a2a <scheduler+0x22>
			//iterator = NULL;
		//}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	EXECTASK=TCBLIST;
80000a60:	48 a8       	lddpc	r8,80000a88 <scheduler+0x80>
80000a62:	70 09       	ld.w	r9,r8[0x0]
80000a64:	48 a8       	lddpc	r8,80000a8c <scheduler+0x84>
80000a66:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
80000a68:	f0 1f 00 0a 	mcall	80000a90 <scheduler+0x88>
}
80000a6c:	2f dd       	sub	sp,-12
80000a6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a72:	00 00       	add	r0,r0
80000a74:	80 00       	ld.sh	r0,r0[0x0]
80000a76:	1d 66       	ld.uh	r6,--lr
80000a78:	00 00       	add	r0,r0
80000a7a:	05 58       	ld.sh	r8,--r2
80000a7c:	80 00       	ld.sh	r0,r0[0x0]
80000a7e:	0b 80       	ld.ub	r0,r5[0x0]
80000a80:	80 00       	ld.sh	r0,r0[0x0]
80000a82:	06 10       	sub	r0,r3
80000a84:	80 00       	ld.sh	r0,r0[0x0]
80000a86:	03 80       	ld.ub	r0,r1[0x0]
80000a88:	00 00       	add	r0,r0
80000a8a:	05 50       	ld.sh	r0,--r2
80000a8c:	00 00       	add	r0,r0
80000a8e:	05 80       	ld.ub	r0,r2[0x0]
80000a90:	80 00       	ld.sh	r0,r0[0x0]
80000a92:	1d 6a       	ld.uh	r10,--lr

80000a94 <C.0.9448>:
80000a94:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000aa4 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000aa4:	eb cd 40 80 	pushm	r7,lr
80000aa8:	1a 97       	mov	r7,sp
80000aaa:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000aac:	fe 78 38 00 	mov	r8,-51200
80000ab0:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ab8:	70 88       	ld.w	r8,r8[0x20]
80000aba:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000abe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ac2:	e2 18 00 10 	andl	r8,0x10,COH
80000ac6:	c0 30       	breq	80000acc <timerISR+0x28>
	{
		ROSA_yieldFromISR();
80000ac8:	f0 1f 00 03 	mcall	80000ad4 <timerISR+0x30>
	}
}
80000acc:	2f ed       	sub	sp,-8
80000ace:	e3 cd 40 80 	ldm	sp++,r7,lr
80000ad2:	d6 03       	rete
80000ad4:	80 00       	ld.sh	r0,r0[0x0]
80000ad6:	01 b0       	ld.ub	r0,r0[0x3]

80000ad8 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000ad8:	eb cd 40 80 	pushm	r7,lr
80000adc:	1a 97       	mov	r7,sp
80000ade:	20 7d       	sub	sp,28
80000ae0:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000ae4:	4a 48       	lddpc	r8,80000b74 <timerPeriodSet+0x9c>
80000ae6:	ee ca 00 18 	sub	r10,r7,24
80000aea:	10 9b       	mov	r11,r8
80000aec:	f6 e8 00 00 	ld.d	r8,r11[0]
80000af0:	f4 e9 00 00 	st.d	r10[0],r8
80000af4:	f6 e8 00 08 	ld.d	r8,r11[8]
80000af8:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000afc:	30 48       	mov	r8,4
80000afe:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000b02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b06:	20 18       	sub	r8,1
80000b08:	a3 68       	lsl	r8,0x2
80000b0a:	ee 08 00 08 	add	r8,r7,r8
80000b0e:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000b12:	e0 68 1b 00 	mov	r8,6912
80000b16:	ea 18 00 b7 	orh	r8,0xb7
80000b1a:	f0 09 0c 08 	divs	r8,r8,r9
80000b1e:	10 99       	mov	r9,r8
80000b20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000b24:	b1 39       	mul	r9,r8
80000b26:	e0 68 4d d3 	mov	r8,19923
80000b2a:	ea 18 10 62 	orh	r8,0x1062
80000b2e:	f2 08 06 48 	mulu.d	r8,r9,r8
80000b32:	f2 08 16 06 	lsr	r8,r9,0x6
80000b36:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000b3a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000b3e:	f0 1f 00 0f 	mcall	80000b78 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000b42:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b46:	f0 1f 00 0e 	mcall	80000b7c <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000b4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b52:	f2 08 02 4a 	mul	r10,r9,r8
80000b56:	e0 68 9f 81 	mov	r8,40833
80000b5a:	ea 18 16 5e 	orh	r8,0x165e
80000b5e:	f4 08 04 48 	muls.d	r8,r10,r8
80000b62:	b5 49       	asr	r9,0x14
80000b64:	f4 08 14 1f 	asr	r8,r10,0x1f
80000b68:	f2 08 01 08 	sub	r8,r9,r8
}
80000b6c:	10 9c       	mov	r12,r8
80000b6e:	2f 9d       	sub	sp,-28
80000b70:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b74:	80 00       	ld.sh	r0,r0[0x0]
80000b76:	0a 94       	mov	r4,r5
80000b78:	80 00       	ld.sh	r0,r0[0x0]
80000b7a:	11 c8       	ld.ub	r8,r8[0x4]
80000b7c:	80 00       	ld.sh	r0,r0[0x0]
80000b7e:	11 b2       	ld.ub	r2,r8[0x3]

80000b80 <ROSA_getTickCount>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t ROSA_getTickCount(void)
{
80000b80:	eb cd 40 80 	pushm	r7,lr
80000b84:	1a 97       	mov	r7,sp
	return system_ticks;
80000b86:	48 48       	lddpc	r8,80000b94 <ROSA_getTickCount+0x14>
80000b88:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b8c:	10 9a       	mov	r10,r8
80000b8e:	12 9b       	mov	r11,r9
80000b90:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b94:	00 00       	add	r0,r0
80000b96:	05 68       	ld.uh	r8,--r2

80000b98 <buttonInit>:
80000b98:	eb cd 40 80 	pushm	r7,lr
80000b9c:	1a 97       	mov	r7,sp
80000b9e:	30 1b       	mov	r11,1
80000ba0:	35 8c       	mov	r12,88
80000ba2:	f0 1f 00 07 	mcall	80000bbc <buttonInit+0x24>
80000ba6:	30 1b       	mov	r11,1
80000ba8:	35 5c       	mov	r12,85
80000baa:	f0 1f 00 05 	mcall	80000bbc <buttonInit+0x24>
80000bae:	30 1b       	mov	r11,1
80000bb0:	35 2c       	mov	r12,82
80000bb2:	f0 1f 00 03 	mcall	80000bbc <buttonInit+0x24>
80000bb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bba:	00 00       	add	r0,r0
80000bbc:	80 00       	ld.sh	r0,r0[0x0]
80000bbe:	0b f8       	ld.ub	r8,r5[0x7]

80000bc0 <joystickInit>:
80000bc0:	eb cd 40 80 	pushm	r7,lr
80000bc4:	1a 97       	mov	r7,sp
80000bc6:	30 1b       	mov	r11,1
80000bc8:	31 bc       	mov	r12,27
80000bca:	f0 1f 00 0b 	mcall	80000bf4 <joystickInit+0x34>
80000bce:	30 1b       	mov	r11,1
80000bd0:	31 9c       	mov	r12,25
80000bd2:	f0 1f 00 09 	mcall	80000bf4 <joystickInit+0x34>
80000bd6:	30 1b       	mov	r11,1
80000bd8:	31 cc       	mov	r12,28
80000bda:	f0 1f 00 07 	mcall	80000bf4 <joystickInit+0x34>
80000bde:	30 1b       	mov	r11,1
80000be0:	31 4c       	mov	r12,20
80000be2:	f0 1f 00 05 	mcall	80000bf4 <joystickInit+0x34>
80000be6:	30 1b       	mov	r11,1
80000be8:	31 ac       	mov	r12,26
80000bea:	f0 1f 00 03 	mcall	80000bf4 <joystickInit+0x34>
80000bee:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bf2:	00 00       	add	r0,r0
80000bf4:	80 00       	ld.sh	r0,r0[0x0]
80000bf6:	0b f8       	ld.ub	r8,r5[0x7]

80000bf8 <gpioInit>:
80000bf8:	eb cd 40 80 	pushm	r7,lr
80000bfc:	1a 97       	mov	r7,sp
80000bfe:	20 7d       	sub	sp,28
80000c00:	ef 4c ff ec 	st.w	r7[-20],r12
80000c04:	ef 4b ff e8 	st.w	r7[-24],r11
80000c08:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c0c:	a5 58       	asr	r8,0x5
80000c0e:	ef 48 ff f4 	st.w	r7[-12],r8
80000c12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000c16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000c1a:	ef 48 ff fc 	st.w	r7[-4],r8
80000c1e:	30 19       	mov	r9,1
80000c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c24:	f2 08 09 48 	lsl	r8,r9,r8
80000c28:	ef 48 ff f8 	st.w	r7[-8],r8
80000c2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000c30:	a9 68       	lsl	r8,0x8
80000c32:	e0 28 f0 00 	sub	r8,61440
80000c36:	ef 48 ff f0 	st.w	r7[-16],r8
80000c3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c42:	91 19       	st.w	r8[0x4],r9
80000c44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c4c:	91 69       	st.w	r8[0x18],r9
80000c4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c56:	91 a9       	st.w	r8[0x28],r9
80000c58:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000c5c:	ef 48 ff e4 	st.w	r7[-28],r8
80000c60:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c64:	58 08       	cp.w	r8,0
80000c66:	c0 60       	breq	80000c72 <gpioInit+0x7a>
80000c68:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c6c:	58 18       	cp.w	r8,1
80000c6e:	c0 90       	breq	80000c80 <gpioInit+0x88>
80000c70:	c0 f8       	rjmp	80000c8e <gpioInit+0x96>
80000c72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c7a:	f1 49 00 44 	st.w	r8[68],r9
80000c7e:	c0 e8       	rjmp	80000c9a <gpioInit+0xa2>
80000c80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c88:	f1 49 00 48 	st.w	r8[72],r9
80000c8c:	c0 78       	rjmp	80000c9a <gpioInit+0xa2>
80000c8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000c96:	f1 49 00 48 	st.w	r8[72],r9
80000c9a:	2f 9d       	sub	sp,-28
80000c9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ca0 <gpioClear>:
80000ca0:	eb cd 40 80 	pushm	r7,lr
80000ca4:	1a 97       	mov	r7,sp
80000ca6:	20 5d       	sub	sp,20
80000ca8:	ef 4c ff ec 	st.w	r7[-20],r12
80000cac:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cb0:	a5 58       	asr	r8,0x5
80000cb2:	ef 48 ff f4 	st.w	r7[-12],r8
80000cb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000cba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000cbe:	ef 48 ff fc 	st.w	r7[-4],r8
80000cc2:	30 19       	mov	r9,1
80000cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cc8:	f2 08 09 48 	lsl	r8,r9,r8
80000ccc:	ef 48 ff f8 	st.w	r7[-8],r8
80000cd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000cd4:	a9 68       	lsl	r8,0x8
80000cd6:	e0 28 f0 00 	sub	r8,61440
80000cda:	ef 48 ff f0 	st.w	r7[-16],r8
80000cde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ce2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ce6:	f1 49 00 58 	st.w	r8[88],r9
80000cea:	2f bd       	sub	sp,-20
80000cec:	e3 cd 80 80 	ldm	sp++,r7,pc

80000cf0 <gpioSet>:
80000cf0:	eb cd 40 80 	pushm	r7,lr
80000cf4:	1a 97       	mov	r7,sp
80000cf6:	20 5d       	sub	sp,20
80000cf8:	ef 4c ff ec 	st.w	r7[-20],r12
80000cfc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d00:	a5 58       	asr	r8,0x5
80000d02:	ef 48 ff f4 	st.w	r7[-12],r8
80000d06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d0e:	ef 48 ff fc 	st.w	r7[-4],r8
80000d12:	30 19       	mov	r9,1
80000d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d18:	f2 08 09 48 	lsl	r8,r9,r8
80000d1c:	ef 48 ff f8 	st.w	r7[-8],r8
80000d20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d24:	a9 68       	lsl	r8,0x8
80000d26:	e0 28 f0 00 	sub	r8,61440
80000d2a:	ef 48 ff f0 	st.w	r7[-16],r8
80000d2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d36:	f1 49 00 54 	st.w	r8[84],r9
80000d3a:	2f bd       	sub	sp,-20
80000d3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d40 <gpioToggle>:
80000d40:	eb cd 40 80 	pushm	r7,lr
80000d44:	1a 97       	mov	r7,sp
80000d46:	20 5d       	sub	sp,20
80000d48:	ef 4c ff ec 	st.w	r7[-20],r12
80000d4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d50:	a5 58       	asr	r8,0x5
80000d52:	ef 48 ff f4 	st.w	r7[-12],r8
80000d56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d5e:	ef 48 ff fc 	st.w	r7[-4],r8
80000d62:	30 19       	mov	r9,1
80000d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d68:	f2 08 09 48 	lsl	r8,r9,r8
80000d6c:	ef 48 ff f8 	st.w	r7[-8],r8
80000d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d74:	a9 68       	lsl	r8,0x8
80000d76:	e0 28 f0 00 	sub	r8,61440
80000d7a:	ef 48 ff f0 	st.w	r7[-16],r8
80000d7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000d82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000d86:	f1 49 00 5c 	st.w	r8[92],r9
80000d8a:	2f bd       	sub	sp,-20
80000d8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000d90 <ledInit>:
80000d90:	eb cd 40 80 	pushm	r7,lr
80000d94:	1a 97       	mov	r7,sp
80000d96:	20 9d       	sub	sp,36
80000d98:	49 e8       	lddpc	r8,80000e10 <ledInit+0x80>
80000d9a:	ee cb 00 24 	sub	r11,r7,36
80000d9e:	10 9a       	mov	r10,r8
80000da0:	f4 e8 00 00 	ld.d	r8,r10[0]
80000da4:	f6 e9 00 00 	st.d	r11[0],r8
80000da8:	f4 e8 00 08 	ld.d	r8,r10[8]
80000dac:	f6 e9 00 08 	st.d	r11[8],r8
80000db0:	f4 e8 00 10 	ld.d	r8,r10[16]
80000db4:	f6 e9 00 10 	st.d	r11[16],r8
80000db8:	f4 e8 00 18 	ld.d	r8,r10[24]
80000dbc:	f6 e9 00 18 	st.d	r11[24],r8
80000dc0:	30 08       	mov	r8,0
80000dc2:	ef 48 ff fc 	st.w	r7[-4],r8
80000dc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dca:	a3 68       	lsl	r8,0x2
80000dcc:	ee 08 00 08 	add	r8,r7,r8
80000dd0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000dd4:	10 9c       	mov	r12,r8
80000dd6:	f0 1f 00 10 	mcall	80000e14 <ledInit+0x84>
80000dda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000dde:	a3 68       	lsl	r8,0x2
80000de0:	ee 08 00 08 	add	r8,r7,r8
80000de4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000de8:	30 0b       	mov	r11,0
80000dea:	10 9c       	mov	r12,r8
80000dec:	f0 1f 00 0b 	mcall	80000e18 <ledInit+0x88>
80000df0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000df4:	58 78       	cp.w	r8,7
80000df6:	5f 18       	srne	r8
80000df8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000dfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e00:	2f f8       	sub	r8,-1
80000e02:	ef 48 ff fc 	st.w	r7[-4],r8
80000e06:	58 09       	cp.w	r9,0
80000e08:	cd f1       	brne	80000dc6 <ledInit+0x36>
80000e0a:	2f 7d       	sub	sp,-36
80000e0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e10:	80 00       	ld.sh	r0,r0[0x0]
80000e12:	20 00       	sub	r0,0
80000e14:	80 00       	ld.sh	r0,r0[0x0]
80000e16:	0e 3c       	cp.w	r12,r7
80000e18:	80 00       	ld.sh	r0,r0[0x0]
80000e1a:	0b f8       	ld.ub	r8,r5[0x7]

80000e1c <ledOn>:
80000e1c:	eb cd 40 80 	pushm	r7,lr
80000e20:	1a 97       	mov	r7,sp
80000e22:	20 1d       	sub	sp,4
80000e24:	ef 4c ff fc 	st.w	r7[-4],r12
80000e28:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e2c:	f0 1f 00 03 	mcall	80000e38 <ledOn+0x1c>
80000e30:	2f fd       	sub	sp,-4
80000e32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e36:	00 00       	add	r0,r0
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	0c a0       	st.w	r6++,r0

80000e3c <ledOff>:
80000e3c:	eb cd 40 80 	pushm	r7,lr
80000e40:	1a 97       	mov	r7,sp
80000e42:	20 1d       	sub	sp,4
80000e44:	ef 4c ff fc 	st.w	r7[-4],r12
80000e48:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e4c:	f0 1f 00 03 	mcall	80000e58 <ledOff+0x1c>
80000e50:	2f fd       	sub	sp,-4
80000e52:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e56:	00 00       	add	r0,r0
80000e58:	80 00       	ld.sh	r0,r0[0x0]
80000e5a:	0c f0       	st.b	--r6,r0

80000e5c <ledToggle>:
80000e5c:	eb cd 40 80 	pushm	r7,lr
80000e60:	1a 97       	mov	r7,sp
80000e62:	20 1d       	sub	sp,4
80000e64:	ef 4c ff fc 	st.w	r7[-4],r12
80000e68:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e6c:	f0 1f 00 03 	mcall	80000e78 <ledToggle+0x1c>
80000e70:	2f fd       	sub	sp,-4
80000e72:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e76:	00 00       	add	r0,r0
80000e78:	80 00       	ld.sh	r0,r0[0x0]
80000e7a:	0d 40       	ld.w	r0,--r6

80000e7c <potInit>:
80000e7c:	d3 01       	pushm	r11-r12
80000e7e:	e0 6c 10 00 	mov	r12,4096
80000e82:	ea 1c ff ff 	orh	r12,0xffff
80000e86:	31 6b       	mov	r11,22
80000e88:	99 2b       	st.w	r12[0x8],r11
80000e8a:	99 6b       	st.w	r12[0x18],r11
80000e8c:	99 6b       	st.w	r12[0x18],r11
80000e8e:	e0 6c 3c 00 	mov	r12,15360
80000e92:	ea 1c ff ff 	orh	r12,0xffff
80000e96:	30 1b       	mov	r11,1
80000e98:	99 0b       	st.w	r12[0x0],r11
80000e9a:	e0 6b 0f 1f 	mov	r11,3871
80000e9e:	b1 6b       	lsl	r11,0x10
80000ea0:	99 1b       	st.w	r12[0x4],r11
80000ea2:	30 2b       	mov	r11,2
80000ea4:	99 4b       	st.w	r12[0x10],r11
80000ea6:	d3 02       	popm	r11-r12
80000ea8:	1c 9f       	mov	pc,lr

80000eaa <potGetValue>:
80000eaa:	d1 81       	pushm	r10-r11
80000eac:	e0 6c 3c 00 	mov	r12,15360
80000eb0:	ea 1c ff ff 	orh	r12,0xffff
80000eb4:	30 2b       	mov	r11,2
80000eb6:	99 0b       	st.w	r12[0x0],r11

80000eb8 <a1>:
80000eb8:	78 7a       	ld.w	r10,r12[0x1c]
80000eba:	16 7a       	tst	r10,r11
80000ebc:	cf e0       	breq	80000eb8 <a1>
80000ebe:	78 dc       	ld.w	r12,r12[0x34]
80000ec0:	d1 82       	popm	r10-r11
80000ec2:	1c 9f       	mov	pc,lr

80000ec4 <usartReset>:
80000ec4:	eb cd 40 80 	pushm	r7,lr
80000ec8:	1a 97       	mov	r7,sp
80000eca:	20 3d       	sub	sp,12
80000ecc:	ef 4c ff f8 	st.w	r7[-8],r12
80000ed0:	f0 1f 00 16 	mcall	80000f28 <usartReset+0x64>
80000ed4:	18 98       	mov	r8,r12
80000ed6:	ef 48 ff fc 	st.w	r7[-4],r8
80000eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ede:	58 08       	cp.w	r8,0
80000ee0:	c0 30       	breq	80000ee6 <usartReset+0x22>
80000ee2:	f0 1f 00 13 	mcall	80000f2c <usartReset+0x68>
80000ee6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eea:	3f f8       	mov	r8,-1
80000eec:	93 38       	st.w	r9[0xc],r8
80000eee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ef2:	70 58       	ld.w	r8,r8[0x14]
80000ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ef8:	58 08       	cp.w	r8,0
80000efa:	c0 30       	breq	80000f00 <usartReset+0x3c>
80000efc:	f0 1f 00 0d 	mcall	80000f30 <usartReset+0x6c>
80000f00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f04:	30 08       	mov	r8,0
80000f06:	93 18       	st.w	r9[0x4],r8
80000f08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f0c:	30 08       	mov	r8,0
80000f0e:	93 98       	st.w	r9[0x24],r8
80000f10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f14:	30 08       	mov	r8,0
80000f16:	93 a8       	st.w	r9[0x28],r8
80000f18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f1c:	ea 68 61 0c 	mov	r8,680204
80000f20:	93 08       	st.w	r9[0x0],r8
80000f22:	2f dd       	sub	sp,-12
80000f24:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f28:	80 00       	ld.sh	r0,r0[0x0]
80000f2a:	1d 6e       	ld.uh	lr,--lr
80000f2c:	80 00       	ld.sh	r0,r0[0x0]
80000f2e:	1d 66       	ld.uh	r6,--lr
80000f30:	80 00       	ld.sh	r0,r0[0x0]
80000f32:	1d 6a       	ld.uh	r10,--lr

80000f34 <usartSetBaudrate>:
80000f34:	eb cd 40 80 	pushm	r7,lr
80000f38:	1a 97       	mov	r7,sp
80000f3a:	20 bd       	sub	sp,44
80000f3c:	ef 4c ff ec 	st.w	r7[-20],r12
80000f40:	ef 4b ff e8 	st.w	r7[-24],r11
80000f44:	ef 4a ff e4 	st.w	r7[-28],r10
80000f48:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f4c:	f0 09 15 04 	lsl	r9,r8,0x4
80000f50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f54:	10 39       	cp.w	r9,r8
80000f56:	e0 8b 00 06 	brhi	80000f62 <usartSetBaudrate+0x2e>
80000f5a:	31 09       	mov	r9,16
80000f5c:	ef 49 ff d4 	st.w	r7[-44],r9
80000f60:	c0 48       	rjmp	80000f68 <usartSetBaudrate+0x34>
80000f62:	30 88       	mov	r8,8
80000f64:	ef 48 ff d4 	st.w	r7[-44],r8
80000f68:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000f6c:	ef 49 ff f0 	st.w	r7[-16],r9
80000f70:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000f74:	f0 0a 15 03 	lsl	r10,r8,0x3
80000f78:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f7c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f80:	f2 08 02 48 	mul	r8,r9,r8
80000f84:	a1 98       	lsr	r8,0x1
80000f86:	10 0a       	add	r10,r8
80000f88:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000f8c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000f90:	f2 08 02 48 	mul	r8,r9,r8
80000f94:	f4 08 0d 08 	divu	r8,r10,r8
80000f98:	ef 48 ff f4 	st.w	r7[-12],r8
80000f9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fa0:	a3 98       	lsr	r8,0x3
80000fa2:	ef 48 ff f8 	st.w	r7[-8],r8
80000fa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000faa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000fae:	ef 48 ff fc 	st.w	r7[-4],r8
80000fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fb6:	58 08       	cp.w	r8,0
80000fb8:	c0 70       	breq	80000fc6 <usartSetBaudrate+0x92>
80000fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000fbe:	e0 48 ff ff 	cp.w	r8,65535
80000fc2:	e0 88 00 06 	brls	80000fce <usartSetBaudrate+0x9a>
80000fc6:	30 18       	mov	r8,1
80000fc8:	ef 48 ff d8 	st.w	r7[-40],r8
80000fcc:	c2 c8       	rjmp	80001024 <usartSetBaudrate+0xf0>
80000fce:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fd2:	70 18       	ld.w	r8,r8[0x4]
80000fd4:	10 99       	mov	r9,r8
80000fd6:	e4 19 ff f7 	andh	r9,0xfff7
80000fda:	e0 19 fe cf 	andl	r9,0xfecf
80000fde:	ef 49 ff dc 	st.w	r7[-36],r9
80000fe2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fe6:	59 08       	cp.w	r8,16
80000fe8:	c0 60       	breq	80000ff4 <usartSetBaudrate+0xc0>
80000fea:	e8 68 00 00 	mov	r8,524288
80000fee:	ef 48 ff e0 	st.w	r7[-32],r8
80000ff2:	c0 48       	rjmp	80000ffa <usartSetBaudrate+0xc6>
80000ff4:	30 09       	mov	r9,0
80000ff6:	ef 49 ff e0 	st.w	r7[-32],r9
80000ffa:	ee f9 ff dc 	ld.w	r9,r7[-36]
80000ffe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001002:	10 49       	or	r9,r8
80001004:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001008:	91 19       	st.w	r8[0x4],r9
8000100a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000100e:	f0 09 15 10 	lsl	r9,r8,0x10
80001012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001016:	10 49       	or	r9,r8
80001018:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000101c:	91 89       	st.w	r8[0x20],r9
8000101e:	30 09       	mov	r9,0
80001020:	ef 49 ff d8 	st.w	r7[-40],r9
80001024:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001028:	10 9c       	mov	r12,r8
8000102a:	2f 5d       	sub	sp,-44
8000102c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001030 <usartInit>:
80001030:	eb cd 40 80 	pushm	r7,lr
80001034:	1a 97       	mov	r7,sp
80001036:	20 4d       	sub	sp,16
80001038:	ef 4c ff f8 	st.w	r7[-8],r12
8000103c:	ef 4b ff f4 	st.w	r7[-12],r11
80001040:	ef 4a ff f0 	st.w	r7[-16],r10
80001044:	fe 78 10 00 	mov	r8,-61440
80001048:	ef 48 ff fc 	st.w	r7[-4],r8
8000104c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001050:	30 18       	mov	r8,1
80001052:	93 28       	st.w	r9[0x8],r8
80001054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80001058:	30 28       	mov	r8,2
8000105a:	93 28       	st.w	r9[0x8],r8
8000105c:	ee fc ff f8 	ld.w	r12,r7[-8]
80001060:	f0 1f 00 3b 	mcall	8000114c <usartInit+0x11c>
80001064:	ee f9 ff f0 	ld.w	r9,r7[-16]
80001068:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000106c:	70 08       	ld.w	r8,r8[0x0]
8000106e:	12 9a       	mov	r10,r9
80001070:	10 9b       	mov	r11,r8
80001072:	ee fc ff f8 	ld.w	r12,r7[-8]
80001076:	f0 1f 00 37 	mcall	80001150 <usartInit+0x120>
8000107a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000107e:	11 c9       	ld.ub	r9,r8[0x4]
80001080:	30 98       	mov	r8,9
80001082:	f0 09 18 00 	cp.b	r9,r8
80001086:	c0 a1       	brne	8000109a <usartInit+0x6a>
80001088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000108c:	70 18       	ld.w	r8,r8[0x4]
8000108e:	10 99       	mov	r9,r8
80001090:	b1 b9       	sbr	r9,0x11
80001092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001096:	91 19       	st.w	r8[0x4],r9
80001098:	c0 d8       	rjmp	800010b2 <usartInit+0x82>
8000109a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000109e:	70 19       	ld.w	r9,r8[0x4]
800010a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010a4:	11 c8       	ld.ub	r8,r8[0x4]
800010a6:	20 58       	sub	r8,5
800010a8:	a7 68       	lsl	r8,0x6
800010aa:	10 49       	or	r9,r8
800010ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b0:	91 19       	st.w	r8[0x4],r9
800010b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010b6:	70 1a       	ld.w	r10,r8[0x4]
800010b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010bc:	11 d8       	ld.ub	r8,r8[0x5]
800010be:	f0 09 15 09 	lsl	r9,r8,0x9
800010c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010c6:	f1 38 00 08 	ld.ub	r8,r8[8]
800010ca:	af 68       	lsl	r8,0xe
800010cc:	f3 e8 10 08 	or	r8,r9,r8
800010d0:	f5 e8 10 09 	or	r9,r10,r8
800010d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010d8:	91 19       	st.w	r8[0x4],r9
800010da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010de:	90 39       	ld.sh	r9,r8[0x6]
800010e0:	30 28       	mov	r8,2
800010e2:	f0 09 19 00 	cp.h	r9,r8
800010e6:	e0 88 00 14 	brls	8000110e <usartInit+0xde>
800010ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010ee:	70 18       	ld.w	r8,r8[0x4]
800010f0:	10 99       	mov	r9,r8
800010f2:	ad b9       	sbr	r9,0xd
800010f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800010f8:	91 19       	st.w	r8[0x4],r9
800010fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800010fe:	90 38       	ld.sh	r8,r8[0x6]
80001100:	5c 78       	castu.h	r8
80001102:	20 28       	sub	r8,2
80001104:	10 99       	mov	r9,r8
80001106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000110a:	91 a9       	st.w	r8[0x28],r9
8000110c:	c0 d8       	rjmp	80001126 <usartInit+0xf6>
8000110e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001112:	70 19       	ld.w	r9,r8[0x4]
80001114:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001118:	90 38       	ld.sh	r8,r8[0x6]
8000111a:	5c 78       	castu.h	r8
8000111c:	ad 68       	lsl	r8,0xc
8000111e:	10 49       	or	r9,r8
80001120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001124:	91 19       	st.w	r8[0x4],r9
80001126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000112a:	70 18       	ld.w	r8,r8[0x4]
8000112c:	10 99       	mov	r9,r8
8000112e:	e0 19 ff f0 	andl	r9,0xfff0
80001132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001136:	91 19       	st.w	r8[0x4],r9
80001138:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000113c:	35 08       	mov	r8,80
8000113e:	93 08       	st.w	r9[0x0],r8
80001140:	30 08       	mov	r8,0
80001142:	10 9c       	mov	r12,r8
80001144:	2f cd       	sub	sp,-16
80001146:	e3 cd 80 80 	ldm	sp++,r7,pc
8000114a:	00 00       	add	r0,r0
8000114c:	80 00       	ld.sh	r0,r0[0x0]
8000114e:	0e c4       	st.b	r7++,r4
80001150:	80 00       	ld.sh	r0,r0[0x0]
80001152:	0f 34       	ld.ub	r4,r7++

80001154 <timerInit>:
80001154:	d5 01       	pushm	r11,lr
80001156:	d2 01       	pushm	r12
80001158:	f0 1f 00 28 	mcall	800011f8 <timerClearInterrupt+0x10>
8000115c:	f0 1f 00 28 	mcall	800011fc <timerClearInterrupt+0x14>
80001160:	e0 6c 38 00 	mov	r12,14336
80001164:	ea 1c ff ff 	orh	r12,0xffff
80001168:	e0 6b c0 00 	mov	r11,49152
8000116c:	ea 1b 00 00 	orh	r11,0x0
80001170:	99 1b       	st.w	r12[0x4],r11
80001172:	30 1b       	mov	r11,1
80001174:	a5 6b       	lsl	r11,0x4
80001176:	99 9b       	st.w	r12[0x24],r11
80001178:	d2 02       	popm	r12
8000117a:	f0 1f 00 22 	mcall	80001200 <timerClearInterrupt+0x18>
8000117e:	d5 02       	popm	r11,lr
80001180:	1c 9f       	mov	pc,lr

80001182 <timerReset>:
80001182:	d3 01       	pushm	r11-r12
80001184:	e0 6c 38 00 	mov	r12,14336
80001188:	ea 1c ff ff 	orh	r12,0xffff
8000118c:	30 5b       	mov	r11,5
8000118e:	99 0b       	st.w	r12[0x0],r11
80001190:	e0 6b 00 08 	mov	r11,8
80001194:	ea 1b 00 00 	orh	r11,0x0
80001198:	76 0b       	ld.w	r11,r11[0x0]
8000119a:	99 7b       	st.w	r12[0x1c],r11
8000119c:	d3 02       	popm	r11-r12
8000119e:	1c 9f       	mov	pc,lr

800011a0 <timerStop>:
800011a0:	d3 01       	pushm	r11-r12
800011a2:	e0 6c 38 00 	mov	r12,14336
800011a6:	ea 1c ff ff 	orh	r12,0xffff
800011aa:	30 2b       	mov	r11,2
800011ac:	99 0b       	st.w	r12[0x0],r11
800011ae:	d3 02       	popm	r11-r12
800011b0:	1c 9f       	mov	pc,lr

800011b2 <timerRCSet>:
800011b2:	d3 01       	pushm	r11-r12
800011b4:	49 4b       	lddpc	r11,80001204 <timerClearInterrupt+0x1c>
800011b6:	97 0c       	st.w	r11[0x0],r12
800011b8:	e0 6c 38 00 	mov	r12,14336
800011bc:	ea 1c ff ff 	orh	r12,0xffff
800011c0:	76 0b       	ld.w	r11,r11[0x0]
800011c2:	99 7b       	st.w	r12[0x1c],r11
800011c4:	d3 02       	popm	r11-r12
800011c6:	1c 9f       	mov	pc,lr

800011c8 <timerPrescaleSet>:
800011c8:	d3 81       	pushm	r10-r12
800011ca:	49 0b       	lddpc	r11,80001208 <timerClearInterrupt+0x20>
800011cc:	97 0c       	st.w	r11[0x0],r12
800011ce:	e0 6c 38 00 	mov	r12,14336
800011d2:	ea 1c ff ff 	orh	r12,0xffff
800011d6:	78 1a       	ld.w	r10,r12[0x4]
800011d8:	3f 8b       	mov	r11,-8
800011da:	16 6a       	and	r10,r11
800011dc:	48 bb       	lddpc	r11,80001208 <timerClearInterrupt+0x20>
800011de:	76 0b       	ld.w	r11,r11[0x0]
800011e0:	14 4b       	or	r11,r10
800011e2:	99 1b       	st.w	r12[0x4],r11
800011e4:	d3 82       	popm	r10-r12
800011e6:	1c 9f       	mov	pc,lr

800011e8 <timerClearInterrupt>:
800011e8:	d2 01       	pushm	r12
800011ea:	e0 6c 38 00 	mov	r12,14336
800011ee:	ea 1c ff ff 	orh	r12,0xffff
800011f2:	78 8c       	ld.w	r12,r12[0x20]
800011f4:	d2 02       	popm	r12
800011f6:	1c 9f       	mov	pc,lr
800011f8:	80 00       	ld.sh	r0,r0[0x0]
800011fa:	1d 66       	ld.uh	r6,--lr
800011fc:	80 00       	ld.sh	r0,r0[0x0]
800011fe:	11 e8       	ld.ub	r8,r8[0x6]
80001200:	80 00       	ld.sh	r0,r0[0x0]
80001202:	0a d8       	st.w	--r5,r8
80001204:	00 00       	add	r0,r0
80001206:	00 08       	add	r8,r0
80001208:	00 00       	add	r0,r0
8000120a:	00 0c       	add	r12,r0

8000120c <_stext>:
8000120c:	49 7d       	lddpc	sp,80001268 <udata_end+0x4>
8000120e:	49 80       	lddpc	r0,8000126c <udata_end+0x8>
80001210:	1a d0       	st.w	--sp,r0
80001212:	e5 cd 20 00 	ldmts	sp,sp
80001216:	1b 00       	ld.w	r0,sp++
80001218:	49 60       	lddpc	r0,80001270 <udata_end+0xc>
8000121a:	e3 b0 00 01 	mtsr	0x4,r0
8000121e:	d5 53       	csrf	0x15
80001220:	e0 6c 0c 00 	mov	r12,3072
80001224:	ea 1c ff ff 	orh	r12,0xffff
80001228:	e0 6b 01 07 	mov	r11,263
8000122c:	99 ab       	st.w	r12[0x28],r11
8000122e:	30 4b       	mov	r11,4
80001230:	99 0b       	st.w	r12[0x0],r11
80001232:	e0 6a 00 80 	mov	r10,128

80001236 <xw8>:
80001236:	79 5b       	ld.w	r11,r12[0x54]
80001238:	14 7b       	tst	r11,r10
8000123a:	cf e0       	breq	80001236 <xw8>
8000123c:	30 5b       	mov	r11,5
8000123e:	99 0b       	st.w	r12[0x0],r11

80001240 <idata_>:
80001240:	48 d0       	lddpc	r0,80001274 <udata_end+0x10>
80001242:	48 e1       	lddpc	r1,80001278 <udata_end+0x14>
80001244:	02 30       	cp.w	r0,r1
80001246:	c0 62       	brcc	80001252 <idata_end>
80001248:	48 d2       	lddpc	r2,8000127c <udata_end+0x18>

8000124a <idata_loop>:
8000124a:	05 04       	ld.w	r4,r2++
8000124c:	00 a4       	st.w	r0++,r4
8000124e:	02 30       	cp.w	r0,r1
80001250:	cf d3       	brcs	8000124a <idata_loop>

80001252 <idata_end>:
80001252:	48 c0       	lddpc	r0,80001280 <udata_end+0x1c>
80001254:	48 c1       	lddpc	r1,80001284 <udata_end+0x20>
80001256:	02 30       	cp.w	r0,r1
80001258:	c0 62       	brcc	80001264 <udata_end>
8000125a:	30 02       	mov	r2,0
8000125c:	30 03       	mov	r3,0

8000125e <udata_loop>:
8000125e:	00 a2       	st.w	r0++,r2
80001260:	02 30       	cp.w	r0,r1
80001262:	cf e3       	brcs	8000125e <udata_loop>

80001264 <udata_end>:
80001264:	48 9f       	lddpc	pc,80001288 <udata_end+0x24>
80001266:	00 00       	add	r0,r0
80001268:	00 01       	add	r1,r0
8000126a:	00 00       	add	r0,r0
8000126c:	00 00       	add	r0,r0
8000126e:	f0 00       	*unknown*
80001270:	80 00       	ld.sh	r0,r0[0x0]
80001272:	1c 00       	add	r0,lr
80001274:	00 00       	add	r0,r0
80001276:	00 08       	add	r8,r0
80001278:	00 00       	add	r0,r0
8000127a:	05 18       	ld.sh	r8,r2++
8000127c:	80 00       	ld.sh	r0,r0[0x0]
8000127e:	20 88       	sub	r8,8
80001280:	00 00       	add	r0,r0
80001282:	05 18       	ld.sh	r8,r2++
80001284:	00 00       	add	r0,r0
80001286:	05 88       	ld.ub	r8,r2[0x0]
80001288:	80 00       	ld.sh	r0,r0[0x0]
8000128a:	01 60       	ld.uh	r0,--r0

8000128c <calloc>:
8000128c:	d4 01       	pushm	lr
8000128e:	48 48       	lddpc	r8,8000129c <calloc+0x10>
80001290:	16 9a       	mov	r10,r11
80001292:	18 9b       	mov	r11,r12
80001294:	70 0c       	ld.w	r12,r8[0x0]
80001296:	f0 1f 00 03 	mcall	800012a0 <calloc+0x14>
8000129a:	d8 02       	popm	pc
8000129c:	00 00       	add	r0,r0
8000129e:	01 00       	ld.w	r0,r0++
800012a0:	80 00       	ld.sh	r0,r0[0x0]
800012a2:	12 a4       	st.w	r9++,r4

800012a4 <_calloc_r>:
800012a4:	d4 21       	pushm	r4-r7,lr
800012a6:	f4 0b 02 4b 	mul	r11,r10,r11
800012aa:	f0 1f 00 15 	mcall	800012fc <_calloc_r+0x58>
800012ae:	18 97       	mov	r7,r12
800012b0:	c2 30       	breq	800012f6 <_calloc_r+0x52>
800012b2:	f8 fa ff fc 	ld.w	r10,r12[-4]
800012b6:	e0 1a ff fc 	andl	r10,0xfffc
800012ba:	20 4a       	sub	r10,4
800012bc:	e0 4a 00 24 	cp.w	r10,36
800012c0:	e0 8b 00 18 	brhi	800012f0 <_calloc_r+0x4c>
800012c4:	18 98       	mov	r8,r12
800012c6:	59 3a       	cp.w	r10,19
800012c8:	e0 88 00 0f 	brls	800012e6 <_calloc_r+0x42>
800012cc:	30 09       	mov	r9,0
800012ce:	10 a9       	st.w	r8++,r9
800012d0:	10 a9       	st.w	r8++,r9
800012d2:	59 ba       	cp.w	r10,27
800012d4:	e0 88 00 09 	brls	800012e6 <_calloc_r+0x42>
800012d8:	10 a9       	st.w	r8++,r9
800012da:	10 a9       	st.w	r8++,r9
800012dc:	e0 4a 00 24 	cp.w	r10,36
800012e0:	c0 31       	brne	800012e6 <_calloc_r+0x42>
800012e2:	10 a9       	st.w	r8++,r9
800012e4:	10 a9       	st.w	r8++,r9
800012e6:	30 09       	mov	r9,0
800012e8:	10 a9       	st.w	r8++,r9
800012ea:	91 19       	st.w	r8[0x4],r9
800012ec:	91 09       	st.w	r8[0x0],r9
800012ee:	c0 48       	rjmp	800012f6 <_calloc_r+0x52>
800012f0:	30 0b       	mov	r11,0
800012f2:	f0 1f 00 04 	mcall	80001300 <_calloc_r+0x5c>
800012f6:	0e 9c       	mov	r12,r7
800012f8:	d8 22       	popm	r4-r7,pc
800012fa:	00 00       	add	r0,r0
800012fc:	80 00       	ld.sh	r0,r0[0x0]
800012fe:	13 1c       	ld.sh	r12,r9++
80001300:	80 00       	ld.sh	r0,r0[0x0]
80001302:	17 6c       	ld.uh	r12,--r11

80001304 <free>:
80001304:	d4 01       	pushm	lr
80001306:	48 48       	lddpc	r8,80001314 <free+0x10>
80001308:	18 9b       	mov	r11,r12
8000130a:	70 0c       	ld.w	r12,r8[0x0]
8000130c:	f0 1f 00 03 	mcall	80001318 <free+0x14>
80001310:	d8 02       	popm	pc
80001312:	00 00       	add	r0,r0
80001314:	00 00       	add	r0,r0
80001316:	01 00       	ld.w	r0,r0++
80001318:	80 00       	ld.sh	r0,r0[0x0]
8000131a:	18 9c       	mov	r12,r12

8000131c <_malloc_r>:
8000131c:	d4 31       	pushm	r0-r7,lr
8000131e:	f6 c8 ff f5 	sub	r8,r11,-11
80001322:	18 95       	mov	r5,r12
80001324:	10 97       	mov	r7,r8
80001326:	e0 17 ff f8 	andl	r7,0xfff8
8000132a:	59 68       	cp.w	r8,22
8000132c:	f9 b7 08 10 	movls	r7,16
80001330:	16 37       	cp.w	r7,r11
80001332:	5f 38       	srlo	r8
80001334:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001338:	c0 50       	breq	80001342 <_malloc_r+0x26>
8000133a:	30 c8       	mov	r8,12
8000133c:	99 38       	st.w	r12[0xc],r8
8000133e:	e0 8f 01 f3 	bral	80001724 <_malloc_r+0x408>
80001342:	f0 1f 00 50 	mcall	80001480 <_malloc_r+0x164>
80001346:	e0 47 01 f7 	cp.w	r7,503
8000134a:	e0 8b 00 1c 	brhi	80001382 <_malloc_r+0x66>
8000134e:	ee 03 16 03 	lsr	r3,r7,0x3
80001352:	4c d8       	lddpc	r8,80001484 <_malloc_r+0x168>
80001354:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001358:	70 36       	ld.w	r6,r8[0xc]
8000135a:	10 36       	cp.w	r6,r8
8000135c:	c0 61       	brne	80001368 <_malloc_r+0x4c>
8000135e:	ec c8 ff f8 	sub	r8,r6,-8
80001362:	70 36       	ld.w	r6,r8[0xc]
80001364:	10 36       	cp.w	r6,r8
80001366:	c0 c0       	breq	8000137e <_malloc_r+0x62>
80001368:	6c 18       	ld.w	r8,r6[0x4]
8000136a:	e0 18 ff fc 	andl	r8,0xfffc
8000136e:	6c 3a       	ld.w	r10,r6[0xc]
80001370:	ec 08 00 09 	add	r9,r6,r8
80001374:	0a 9c       	mov	r12,r5
80001376:	6c 28       	ld.w	r8,r6[0x8]
80001378:	95 28       	st.w	r10[0x8],r8
8000137a:	91 3a       	st.w	r8[0xc],r10
8000137c:	c4 68       	rjmp	80001408 <_malloc_r+0xec>
8000137e:	2f e3       	sub	r3,-2
80001380:	c4 c8       	rjmp	80001418 <_malloc_r+0xfc>
80001382:	ee 03 16 09 	lsr	r3,r7,0x9
80001386:	c0 41       	brne	8000138e <_malloc_r+0x72>
80001388:	ee 03 16 03 	lsr	r3,r7,0x3
8000138c:	c2 68       	rjmp	800013d8 <_malloc_r+0xbc>
8000138e:	58 43       	cp.w	r3,4
80001390:	e0 8b 00 06 	brhi	8000139c <_malloc_r+0x80>
80001394:	ee 03 16 06 	lsr	r3,r7,0x6
80001398:	2c 83       	sub	r3,-56
8000139a:	c1 f8       	rjmp	800013d8 <_malloc_r+0xbc>
8000139c:	59 43       	cp.w	r3,20
8000139e:	e0 8b 00 04 	brhi	800013a6 <_malloc_r+0x8a>
800013a2:	2a 53       	sub	r3,-91
800013a4:	c1 a8       	rjmp	800013d8 <_malloc_r+0xbc>
800013a6:	e0 43 00 54 	cp.w	r3,84
800013aa:	e0 8b 00 06 	brhi	800013b6 <_malloc_r+0x9a>
800013ae:	ee 03 16 0c 	lsr	r3,r7,0xc
800013b2:	29 23       	sub	r3,-110
800013b4:	c1 28       	rjmp	800013d8 <_malloc_r+0xbc>
800013b6:	e0 43 01 54 	cp.w	r3,340
800013ba:	e0 8b 00 06 	brhi	800013c6 <_malloc_r+0xaa>
800013be:	ee 03 16 0f 	lsr	r3,r7,0xf
800013c2:	28 93       	sub	r3,-119
800013c4:	c0 a8       	rjmp	800013d8 <_malloc_r+0xbc>
800013c6:	e0 43 05 54 	cp.w	r3,1364
800013ca:	e0 88 00 04 	brls	800013d2 <_malloc_r+0xb6>
800013ce:	37 e3       	mov	r3,126
800013d0:	c0 48       	rjmp	800013d8 <_malloc_r+0xbc>
800013d2:	ee 03 16 12 	lsr	r3,r7,0x12
800013d6:	28 43       	sub	r3,-124
800013d8:	4a ba       	lddpc	r10,80001484 <_malloc_r+0x168>
800013da:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800013de:	74 36       	ld.w	r6,r10[0xc]
800013e0:	c1 98       	rjmp	80001412 <_malloc_r+0xf6>
800013e2:	6c 19       	ld.w	r9,r6[0x4]
800013e4:	e0 19 ff fc 	andl	r9,0xfffc
800013e8:	f2 07 01 0b 	sub	r11,r9,r7
800013ec:	58 fb       	cp.w	r11,15
800013ee:	e0 8a 00 04 	brle	800013f6 <_malloc_r+0xda>
800013f2:	20 13       	sub	r3,1
800013f4:	c1 18       	rjmp	80001416 <_malloc_r+0xfa>
800013f6:	6c 38       	ld.w	r8,r6[0xc]
800013f8:	58 0b       	cp.w	r11,0
800013fa:	c0 b5       	brlt	80001410 <_malloc_r+0xf4>
800013fc:	6c 2a       	ld.w	r10,r6[0x8]
800013fe:	ec 09 00 09 	add	r9,r6,r9
80001402:	0a 9c       	mov	r12,r5
80001404:	91 2a       	st.w	r8[0x8],r10
80001406:	95 38       	st.w	r10[0xc],r8
80001408:	72 18       	ld.w	r8,r9[0x4]
8000140a:	a1 a8       	sbr	r8,0x0
8000140c:	93 18       	st.w	r9[0x4],r8
8000140e:	cb c8       	rjmp	80001586 <_malloc_r+0x26a>
80001410:	10 96       	mov	r6,r8
80001412:	14 36       	cp.w	r6,r10
80001414:	ce 71       	brne	800013e2 <_malloc_r+0xc6>
80001416:	2f f3       	sub	r3,-1
80001418:	49 ba       	lddpc	r10,80001484 <_malloc_r+0x168>
8000141a:	f4 cc ff f8 	sub	r12,r10,-8
8000141e:	78 26       	ld.w	r6,r12[0x8]
80001420:	18 36       	cp.w	r6,r12
80001422:	c6 e0       	breq	800014fe <_malloc_r+0x1e2>
80001424:	6c 19       	ld.w	r9,r6[0x4]
80001426:	e0 19 ff fc 	andl	r9,0xfffc
8000142a:	f2 07 01 08 	sub	r8,r9,r7
8000142e:	58 f8       	cp.w	r8,15
80001430:	e0 89 00 90 	brgt	80001550 <_malloc_r+0x234>
80001434:	99 3c       	st.w	r12[0xc],r12
80001436:	99 2c       	st.w	r12[0x8],r12
80001438:	58 08       	cp.w	r8,0
8000143a:	c0 55       	brlt	80001444 <_malloc_r+0x128>
8000143c:	ec 09 00 09 	add	r9,r6,r9
80001440:	0a 9c       	mov	r12,r5
80001442:	ce 3b       	rjmp	80001408 <_malloc_r+0xec>
80001444:	e0 49 01 ff 	cp.w	r9,511
80001448:	e0 8b 00 13 	brhi	8000146e <_malloc_r+0x152>
8000144c:	a3 99       	lsr	r9,0x3
8000144e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001452:	70 2b       	ld.w	r11,r8[0x8]
80001454:	8d 38       	st.w	r6[0xc],r8
80001456:	8d 2b       	st.w	r6[0x8],r11
80001458:	97 36       	st.w	r11[0xc],r6
8000145a:	91 26       	st.w	r8[0x8],r6
8000145c:	a3 49       	asr	r9,0x2
8000145e:	74 18       	ld.w	r8,r10[0x4]
80001460:	30 1b       	mov	r11,1
80001462:	f6 09 09 49 	lsl	r9,r11,r9
80001466:	f1 e9 10 09 	or	r9,r8,r9
8000146a:	95 19       	st.w	r10[0x4],r9
8000146c:	c4 98       	rjmp	800014fe <_malloc_r+0x1e2>
8000146e:	f2 0a 16 09 	lsr	r10,r9,0x9
80001472:	58 4a       	cp.w	r10,4
80001474:	e0 8b 00 0a 	brhi	80001488 <_malloc_r+0x16c>
80001478:	f2 0a 16 06 	lsr	r10,r9,0x6
8000147c:	2c 8a       	sub	r10,-56
8000147e:	c2 38       	rjmp	800014c4 <_malloc_r+0x1a8>
80001480:	80 00       	ld.sh	r0,r0[0x0]
80001482:	17 7a       	ld.ub	r10,--r11
80001484:	00 00       	add	r0,r0
80001486:	01 04       	ld.w	r4,r0++
80001488:	59 4a       	cp.w	r10,20
8000148a:	e0 8b 00 04 	brhi	80001492 <_malloc_r+0x176>
8000148e:	2a 5a       	sub	r10,-91
80001490:	c1 a8       	rjmp	800014c4 <_malloc_r+0x1a8>
80001492:	e0 4a 00 54 	cp.w	r10,84
80001496:	e0 8b 00 06 	brhi	800014a2 <_malloc_r+0x186>
8000149a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000149e:	29 2a       	sub	r10,-110
800014a0:	c1 28       	rjmp	800014c4 <_malloc_r+0x1a8>
800014a2:	e0 4a 01 54 	cp.w	r10,340
800014a6:	e0 8b 00 06 	brhi	800014b2 <_malloc_r+0x196>
800014aa:	f2 0a 16 0f 	lsr	r10,r9,0xf
800014ae:	28 9a       	sub	r10,-119
800014b0:	c0 a8       	rjmp	800014c4 <_malloc_r+0x1a8>
800014b2:	e0 4a 05 54 	cp.w	r10,1364
800014b6:	e0 88 00 04 	brls	800014be <_malloc_r+0x1a2>
800014ba:	37 ea       	mov	r10,126
800014bc:	c0 48       	rjmp	800014c4 <_malloc_r+0x1a8>
800014be:	f2 0a 16 12 	lsr	r10,r9,0x12
800014c2:	28 4a       	sub	r10,-124
800014c4:	4c 8b       	lddpc	r11,800015e4 <_malloc_r+0x2c8>
800014c6:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800014ca:	68 28       	ld.w	r8,r4[0x8]
800014cc:	08 38       	cp.w	r8,r4
800014ce:	c0 e1       	brne	800014ea <_malloc_r+0x1ce>
800014d0:	76 19       	ld.w	r9,r11[0x4]
800014d2:	a3 4a       	asr	r10,0x2
800014d4:	30 1e       	mov	lr,1
800014d6:	fc 0a 09 4a 	lsl	r10,lr,r10
800014da:	f3 ea 10 0a 	or	r10,r9,r10
800014de:	10 99       	mov	r9,r8
800014e0:	97 1a       	st.w	r11[0x4],r10
800014e2:	c0 a8       	rjmp	800014f6 <_malloc_r+0x1da>
800014e4:	70 28       	ld.w	r8,r8[0x8]
800014e6:	08 38       	cp.w	r8,r4
800014e8:	c0 60       	breq	800014f4 <_malloc_r+0x1d8>
800014ea:	70 1a       	ld.w	r10,r8[0x4]
800014ec:	e0 1a ff fc 	andl	r10,0xfffc
800014f0:	14 39       	cp.w	r9,r10
800014f2:	cf 93       	brcs	800014e4 <_malloc_r+0x1c8>
800014f4:	70 39       	ld.w	r9,r8[0xc]
800014f6:	8d 39       	st.w	r6[0xc],r9
800014f8:	8d 28       	st.w	r6[0x8],r8
800014fa:	91 36       	st.w	r8[0xc],r6
800014fc:	93 26       	st.w	r9[0x8],r6
800014fe:	e6 08 14 02 	asr	r8,r3,0x2
80001502:	30 1b       	mov	r11,1
80001504:	4b 84       	lddpc	r4,800015e4 <_malloc_r+0x2c8>
80001506:	f6 08 09 4b 	lsl	r11,r11,r8
8000150a:	68 18       	ld.w	r8,r4[0x4]
8000150c:	10 3b       	cp.w	r11,r8
8000150e:	e0 8b 00 6f 	brhi	800015ec <_malloc_r+0x2d0>
80001512:	f7 e8 00 09 	and	r9,r11,r8
80001516:	c0 b1       	brne	8000152c <_malloc_r+0x210>
80001518:	e0 13 ff fc 	andl	r3,0xfffc
8000151c:	a1 7b       	lsl	r11,0x1
8000151e:	2f c3       	sub	r3,-4
80001520:	c0 38       	rjmp	80001526 <_malloc_r+0x20a>
80001522:	2f c3       	sub	r3,-4
80001524:	a1 7b       	lsl	r11,0x1
80001526:	f7 e8 00 09 	and	r9,r11,r8
8000152a:	cf c0       	breq	80001522 <_malloc_r+0x206>
8000152c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001530:	06 92       	mov	r2,r3
80001532:	1c 91       	mov	r1,lr
80001534:	62 36       	ld.w	r6,r1[0xc]
80001536:	c2 e8       	rjmp	80001592 <_malloc_r+0x276>
80001538:	6c 1a       	ld.w	r10,r6[0x4]
8000153a:	e0 1a ff fc 	andl	r10,0xfffc
8000153e:	f4 07 01 08 	sub	r8,r10,r7
80001542:	58 f8       	cp.w	r8,15
80001544:	e0 8a 00 15 	brle	8000156e <_malloc_r+0x252>
80001548:	6c 3a       	ld.w	r10,r6[0xc]
8000154a:	6c 29       	ld.w	r9,r6[0x8]
8000154c:	95 29       	st.w	r10[0x8],r9
8000154e:	93 3a       	st.w	r9[0xc],r10
80001550:	0e 99       	mov	r9,r7
80001552:	ec 07 00 07 	add	r7,r6,r7
80001556:	a1 a9       	sbr	r9,0x0
80001558:	99 37       	st.w	r12[0xc],r7
8000155a:	99 27       	st.w	r12[0x8],r7
8000155c:	8d 19       	st.w	r6[0x4],r9
8000155e:	ee 08 09 08 	st.w	r7[r8],r8
80001562:	8f 2c       	st.w	r7[0x8],r12
80001564:	8f 3c       	st.w	r7[0xc],r12
80001566:	a1 a8       	sbr	r8,0x0
80001568:	0a 9c       	mov	r12,r5
8000156a:	8f 18       	st.w	r7[0x4],r8
8000156c:	c0 d8       	rjmp	80001586 <_malloc_r+0x26a>
8000156e:	6c 39       	ld.w	r9,r6[0xc]
80001570:	58 08       	cp.w	r8,0
80001572:	c0 f5       	brlt	80001590 <_malloc_r+0x274>
80001574:	ec 0a 00 0a 	add	r10,r6,r10
80001578:	74 18       	ld.w	r8,r10[0x4]
8000157a:	a1 a8       	sbr	r8,0x0
8000157c:	0a 9c       	mov	r12,r5
8000157e:	95 18       	st.w	r10[0x4],r8
80001580:	6c 28       	ld.w	r8,r6[0x8]
80001582:	93 28       	st.w	r9[0x8],r8
80001584:	91 39       	st.w	r8[0xc],r9
80001586:	f0 1f 00 19 	mcall	800015e8 <_malloc_r+0x2cc>
8000158a:	ec cc ff f8 	sub	r12,r6,-8
8000158e:	d8 32       	popm	r0-r7,pc
80001590:	12 96       	mov	r6,r9
80001592:	02 36       	cp.w	r6,r1
80001594:	cd 21       	brne	80001538 <_malloc_r+0x21c>
80001596:	2f f2       	sub	r2,-1
80001598:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000159c:	c0 30       	breq	800015a2 <_malloc_r+0x286>
8000159e:	2f 81       	sub	r1,-8
800015a0:	cc ab       	rjmp	80001534 <_malloc_r+0x218>
800015a2:	1c 98       	mov	r8,lr
800015a4:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800015a8:	c0 81       	brne	800015b8 <_malloc_r+0x29c>
800015aa:	68 19       	ld.w	r9,r4[0x4]
800015ac:	f6 08 11 ff 	rsub	r8,r11,-1
800015b0:	f3 e8 00 08 	and	r8,r9,r8
800015b4:	89 18       	st.w	r4[0x4],r8
800015b6:	c0 78       	rjmp	800015c4 <_malloc_r+0x2a8>
800015b8:	f0 c9 00 08 	sub	r9,r8,8
800015bc:	20 13       	sub	r3,1
800015be:	70 08       	ld.w	r8,r8[0x0]
800015c0:	12 38       	cp.w	r8,r9
800015c2:	cf 10       	breq	800015a4 <_malloc_r+0x288>
800015c4:	a1 7b       	lsl	r11,0x1
800015c6:	68 18       	ld.w	r8,r4[0x4]
800015c8:	10 3b       	cp.w	r11,r8
800015ca:	e0 8b 00 11 	brhi	800015ec <_malloc_r+0x2d0>
800015ce:	58 0b       	cp.w	r11,0
800015d0:	c0 e0       	breq	800015ec <_malloc_r+0x2d0>
800015d2:	04 93       	mov	r3,r2
800015d4:	c0 38       	rjmp	800015da <_malloc_r+0x2be>
800015d6:	2f c3       	sub	r3,-4
800015d8:	a1 7b       	lsl	r11,0x1
800015da:	f7 e8 00 09 	and	r9,r11,r8
800015de:	ca 71       	brne	8000152c <_malloc_r+0x210>
800015e0:	cf bb       	rjmp	800015d6 <_malloc_r+0x2ba>
800015e2:	00 00       	add	r0,r0
800015e4:	00 00       	add	r0,r0
800015e6:	01 04       	ld.w	r4,r0++
800015e8:	80 00       	ld.sh	r0,r0[0x0]
800015ea:	17 7c       	ld.ub	r12,--r11
800015ec:	68 23       	ld.w	r3,r4[0x8]
800015ee:	66 12       	ld.w	r2,r3[0x4]
800015f0:	e0 12 ff fc 	andl	r2,0xfffc
800015f4:	0e 32       	cp.w	r2,r7
800015f6:	5f 39       	srlo	r9
800015f8:	e4 07 01 08 	sub	r8,r2,r7
800015fc:	58 f8       	cp.w	r8,15
800015fe:	5f aa       	srle	r10
80001600:	f5 e9 10 09 	or	r9,r10,r9
80001604:	e0 80 00 a2 	breq	80001748 <_malloc_r+0x42c>
80001608:	4c 88       	lddpc	r8,80001728 <_malloc_r+0x40c>
8000160a:	70 01       	ld.w	r1,r8[0x0]
8000160c:	4c 88       	lddpc	r8,8000172c <_malloc_r+0x410>
8000160e:	2f 01       	sub	r1,-16
80001610:	70 08       	ld.w	r8,r8[0x0]
80001612:	0e 01       	add	r1,r7
80001614:	5b f8       	cp.w	r8,-1
80001616:	c0 40       	breq	8000161e <_malloc_r+0x302>
80001618:	28 11       	sub	r1,-127
8000161a:	e0 11 ff 80 	andl	r1,0xff80
8000161e:	02 9b       	mov	r11,r1
80001620:	0a 9c       	mov	r12,r5
80001622:	f0 1f 00 44 	mcall	80001730 <_malloc_r+0x414>
80001626:	18 96       	mov	r6,r12
80001628:	5b fc       	cp.w	r12,-1
8000162a:	c6 e0       	breq	80001706 <_malloc_r+0x3ea>
8000162c:	e6 02 00 08 	add	r8,r3,r2
80001630:	10 3c       	cp.w	r12,r8
80001632:	c0 32       	brcc	80001638 <_malloc_r+0x31c>
80001634:	08 33       	cp.w	r3,r4
80001636:	c6 81       	brne	80001706 <_malloc_r+0x3ea>
80001638:	4b fa       	lddpc	r10,80001734 <_malloc_r+0x418>
8000163a:	74 09       	ld.w	r9,r10[0x0]
8000163c:	e2 09 00 09 	add	r9,r1,r9
80001640:	95 09       	st.w	r10[0x0],r9
80001642:	10 36       	cp.w	r6,r8
80001644:	c0 a1       	brne	80001658 <_malloc_r+0x33c>
80001646:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000164a:	c0 71       	brne	80001658 <_malloc_r+0x33c>
8000164c:	e2 02 00 02 	add	r2,r1,r2
80001650:	68 28       	ld.w	r8,r4[0x8]
80001652:	a1 a2       	sbr	r2,0x0
80001654:	91 12       	st.w	r8[0x4],r2
80001656:	c4 c8       	rjmp	800016ee <_malloc_r+0x3d2>
80001658:	4b 5a       	lddpc	r10,8000172c <_malloc_r+0x410>
8000165a:	74 0b       	ld.w	r11,r10[0x0]
8000165c:	5b fb       	cp.w	r11,-1
8000165e:	c0 31       	brne	80001664 <_malloc_r+0x348>
80001660:	95 06       	st.w	r10[0x0],r6
80001662:	c0 68       	rjmp	8000166e <_malloc_r+0x352>
80001664:	ec 09 00 09 	add	r9,r6,r9
80001668:	4b 3a       	lddpc	r10,80001734 <_malloc_r+0x418>
8000166a:	10 19       	sub	r9,r8
8000166c:	95 09       	st.w	r10[0x0],r9
8000166e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001672:	f0 09 11 08 	rsub	r9,r8,8
80001676:	58 08       	cp.w	r8,0
80001678:	f2 08 17 10 	movne	r8,r9
8000167c:	ed d8 e1 06 	addne	r6,r6,r8
80001680:	28 08       	sub	r8,-128
80001682:	ec 01 00 01 	add	r1,r6,r1
80001686:	0a 9c       	mov	r12,r5
80001688:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000168c:	f0 01 01 01 	sub	r1,r8,r1
80001690:	02 9b       	mov	r11,r1
80001692:	f0 1f 00 28 	mcall	80001730 <_malloc_r+0x414>
80001696:	4a 88       	lddpc	r8,80001734 <_malloc_r+0x418>
80001698:	5b fc       	cp.w	r12,-1
8000169a:	ec 0c 17 00 	moveq	r12,r6
8000169e:	f9 b1 00 00 	moveq	r1,0
800016a2:	70 09       	ld.w	r9,r8[0x0]
800016a4:	0c 1c       	sub	r12,r6
800016a6:	89 26       	st.w	r4[0x8],r6
800016a8:	02 0c       	add	r12,r1
800016aa:	12 01       	add	r1,r9
800016ac:	a1 ac       	sbr	r12,0x0
800016ae:	91 01       	st.w	r8[0x0],r1
800016b0:	8d 1c       	st.w	r6[0x4],r12
800016b2:	08 33       	cp.w	r3,r4
800016b4:	c1 d0       	breq	800016ee <_malloc_r+0x3d2>
800016b6:	58 f2       	cp.w	r2,15
800016b8:	e0 8b 00 05 	brhi	800016c2 <_malloc_r+0x3a6>
800016bc:	30 18       	mov	r8,1
800016be:	8d 18       	st.w	r6[0x4],r8
800016c0:	c2 38       	rjmp	80001706 <_malloc_r+0x3ea>
800016c2:	30 59       	mov	r9,5
800016c4:	20 c2       	sub	r2,12
800016c6:	e0 12 ff f8 	andl	r2,0xfff8
800016ca:	e6 02 00 08 	add	r8,r3,r2
800016ce:	91 29       	st.w	r8[0x8],r9
800016d0:	91 19       	st.w	r8[0x4],r9
800016d2:	66 18       	ld.w	r8,r3[0x4]
800016d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800016d8:	e5 e8 10 08 	or	r8,r2,r8
800016dc:	87 18       	st.w	r3[0x4],r8
800016de:	58 f2       	cp.w	r2,15
800016e0:	e0 88 00 07 	brls	800016ee <_malloc_r+0x3d2>
800016e4:	e6 cb ff f8 	sub	r11,r3,-8
800016e8:	0a 9c       	mov	r12,r5
800016ea:	f0 1f 00 14 	mcall	80001738 <_malloc_r+0x41c>
800016ee:	49 49       	lddpc	r9,8000173c <_malloc_r+0x420>
800016f0:	72 0a       	ld.w	r10,r9[0x0]
800016f2:	49 18       	lddpc	r8,80001734 <_malloc_r+0x418>
800016f4:	70 08       	ld.w	r8,r8[0x0]
800016f6:	14 38       	cp.w	r8,r10
800016f8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800016fc:	49 19       	lddpc	r9,80001740 <_malloc_r+0x424>
800016fe:	72 0a       	ld.w	r10,r9[0x0]
80001700:	14 38       	cp.w	r8,r10
80001702:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001706:	68 28       	ld.w	r8,r4[0x8]
80001708:	70 18       	ld.w	r8,r8[0x4]
8000170a:	e0 18 ff fc 	andl	r8,0xfffc
8000170e:	0e 38       	cp.w	r8,r7
80001710:	5f 39       	srlo	r9
80001712:	0e 18       	sub	r8,r7
80001714:	58 f8       	cp.w	r8,15
80001716:	5f aa       	srle	r10
80001718:	f5 e9 10 09 	or	r9,r10,r9
8000171c:	c1 60       	breq	80001748 <_malloc_r+0x42c>
8000171e:	0a 9c       	mov	r12,r5
80001720:	f0 1f 00 09 	mcall	80001744 <_malloc_r+0x428>
80001724:	d8 3a       	popm	r0-r7,pc,r12=0
80001726:	00 00       	add	r0,r0
80001728:	00 00       	add	r0,r0
8000172a:	05 20       	ld.uh	r0,r2++
8000172c:	00 00       	add	r0,r0
8000172e:	05 10       	ld.sh	r0,r2++
80001730:	80 00       	ld.sh	r0,r0[0x0]
80001732:	17 80       	ld.ub	r0,r11[0x0]
80001734:	00 00       	add	r0,r0
80001736:	05 24       	ld.uh	r4,r2++
80001738:	80 00       	ld.sh	r0,r0[0x0]
8000173a:	18 9c       	mov	r12,r12
8000173c:	00 00       	add	r0,r0
8000173e:	05 1c       	ld.sh	r12,r2++
80001740:	00 00       	add	r0,r0
80001742:	05 18       	ld.sh	r8,r2++
80001744:	80 00       	ld.sh	r0,r0[0x0]
80001746:	17 7c       	ld.ub	r12,--r11
80001748:	68 26       	ld.w	r6,r4[0x8]
8000174a:	a1 a8       	sbr	r8,0x0
8000174c:	0e 99       	mov	r9,r7
8000174e:	a1 a9       	sbr	r9,0x0
80001750:	8d 19       	st.w	r6[0x4],r9
80001752:	ec 07 00 07 	add	r7,r6,r7
80001756:	0a 9c       	mov	r12,r5
80001758:	89 27       	st.w	r4[0x8],r7
8000175a:	8f 18       	st.w	r7[0x4],r8
8000175c:	f0 1f 00 03 	mcall	80001768 <_malloc_r+0x44c>
80001760:	ec cc ff f8 	sub	r12,r6,-8
80001764:	d8 32       	popm	r0-r7,pc
80001766:	00 00       	add	r0,r0
80001768:	80 00       	ld.sh	r0,r0[0x0]
8000176a:	17 7c       	ld.ub	r12,--r11

8000176c <memset>:
8000176c:	18 98       	mov	r8,r12
8000176e:	c0 38       	rjmp	80001774 <memset+0x8>
80001770:	10 cb       	st.b	r8++,r11
80001772:	20 1a       	sub	r10,1
80001774:	58 0a       	cp.w	r10,0
80001776:	cf d1       	brne	80001770 <memset+0x4>
80001778:	5e fc       	retal	r12

8000177a <__malloc_lock>:
8000177a:	5e fc       	retal	r12

8000177c <__malloc_unlock>:
8000177c:	5e fc       	retal	r12
8000177e:	d7 03       	nop

80001780 <_sbrk_r>:
80001780:	d4 21       	pushm	r4-r7,lr
80001782:	30 08       	mov	r8,0
80001784:	18 97       	mov	r7,r12
80001786:	48 76       	lddpc	r6,800017a0 <_sbrk_r+0x20>
80001788:	16 9c       	mov	r12,r11
8000178a:	8d 08       	st.w	r6[0x0],r8
8000178c:	f0 1f 00 06 	mcall	800017a4 <_sbrk_r+0x24>
80001790:	5b fc       	cp.w	r12,-1
80001792:	c0 51       	brne	8000179c <_sbrk_r+0x1c>
80001794:	6c 08       	ld.w	r8,r6[0x0]
80001796:	58 08       	cp.w	r8,0
80001798:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000179c:	d8 22       	popm	r4-r7,pc
8000179e:	00 00       	add	r0,r0
800017a0:	00 00       	add	r0,r0
800017a2:	05 84       	ld.ub	r4,r2[0x0]
800017a4:	80 00       	ld.sh	r0,r0[0x0]
800017a6:	17 a8       	ld.ub	r8,r11[0x2]

800017a8 <_sbrk>:
800017a8:	d4 01       	pushm	lr
800017aa:	48 c8       	lddpc	r8,800017d8 <_sbrk+0x30>
800017ac:	70 09       	ld.w	r9,r8[0x0]
800017ae:	58 09       	cp.w	r9,0
800017b0:	c0 31       	brne	800017b6 <_sbrk+0xe>
800017b2:	48 b9       	lddpc	r9,800017dc <_sbrk+0x34>
800017b4:	91 09       	st.w	r8[0x0],r9
800017b6:	48 99       	lddpc	r9,800017d8 <_sbrk+0x30>
800017b8:	48 aa       	lddpc	r10,800017e0 <_sbrk+0x38>
800017ba:	72 08       	ld.w	r8,r9[0x0]
800017bc:	f0 0c 00 0c 	add	r12,r8,r12
800017c0:	14 3c       	cp.w	r12,r10
800017c2:	e0 8b 00 04 	brhi	800017ca <_sbrk+0x22>
800017c6:	93 0c       	st.w	r9[0x0],r12
800017c8:	c0 68       	rjmp	800017d4 <_sbrk+0x2c>
800017ca:	f0 1f 00 07 	mcall	800017e4 <_sbrk+0x3c>
800017ce:	30 c8       	mov	r8,12
800017d0:	99 08       	st.w	r12[0x0],r8
800017d2:	3f f8       	mov	r8,-1
800017d4:	10 9c       	mov	r12,r8
800017d6:	d8 02       	popm	pc
800017d8:	00 00       	add	r0,r0
800017da:	05 4c       	ld.w	r12,--r2
800017dc:	00 00       	add	r0,r0
800017de:	05 88       	ld.ub	r8,r2[0x0]
800017e0:	00 00       	add	r0,r0
800017e2:	e0 00       	*unknown*
800017e4:	80 00       	ld.sh	r0,r0[0x0]
800017e6:	17 e8       	ld.ub	r8,r11[0x6]

800017e8 <__errno>:
800017e8:	48 28       	lddpc	r8,800017f0 <__errno+0x8>
800017ea:	70 0c       	ld.w	r12,r8[0x0]
800017ec:	2f 4c       	sub	r12,-12
800017ee:	5e fc       	retal	r12
800017f0:	00 00       	add	r0,r0
800017f2:	01 00       	ld.w	r0,r0++

800017f4 <_malloc_trim_r>:
800017f4:	d4 21       	pushm	r4-r7,lr
800017f6:	16 95       	mov	r5,r11
800017f8:	18 97       	mov	r7,r12
800017fa:	f0 1f 00 23 	mcall	80001884 <_malloc_trim_r+0x90>
800017fe:	4a 34       	lddpc	r4,80001888 <_malloc_trim_r+0x94>
80001800:	68 28       	ld.w	r8,r4[0x8]
80001802:	70 16       	ld.w	r6,r8[0x4]
80001804:	e0 16 ff fc 	andl	r6,0xfffc
80001808:	ec c8 ff 91 	sub	r8,r6,-111
8000180c:	f0 05 01 05 	sub	r5,r8,r5
80001810:	e0 15 ff 80 	andl	r5,0xff80
80001814:	ea c5 00 80 	sub	r5,r5,128
80001818:	e0 45 00 7f 	cp.w	r5,127
8000181c:	e0 8a 00 23 	brle	80001862 <_malloc_trim_r+0x6e>
80001820:	30 0b       	mov	r11,0
80001822:	0e 9c       	mov	r12,r7
80001824:	f0 1f 00 1a 	mcall	8000188c <_malloc_trim_r+0x98>
80001828:	68 28       	ld.w	r8,r4[0x8]
8000182a:	0c 08       	add	r8,r6
8000182c:	10 3c       	cp.w	r12,r8
8000182e:	c1 a1       	brne	80001862 <_malloc_trim_r+0x6e>
80001830:	ea 0b 11 00 	rsub	r11,r5,0
80001834:	0e 9c       	mov	r12,r7
80001836:	f0 1f 00 16 	mcall	8000188c <_malloc_trim_r+0x98>
8000183a:	5b fc       	cp.w	r12,-1
8000183c:	c1 71       	brne	8000186a <_malloc_trim_r+0x76>
8000183e:	30 0b       	mov	r11,0
80001840:	0e 9c       	mov	r12,r7
80001842:	f0 1f 00 13 	mcall	8000188c <_malloc_trim_r+0x98>
80001846:	68 28       	ld.w	r8,r4[0x8]
80001848:	f8 08 01 09 	sub	r9,r12,r8
8000184c:	58 f9       	cp.w	r9,15
8000184e:	e0 8a 00 0a 	brle	80001862 <_malloc_trim_r+0x6e>
80001852:	a1 a9       	sbr	r9,0x0
80001854:	91 19       	st.w	r8[0x4],r9
80001856:	48 f8       	lddpc	r8,80001890 <_malloc_trim_r+0x9c>
80001858:	70 09       	ld.w	r9,r8[0x0]
8000185a:	48 f8       	lddpc	r8,80001894 <_malloc_trim_r+0xa0>
8000185c:	f8 09 01 09 	sub	r9,r12,r9
80001860:	91 09       	st.w	r8[0x0],r9
80001862:	0e 9c       	mov	r12,r7
80001864:	f0 1f 00 0d 	mcall	80001898 <_malloc_trim_r+0xa4>
80001868:	d8 2a       	popm	r4-r7,pc,r12=0
8000186a:	68 28       	ld.w	r8,r4[0x8]
8000186c:	0a 16       	sub	r6,r5
8000186e:	a1 a6       	sbr	r6,0x0
80001870:	91 16       	st.w	r8[0x4],r6
80001872:	48 98       	lddpc	r8,80001894 <_malloc_trim_r+0xa0>
80001874:	70 09       	ld.w	r9,r8[0x0]
80001876:	0a 19       	sub	r9,r5
80001878:	0e 9c       	mov	r12,r7
8000187a:	91 09       	st.w	r8[0x0],r9
8000187c:	f0 1f 00 07 	mcall	80001898 <_malloc_trim_r+0xa4>
80001880:	da 2a       	popm	r4-r7,pc,r12=1
80001882:	00 00       	add	r0,r0
80001884:	80 00       	ld.sh	r0,r0[0x0]
80001886:	17 7a       	ld.ub	r10,--r11
80001888:	00 00       	add	r0,r0
8000188a:	01 04       	ld.w	r4,r0++
8000188c:	80 00       	ld.sh	r0,r0[0x0]
8000188e:	17 80       	ld.ub	r0,r11[0x0]
80001890:	00 00       	add	r0,r0
80001892:	05 10       	ld.sh	r0,r2++
80001894:	00 00       	add	r0,r0
80001896:	05 24       	ld.uh	r4,r2++
80001898:	80 00       	ld.sh	r0,r0[0x0]
8000189a:	17 7c       	ld.ub	r12,--r11

8000189c <_free_r>:
8000189c:	d4 21       	pushm	r4-r7,lr
8000189e:	16 96       	mov	r6,r11
800018a0:	18 97       	mov	r7,r12
800018a2:	58 0b       	cp.w	r11,0
800018a4:	e0 80 00 c8 	breq	80001a34 <_free_r+0x198>
800018a8:	f0 1f 00 4c 	mcall	800019d8 <_free_r+0x13c>
800018ac:	20 86       	sub	r6,8
800018ae:	4c ca       	lddpc	r10,800019dc <_free_r+0x140>
800018b0:	6c 18       	ld.w	r8,r6[0x4]
800018b2:	74 2e       	ld.w	lr,r10[0x8]
800018b4:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800018b8:	a1 c8       	cbr	r8,0x0
800018ba:	ec 08 00 09 	add	r9,r6,r8
800018be:	72 1b       	ld.w	r11,r9[0x4]
800018c0:	e0 1b ff fc 	andl	r11,0xfffc
800018c4:	1c 39       	cp.w	r9,lr
800018c6:	c1 d1       	brne	80001900 <_free_r+0x64>
800018c8:	f6 08 00 08 	add	r8,r11,r8
800018cc:	58 0c       	cp.w	r12,0
800018ce:	c0 81       	brne	800018de <_free_r+0x42>
800018d0:	6c 09       	ld.w	r9,r6[0x0]
800018d2:	12 16       	sub	r6,r9
800018d4:	12 08       	add	r8,r9
800018d6:	6c 3b       	ld.w	r11,r6[0xc]
800018d8:	6c 29       	ld.w	r9,r6[0x8]
800018da:	97 29       	st.w	r11[0x8],r9
800018dc:	93 3b       	st.w	r9[0xc],r11
800018de:	10 99       	mov	r9,r8
800018e0:	95 26       	st.w	r10[0x8],r6
800018e2:	a1 a9       	sbr	r9,0x0
800018e4:	8d 19       	st.w	r6[0x4],r9
800018e6:	4b f9       	lddpc	r9,800019e0 <_free_r+0x144>
800018e8:	72 09       	ld.w	r9,r9[0x0]
800018ea:	12 38       	cp.w	r8,r9
800018ec:	c0 63       	brcs	800018f8 <_free_r+0x5c>
800018ee:	4b e8       	lddpc	r8,800019e4 <_free_r+0x148>
800018f0:	0e 9c       	mov	r12,r7
800018f2:	70 0b       	ld.w	r11,r8[0x0]
800018f4:	f0 1f 00 3d 	mcall	800019e8 <_free_r+0x14c>
800018f8:	0e 9c       	mov	r12,r7
800018fa:	f0 1f 00 3d 	mcall	800019ec <_free_r+0x150>
800018fe:	d8 22       	popm	r4-r7,pc
80001900:	93 1b       	st.w	r9[0x4],r11
80001902:	58 0c       	cp.w	r12,0
80001904:	c0 30       	breq	8000190a <_free_r+0x6e>
80001906:	30 0c       	mov	r12,0
80001908:	c1 08       	rjmp	80001928 <_free_r+0x8c>
8000190a:	6c 0e       	ld.w	lr,r6[0x0]
8000190c:	f4 c5 ff f8 	sub	r5,r10,-8
80001910:	1c 16       	sub	r6,lr
80001912:	1c 08       	add	r8,lr
80001914:	6c 2e       	ld.w	lr,r6[0x8]
80001916:	0a 3e       	cp.w	lr,r5
80001918:	f9 bc 00 01 	moveq	r12,1
8000191c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001920:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001924:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001928:	f2 0b 00 0e 	add	lr,r9,r11
8000192c:	7c 1e       	ld.w	lr,lr[0x4]
8000192e:	ed be 00 00 	bld	lr,0x0
80001932:	c1 30       	breq	80001958 <_free_r+0xbc>
80001934:	16 08       	add	r8,r11
80001936:	58 0c       	cp.w	r12,0
80001938:	c0 c1       	brne	80001950 <_free_r+0xb4>
8000193a:	4a 9e       	lddpc	lr,800019dc <_free_r+0x140>
8000193c:	72 2b       	ld.w	r11,r9[0x8]
8000193e:	2f 8e       	sub	lr,-8
80001940:	1c 3b       	cp.w	r11,lr
80001942:	c0 71       	brne	80001950 <_free_r+0xb4>
80001944:	97 36       	st.w	r11[0xc],r6
80001946:	97 26       	st.w	r11[0x8],r6
80001948:	8d 2b       	st.w	r6[0x8],r11
8000194a:	8d 3b       	st.w	r6[0xc],r11
8000194c:	30 1c       	mov	r12,1
8000194e:	c0 58       	rjmp	80001958 <_free_r+0xbc>
80001950:	72 2b       	ld.w	r11,r9[0x8]
80001952:	72 39       	ld.w	r9,r9[0xc]
80001954:	93 2b       	st.w	r9[0x8],r11
80001956:	97 39       	st.w	r11[0xc],r9
80001958:	10 99       	mov	r9,r8
8000195a:	ec 08 09 08 	st.w	r6[r8],r8
8000195e:	a1 a9       	sbr	r9,0x0
80001960:	8d 19       	st.w	r6[0x4],r9
80001962:	58 0c       	cp.w	r12,0
80001964:	c6 51       	brne	80001a2e <_free_r+0x192>
80001966:	e0 48 01 ff 	cp.w	r8,511
8000196a:	e0 8b 00 13 	brhi	80001990 <_free_r+0xf4>
8000196e:	a3 98       	lsr	r8,0x3
80001970:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001974:	72 2b       	ld.w	r11,r9[0x8]
80001976:	8d 39       	st.w	r6[0xc],r9
80001978:	8d 2b       	st.w	r6[0x8],r11
8000197a:	97 36       	st.w	r11[0xc],r6
8000197c:	93 26       	st.w	r9[0x8],r6
8000197e:	a3 48       	asr	r8,0x2
80001980:	74 19       	ld.w	r9,r10[0x4]
80001982:	30 1b       	mov	r11,1
80001984:	f6 08 09 48 	lsl	r8,r11,r8
80001988:	f3 e8 10 08 	or	r8,r9,r8
8000198c:	95 18       	st.w	r10[0x4],r8
8000198e:	c5 08       	rjmp	80001a2e <_free_r+0x192>
80001990:	f0 0b 16 09 	lsr	r11,r8,0x9
80001994:	58 4b       	cp.w	r11,4
80001996:	e0 8b 00 06 	brhi	800019a2 <_free_r+0x106>
8000199a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000199e:	2c 8b       	sub	r11,-56
800019a0:	c2 b8       	rjmp	800019f6 <_free_r+0x15a>
800019a2:	59 4b       	cp.w	r11,20
800019a4:	e0 8b 00 04 	brhi	800019ac <_free_r+0x110>
800019a8:	2a 5b       	sub	r11,-91
800019aa:	c2 68       	rjmp	800019f6 <_free_r+0x15a>
800019ac:	e0 4b 00 54 	cp.w	r11,84
800019b0:	e0 8b 00 06 	brhi	800019bc <_free_r+0x120>
800019b4:	f0 0b 16 0c 	lsr	r11,r8,0xc
800019b8:	29 2b       	sub	r11,-110
800019ba:	c1 e8       	rjmp	800019f6 <_free_r+0x15a>
800019bc:	e0 4b 01 54 	cp.w	r11,340
800019c0:	e0 8b 00 06 	brhi	800019cc <_free_r+0x130>
800019c4:	f0 0b 16 0f 	lsr	r11,r8,0xf
800019c8:	28 9b       	sub	r11,-119
800019ca:	c1 68       	rjmp	800019f6 <_free_r+0x15a>
800019cc:	e0 4b 05 54 	cp.w	r11,1364
800019d0:	e0 88 00 10 	brls	800019f0 <_free_r+0x154>
800019d4:	37 eb       	mov	r11,126
800019d6:	c1 08       	rjmp	800019f6 <_free_r+0x15a>
800019d8:	80 00       	ld.sh	r0,r0[0x0]
800019da:	17 7a       	ld.ub	r10,--r11
800019dc:	00 00       	add	r0,r0
800019de:	01 04       	ld.w	r4,r0++
800019e0:	00 00       	add	r0,r0
800019e2:	05 0c       	ld.w	r12,r2++
800019e4:	00 00       	add	r0,r0
800019e6:	05 20       	ld.uh	r0,r2++
800019e8:	80 00       	ld.sh	r0,r0[0x0]
800019ea:	17 f4       	ld.ub	r4,r11[0x7]
800019ec:	80 00       	ld.sh	r0,r0[0x0]
800019ee:	17 7c       	ld.ub	r12,--r11
800019f0:	f0 0b 16 12 	lsr	r11,r8,0x12
800019f4:	28 4b       	sub	r11,-124
800019f6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800019fa:	78 29       	ld.w	r9,r12[0x8]
800019fc:	18 39       	cp.w	r9,r12
800019fe:	c0 e1       	brne	80001a1a <_free_r+0x17e>
80001a00:	74 18       	ld.w	r8,r10[0x4]
80001a02:	a3 4b       	asr	r11,0x2
80001a04:	30 1c       	mov	r12,1
80001a06:	f8 0b 09 4b 	lsl	r11,r12,r11
80001a0a:	f1 eb 10 0b 	or	r11,r8,r11
80001a0e:	12 98       	mov	r8,r9
80001a10:	95 1b       	st.w	r10[0x4],r11
80001a12:	c0 a8       	rjmp	80001a26 <_free_r+0x18a>
80001a14:	72 29       	ld.w	r9,r9[0x8]
80001a16:	18 39       	cp.w	r9,r12
80001a18:	c0 60       	breq	80001a24 <_free_r+0x188>
80001a1a:	72 1a       	ld.w	r10,r9[0x4]
80001a1c:	e0 1a ff fc 	andl	r10,0xfffc
80001a20:	14 38       	cp.w	r8,r10
80001a22:	cf 93       	brcs	80001a14 <_free_r+0x178>
80001a24:	72 38       	ld.w	r8,r9[0xc]
80001a26:	8d 38       	st.w	r6[0xc],r8
80001a28:	8d 29       	st.w	r6[0x8],r9
80001a2a:	93 36       	st.w	r9[0xc],r6
80001a2c:	91 26       	st.w	r8[0x8],r6
80001a2e:	0e 9c       	mov	r12,r7
80001a30:	f0 1f 00 02 	mcall	80001a38 <_free_r+0x19c>
80001a34:	d8 22       	popm	r4-r7,pc
80001a36:	00 00       	add	r0,r0
80001a38:	80 00       	ld.sh	r0,r0[0x0]
80001a3a:	17 7c       	ld.ub	r12,--r11

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0a a4       	st.w	r5++,r4
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	05 80       	ld.ub	r0,r2[0x0]
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	11 82       	ld.ub	r2,r8[0x0]
	...
