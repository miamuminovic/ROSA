
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001b80  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001c00  80001c00  00002000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002000  80002000  00002400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002084  80002084  00002484  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000518  00000008  80002088  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000080  00000520  00000520  00000000  2**2
                  ALLOC
  9 .heap         0000da60  000005a0  000005a0  00000000  2**0
                  ALLOC
 10 .comment      000000a0  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005e0  00000000  00000000  00002dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000c66  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000c13d  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000200f  00000000  00000000  00010143  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a62  00000000  00000000  00012152  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000cb8  00000000  00000000  00016bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001cff  00000000  00000000  0001786c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000019b3  00000000  00000000  0001956b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00613b9c  00000000  00000000  0001af1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000528  00000000  00000000  0062eaba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	13 70       	ld.ub	r0,--r9

Disassembly of section .text:

80000008 <insert_after>:
#include "include/kernel/lists.h"



int16_t insert_after( tcb * position_tcb, tcb * new_tcb )
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
	int16_t result = -1;
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8

	//	printf("position tcb: %d\n", position_tcb);

	if(position_tcb != NULL && new_tcb != NULL)
8000001e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 00       	breq	80000064 <insert_after+0x5c>
80000026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000002a:	58 08       	cp.w	r8,0
8000002c:	c1 c0       	breq	80000064 <insert_after+0x5c>
	{
		new_tcb->nexttcb = position_tcb->nexttcb;
8000002e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000032:	70 09       	ld.w	r9,r8[0x0]
80000034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
		new_tcb->prevtcb = position_tcb;
8000003a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000003e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000042:	f1 49 00 70 	st.w	r8[112],r9
		position_tcb->nexttcb = new_tcb;
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000004e:	91 09       	st.w	r8[0x0],r9
		new_tcb->nexttcb->prevtcb = new_tcb;
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	70 08       	ld.w	r8,r8[0x0]
80000056:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000005a:	f1 49 00 70 	st.w	r8[112],r9
		
		result = 0;
8000005e:	30 08       	mov	r8,0
80000060:	ef 58 ff fe 	st.h	r7[-2],r8
	}

	return result;
80000064:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80000068:	10 9c       	mov	r12,r8
8000006a:	2f dd       	sub	sp,-12
8000006c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000070 <ROSA_semaphoreCreate>:
#include "include/kernel/semaphore.h"

int16_t ROSA_semaphoreCreate(ROSA_semaphoreHandle_t * handle, uint8_t ceiling)
{
80000070:	eb cd 40 80 	pushm	r7,lr
80000074:	1a 97       	mov	r7,sp
80000076:	20 3d       	sub	sp,12
80000078:	ef 4c ff f8 	st.w	r7[-8],r12
8000007c:	16 98       	mov	r8,r11
8000007e:	ef 68 ff f4 	st.b	r7[-12],r8
	int16_t result = -1;
80000082:	3f f8       	mov	r8,-1
80000084:	ef 58 ff fe 	st.h	r7[-2],r8
	
	(*handle) = calloc(1, sizeof(semaphore));
80000088:	31 4b       	mov	r11,20
8000008a:	30 1c       	mov	r12,1
8000008c:	f0 1f 00 13 	mcall	800000d8 <ROSA_semaphoreCreate+0x68>
80000090:	18 98       	mov	r8,r12
80000092:	10 99       	mov	r9,r8
80000094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000098:	91 09       	st.w	r8[0x0],r9
	(*handle)->flag = 0;		// 0 when semaphore is not locked, 1 when semaphore is locked
8000009a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000009e:	70 09       	ld.w	r9,r8[0x0]
800000a0:	30 08       	mov	r8,0
800000a2:	b2 08       	st.h	r9[0x0],r8
	(*handle)->ceiling = ceiling;
800000a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000a8:	70 09       	ld.w	r9,r8[0x0]
800000aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800000ae:	b2 a8       	st.b	r9[0x2],r8
	(*handle)->current_task = NULL;
800000b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000b4:	70 08       	ld.w	r8,r8[0x0]
800000b6:	30 09       	mov	r9,0
800000b8:	91 19       	st.w	r8[0x4],r9
	(*handle)->task_priority = 15;
800000ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000be:	70 09       	ld.w	r9,r8[0x0]
800000c0:	30 f8       	mov	r8,15
800000c2:	f3 68 00 08 	st.b	r9[8],r8
	result = 0;
800000c6:	30 08       	mov	r8,0
800000c8:	ef 58 ff fe 	st.h	r7[-2],r8
	return result;
800000cc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800000d0:	10 9c       	mov	r12,r8
800000d2:	2f dd       	sub	sp,-12
800000d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	13 f0       	ld.ub	r0,r9[0x7]

800000dc <usart_options>:
800000dc:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 34     ............tsk4
800000ec:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 32     ....tsk1....tsk2
800000fc:	00 00 00 00 74 73 6b 33 00 00 00 00                 ....tsk3....

80000108 <task1>:
 * Task1
 * LED0 lights up
 * LED1 goes dark
 ************************************************************/
void task1(void)
{
80000108:	eb cd 40 80 	pushm	r7,lr
8000010c:	1a 97       	mov	r7,sp
	while(1) {
		ledOn(LED0_GPIO);
8000010e:	33 bc       	mov	r12,59
80000110:	f0 1f 00 05 	mcall	80000124 <task1+0x1c>
		ledOff(LED1_GPIO);
80000114:	33 cc       	mov	r12,60
80000116:	f0 1f 00 05 	mcall	80000128 <task1+0x20>
		//delay_ms(abs(1000 - ROSA_getTickCount()));
		ROSA_delay(9);
8000011a:	30 9a       	mov	r10,9
8000011c:	30 0b       	mov	r11,0
8000011e:	f0 1f 00 04 	mcall	8000012c <task1+0x24>
	}
80000122:	cf 6b       	rjmp	8000010e <task1+0x6>
80000124:	80 00       	ld.sh	r0,r0[0x0]
80000126:	0f 80       	ld.ub	r0,r7[0x0]
80000128:	80 00       	ld.sh	r0,r0[0x0]
8000012a:	0f a0       	ld.ub	r0,r7[0x2]
8000012c:	80 00       	ld.sh	r0,r0[0x0]
8000012e:	08 e0       	st.h	--r4,r0

80000130 <task2>:
 * Task2
 * LED0 goes dark
 * LED1 lights up
 ************************************************************/
void task2(void)
{
80000130:	eb cd 40 80 	pushm	r7,lr
80000134:	1a 97       	mov	r7,sp
	while(1) {
		ledOff(LED0_GPIO);
80000136:	33 bc       	mov	r12,59
80000138:	f0 1f 00 05 	mcall	8000014c <task2+0x1c>
		ledOn(LED1_GPIO);
8000013c:	33 cc       	mov	r12,60
8000013e:	f0 1f 00 05 	mcall	80000150 <task2+0x20>
		ROSA_delay(10);
80000142:	30 aa       	mov	r10,10
80000144:	30 0b       	mov	r11,0
80000146:	f0 1f 00 04 	mcall	80000154 <task2+0x24>
		//delay_ms(abs(ROSA_getTickCount() - 1000));
	}
8000014a:	cf 6b       	rjmp	80000136 <task2+0x6>
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	0f a0       	ld.ub	r0,r7[0x2]
80000150:	80 00       	ld.sh	r0,r0[0x0]
80000152:	0f 80       	ld.ub	r0,r7[0x0]
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	08 e0       	st.h	--r4,r0

80000158 <task3>:
/*************************************************************
 * Task3
 * LED2 toggles
 ************************************************************/
void task3(void)
{
80000158:	eb cd 40 80 	pushm	r7,lr
8000015c:	1a 97       	mov	r7,sp
	//uint64_t currentTime = ROSA_getTickCount();
	while(1)
	{
		ledToggle(LED2_GPIO);
8000015e:	33 dc       	mov	r12,61
80000160:	f0 1f 00 04 	mcall	80000170 <task3+0x18>
		ROSA_delay(500);
80000164:	e0 6a 01 f4 	mov	r10,500
80000168:	30 0b       	mov	r11,0
8000016a:	f0 1f 00 03 	mcall	80000174 <task3+0x1c>
		//ROSA_delayUntil(&currentTime, 30);
		
		//delay_ms(100);
		//ROSA_yield();
	}
8000016e:	cf 8b       	rjmp	8000015e <task3+0x6>
80000170:	80 00       	ld.sh	r0,r0[0x0]
80000172:	0f c0       	ld.ub	r0,r7[0x4]
80000174:	80 00       	ld.sh	r0,r0[0x0]
80000176:	08 e0       	st.h	--r4,r0

80000178 <task4>:
/*************************************************************
 * Task4
 * LED3 toggles
 ************************************************************/
void task4(void)
{
80000178:	eb cd 40 80 	pushm	r7,lr
8000017c:	1a 97       	mov	r7,sp
8000017e:	20 2d       	sub	sp,8
	uint64_t current_ticks;
	current_ticks = ROSA_getTickCount(); 
80000180:	f0 1f 00 09 	mcall	800001a4 <task4+0x2c>
80000184:	14 98       	mov	r8,r10
80000186:	16 99       	mov	r9,r11
80000188:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1) {
		ledToggle(LED3_GPIO);
8000018c:	33 ec       	mov	r12,62
8000018e:	f0 1f 00 07 	mcall	800001a8 <task4+0x30>
		ROSA_delayUntil(&current_ticks,500);
80000192:	ee c8 00 08 	sub	r8,r7,8
80000196:	e0 6a 01 f4 	mov	r10,500
8000019a:	30 0b       	mov	r11,0
8000019c:	10 9c       	mov	r12,r8
8000019e:	f0 1f 00 04 	mcall	800001ac <task4+0x34>
		//ROSA_yield();
	}
800001a2:	cf 5b       	rjmp	8000018c <task4+0x14>
800001a4:	80 00       	ld.sh	r0,r0[0x0]
800001a6:	0c e4       	st.h	--r6,r4
800001a8:	80 00       	ld.sh	r0,r0[0x0]
800001aa:	0f c0       	ld.ub	r0,r7[0x4]
800001ac:	80 00       	ld.sh	r0,r0[0x0]
800001ae:	09 60       	ld.uh	r0,--r4

800001b0 <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
800001b0:	eb cd 40 80 	pushm	r7,lr
800001b4:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800001b6:	f0 1f 00 14 	mcall	80000204 <main+0x54>
	ROSA_semaphoreCreate(&S1,1);
800001ba:	30 1b       	mov	r11,1
800001bc:	49 3c       	lddpc	r12,80000208 <main+0x58>
800001be:	f0 1f 00 14 	mcall	8000020c <main+0x5c>


	ROSA_taskCreate(& task1_handle, "tsk1", task1, 0x40, 3);
800001c2:	30 38       	mov	r8,3
800001c4:	34 09       	mov	r9,64
800001c6:	49 3a       	lddpc	r10,80000210 <main+0x60>
800001c8:	49 3b       	lddpc	r11,80000214 <main+0x64>
800001ca:	49 4c       	lddpc	r12,80000218 <main+0x68>
800001cc:	f0 1f 00 14 	mcall	8000021c <main+0x6c>
	ROSA_taskCreate(& task2_handle, "tsk2", task2, 0x40, 3);
800001d0:	30 38       	mov	r8,3
800001d2:	34 09       	mov	r9,64
800001d4:	49 3a       	lddpc	r10,80000220 <main+0x70>
800001d6:	49 4b       	lddpc	r11,80000224 <main+0x74>
800001d8:	49 4c       	lddpc	r12,80000228 <main+0x78>
800001da:	f0 1f 00 11 	mcall	8000021c <main+0x6c>
	ROSA_taskCreate(& task3_handle, "tsk3", task3, 0x40, 2);
800001de:	30 28       	mov	r8,2
800001e0:	34 09       	mov	r9,64
800001e2:	49 3a       	lddpc	r10,8000022c <main+0x7c>
800001e4:	49 3b       	lddpc	r11,80000230 <main+0x80>
800001e6:	49 4c       	lddpc	r12,80000234 <main+0x84>
800001e8:	f0 1f 00 0d 	mcall	8000021c <main+0x6c>
	ROSA_taskCreate(& task4_handle, "tsk4", task4, 0x40, 4);
800001ec:	30 48       	mov	r8,4
800001ee:	34 09       	mov	r9,64
800001f0:	49 2a       	lddpc	r10,80000238 <main+0x88>
800001f2:	49 3b       	lddpc	r11,8000023c <main+0x8c>
800001f4:	49 3c       	lddpc	r12,80000240 <main+0x90>
800001f6:	f0 1f 00 0a 	mcall	8000021c <main+0x6c>
	//ROSA_taskCreate(& task5_handle, "tsk5", taskA, 0x40, 3);
	//ROSA_taskCreate(& task2_handle, "tsk5", taskB, 0x40, 2);
	//ROSA_taskCreate(& task4_handle, "tsk5", taskC, 0x40, 1);
	
	timerStart();
800001fa:	f0 1f 00 13 	mcall	80000244 <main+0x94>
	
	//Start the ROSA kernel
	ROSA_start();
800001fe:	f0 1f 00 13 	mcall	80000248 <main+0x98>
	/* Execution will never return here */
	while(1);
80000202:	c0 08       	rjmp	80000202 <main+0x52>
80000204:	80 00       	ld.sh	r0,r0[0x0]
80000206:	02 b8       	st.h	r1++,r8
80000208:	00 00       	add	r0,r0
8000020a:	05 7c       	ld.ub	r12,--r2
8000020c:	80 00       	ld.sh	r0,r0[0x0]
8000020e:	00 70       	tst	r0,r0
80000210:	80 00       	ld.sh	r0,r0[0x0]
80000212:	01 08       	ld.w	r8,r0++
80000214:	80 00       	ld.sh	r0,r0[0x0]
80000216:	00 f0       	st.b	--r0,r0
80000218:	00 00       	add	r0,r0
8000021a:	05 78       	ld.ub	r8,--r2
8000021c:	80 00       	ld.sh	r0,r0[0x0]
8000021e:	08 00       	add	r0,r4
80000220:	80 00       	ld.sh	r0,r0[0x0]
80000222:	01 30       	ld.ub	r0,r0++
80000224:	80 00       	ld.sh	r0,r0[0x0]
80000226:	00 f8       	st.b	--r0,r8
80000228:	00 00       	add	r0,r0
8000022a:	05 80       	ld.ub	r0,r2[0x0]
8000022c:	80 00       	ld.sh	r0,r0[0x0]
8000022e:	01 58       	ld.sh	r8,--r0
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	01 00       	ld.w	r0,r0++
80000234:	00 00       	add	r0,r0
80000236:	05 90       	ld.ub	r0,r2[0x1]
80000238:	80 00       	ld.sh	r0,r0[0x0]
8000023a:	01 78       	ld.ub	r8,--r0
8000023c:	80 00       	ld.sh	r0,r0[0x0]
8000023e:	00 e8       	st.h	--r0,r8
80000240:	00 00       	add	r0,r0
80000242:	05 94       	ld.ub	r4,r2[0x1]
80000244:	80 00       	ld.sh	r0,r0[0x0]
80000246:	12 e6       	st.h	--r9,r6
80000248:	80 00       	ld.sh	r0,r0[0x0]
8000024a:	09 f8       	ld.ub	r8,r4[0x7]

8000024c <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
8000024c:	eb cd 40 80 	pushm	r7,lr
80000250:	1a 97       	mov	r7,sp
	interruptDisable();
80000252:	f0 1f 00 0d 	mcall	80000284 <ROSA_yieldFromISR+0x38>
	contextSaveFromISR();	  //Save the task context
80000256:	f0 1f 00 0d 	mcall	80000288 <ROSA_yieldFromISR+0x3c>
	system_ticks ++;
8000025a:	48 d8       	lddpc	r8,8000028c <ROSA_yieldFromISR+0x40>
8000025c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000260:	30 18       	mov	r8,1
80000262:	30 09       	mov	r9,0
80000264:	f4 08 00 08 	add	r8,r10,r8
80000268:	f6 09 00 49 	adc	r9,r11,r9
8000026c:	48 8a       	lddpc	r10,8000028c <ROSA_yieldFromISR+0x40>
8000026e:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
80000272:	f0 1f 00 08 	mcall	80000290 <ROSA_yieldFromISR+0x44>
	contextRestoreFromISR();  //...and switch over to it.
80000276:	f0 1f 00 08 	mcall	80000294 <ROSA_yieldFromISR+0x48>
	interruptEnable();
8000027a:	f0 1f 00 08 	mcall	80000298 <ROSA_yieldFromISR+0x4c>
}
8000027e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000282:	00 00       	add	r0,r0
80000284:	80 00       	ld.sh	r0,r0[0x0]
80000286:	1d 66       	ld.uh	r6,--lr
80000288:	80 00       	ld.sh	r0,r0[0x0]
8000028a:	1d 7e       	ld.ub	lr,--lr
8000028c:	00 00       	add	r0,r0
8000028e:	05 84       	ld.ub	r4,r2[0x0]
80000290:	80 00       	ld.sh	r0,r0[0x0]
80000292:	0a d8       	st.w	--r5,r8
80000294:	80 00       	ld.sh	r0,r0[0x0]
80000296:	1d b8       	ld.ub	r8,lr[0x3]
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	1d 6a       	ld.uh	r10,--lr

8000029c <usart_options>:
8000029c:	00 00 e1 00 08 04 00 00 00 00 00 00 69 64 6c 65     ............idle
800002ac:	00 00 00 00                                         ....

800002b0 <IDLE_TASK>:
int endCritical=1;

//Idle task creation

void IDLE_TASK (void)
{
800002b0:	eb cd 40 80 	pushm	r7,lr
800002b4:	1a 97       	mov	r7,sp
	while(1);
800002b6:	c0 08       	rjmp	800002b6 <IDLE_TASK+0x6>

800002b8 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
800002b8:	eb cd 40 80 	pushm	r7,lr
800002bc:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
800002be:	f0 1f 00 16 	mcall	80000314 <ROSA_init+0x5c>
	buttonInit();								//Buttons
800002c2:	f0 1f 00 16 	mcall	80000318 <ROSA_init+0x60>
	joystickInit();								//Joystick
800002c6:	f0 1f 00 16 	mcall	8000031c <ROSA_init+0x64>
	potInit();									//Potentiometer
800002ca:	f0 1f 00 16 	mcall	80000320 <ROSA_init+0x68>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
800002ce:	e0 6a 1b 00 	mov	r10,6912
800002d2:	ea 1a 00 b7 	orh	r10,0xb7
800002d6:	49 4b       	lddpc	r11,80000324 <ROSA_init+0x6c>
800002d8:	fe 7c 14 00 	mov	r12,-60416
800002dc:	f0 1f 00 13 	mcall	80000328 <ROSA_init+0x70>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800002e0:	49 38       	lddpc	r8,8000032c <ROSA_init+0x74>
800002e2:	30 09       	mov	r9,0
800002e4:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800002e6:	49 38       	lddpc	r8,80000330 <ROSA_init+0x78>
800002e8:	30 09       	mov	r9,0
800002ea:	91 09       	st.w	r8[0x0],r9
	
	ROSA_taskCreate(& idle_task_handle, "idle", IDLE_TASK, 0x40, 255);
800002ec:	e0 68 00 ff 	mov	r8,255
800002f0:	34 09       	mov	r9,64
800002f2:	49 1a       	lddpc	r10,80000334 <ROSA_init+0x7c>
800002f4:	49 1b       	lddpc	r11,80000338 <ROSA_init+0x80>
800002f6:	49 2c       	lddpc	r12,8000033c <ROSA_init+0x84>
800002f8:	f0 1f 00 12 	mcall	80000340 <ROSA_init+0x88>

	//Initialize the timer to 100 ms period.
	//...
	interruptInit();
800002fc:	f0 1f 00 12 	mcall	80000344 <ROSA_init+0x8c>
	system_ticks = 0;
80000300:	49 2a       	lddpc	r10,80000348 <ROSA_init+0x90>
80000302:	30 08       	mov	r8,0
80000304:	30 09       	mov	r9,0
80000306:	f4 e9 00 00 	st.d	r10[0],r8
	timerInit(1);
8000030a:	30 1c       	mov	r12,1
8000030c:	f0 1f 00 10 	mcall	8000034c <ROSA_init+0x94>
	//...
}
80000310:	e3 cd 80 80 	ldm	sp++,r7,pc
80000314:	80 00       	ld.sh	r0,r0[0x0]
80000316:	0e f4       	st.b	--r7,r4
80000318:	80 00       	ld.sh	r0,r0[0x0]
8000031a:	0c fc       	st.b	--r6,r12
8000031c:	80 00       	ld.sh	r0,r0[0x0]
8000031e:	0d 24       	ld.uh	r4,r6++
80000320:	80 00       	ld.sh	r0,r0[0x0]
80000322:	0f e0       	ld.ub	r0,r7[0x6]
80000324:	80 00       	ld.sh	r0,r0[0x0]
80000326:	02 9c       	mov	r12,r1
80000328:	80 00       	ld.sh	r0,r0[0x0]
8000032a:	11 94       	ld.ub	r4,r8[0x1]
8000032c:	00 00       	add	r0,r0
8000032e:	05 68       	ld.uh	r8,--r2
80000330:	00 00       	add	r0,r0
80000332:	05 98       	ld.ub	r8,r2[0x1]
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	02 b0       	st.h	r1++,r0
80000338:	80 00       	ld.sh	r0,r0[0x0]
8000033a:	02 a8       	st.w	r1++,r8
8000033c:	00 00       	add	r0,r0
8000033e:	05 64       	ld.uh	r4,--r2
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	08 00       	add	r0,r4
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	1d 48       	ld.w	r8,--lr
80000348:	00 00       	add	r0,r0
8000034a:	05 84       	ld.ub	r4,r2[0x0]
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	12 b8       	st.h	r9++,r8

80000350 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
80000350:	eb cd 40 80 	pushm	r7,lr
80000354:	1a 97       	mov	r7,sp
80000356:	20 6d       	sub	sp,24
80000358:	ef 4c ff f8 	st.w	r7[-8],r12
8000035c:	ef 4b ff f4 	st.w	r7[-12],r11
80000360:	ef 4a ff f0 	st.w	r7[-16],r10
80000364:	ef 49 ff ec 	st.w	r7[-20],r9
80000368:	ef 48 ff e8 	st.w	r7[-24],r8
	interruptDisable();
8000036c:	f0 1f 00 29 	mcall	80000410 <ROSA_tcbCreate+0xc0>
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000370:	30 08       	mov	r8,0
80000372:	ef 48 ff fc 	st.w	r7[-4],r8
80000376:	c1 48       	rjmp	8000039e <ROSA_tcbCreate+0x4e>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
80000378:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000037c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000380:	ee fa ff f4 	ld.w	r10,r7[-12]
80000384:	f4 08 00 08 	add	r8,r10,r8
80000388:	11 88       	ld.ub	r8,r8[0x0]
8000038a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000038e:	f4 09 00 09 	add	r9,r10,r9
80000392:	b2 c8       	st.b	r9[0x4],r8
{
	interruptDisable();
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
80000394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000398:	2f f8       	sub	r8,-1
8000039a:	ef 48 ff fc 	st.w	r7[-4],r8
8000039e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800003a2:	58 38       	cp.w	r8,3
800003a4:	fe 9a ff ea 	brle	80000378 <ROSA_tcbCreate+0x28>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800003a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ac:	30 09       	mov	r9,0
800003ae:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
800003b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003b8:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
800003ba:	ee f9 ff f0 	ld.w	r9,r7[-16]
800003be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c2:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
800003c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003c8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800003cc:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
800003ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800003d2:	a3 68       	lsl	r8,0x2
800003d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800003d8:	10 09       	add	r9,r8
800003da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003de:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
800003e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003e4:	70 39       	ld.w	r9,r8[0xc]
800003e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003ea:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
800003ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800003f0:	fc 19 00 1c 	movh	r9,0x1c
800003f4:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
800003f6:	ee fc ff f8 	ld.w	r12,r7[-8]
800003fa:	f0 1f 00 07 	mcall	80000414 <ROSA_tcbCreate+0xc4>
	if (endCritical)
800003fe:	48 78       	lddpc	r8,80000418 <ROSA_tcbCreate+0xc8>
80000400:	70 08       	ld.w	r8,r8[0x0]
80000402:	58 08       	cp.w	r8,0
80000404:	c0 30       	breq	8000040a <ROSA_tcbCreate+0xba>
		interruptEnable();
80000406:	f0 1f 00 06 	mcall	8000041c <ROSA_tcbCreate+0xcc>
}
8000040a:	2f ad       	sub	sp,-24
8000040c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	1d 66       	ld.uh	r6,--lr
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	0a 2e       	rsub	lr,r5
80000418:	00 00       	add	r0,r0
8000041a:	00 08       	add	r8,r0
8000041c:	80 00       	ld.sh	r0,r0[0x0]
8000041e:	1d 6a       	ld.uh	r10,--lr

80000420 <ROSA_tcbInstall>:
	//}
//}

// insert into the ready list
void ROSA_tcbInstall(tcb * tcbTask)
{
80000420:	eb cd 40 80 	pushm	r7,lr
80000424:	1a 97       	mov	r7,sp
80000426:	20 2d       	sub	sp,8
80000428:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
8000042c:	f0 1f 00 40 	mcall	8000052c <ROSA_tcbInstall+0x10c>
	// check if tcbTask is null is missing
	if(TCBLIST == NULL)
80000430:	4c 08       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
80000432:	70 08       	ld.w	r8,r8[0x0]
80000434:	58 08       	cp.w	r8,0
80000436:	c1 51       	brne	80000460 <ROSA_tcbInstall+0x40>
	{
		TCBLIST = tcbTask;
80000438:	4b e8       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
8000043a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000043e:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000444:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000448:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
8000044a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000044e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000452:	f1 49 00 70 	st.w	r8[112],r9
		TCBLIST_end = tcbTask;
80000456:	4b 88       	lddpc	r8,80000534 <ROSA_tcbInstall+0x114>
80000458:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000045c:	91 09       	st.w	r8[0x0],r9
8000045e:	c5 d8       	rjmp	80000518 <ROSA_tcbInstall+0xf8>
	}
	else if(tcbTask->effective_priority < TCBLIST->effective_priority)
80000460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000464:	f1 39 00 65 	ld.ub	r9,r8[101]
80000468:	4b 28       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
8000046a:	70 08       	ld.w	r8,r8[0x0]
8000046c:	f1 38 00 65 	ld.ub	r8,r8[101]
80000470:	f0 09 18 00 	cp.b	r9,r8
80000474:	c1 02       	brcc	80000494 <ROSA_tcbInstall+0x74>
	{
		insert_after(TCBLIST_end, tcbTask);
80000476:	4b 08       	lddpc	r8,80000534 <ROSA_tcbInstall+0x114>
80000478:	70 08       	ld.w	r8,r8[0x0]
8000047a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000047e:	10 9c       	mov	r12,r8
80000480:	f0 1f 00 2e 	mcall	80000538 <ROSA_tcbInstall+0x118>
		TCBLIST = tcbTask;
80000484:	4a b8       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
80000486:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000048a:	91 09       	st.w	r8[0x0],r9
		ROUNDROBINEND = NULL;
8000048c:	4a c8       	lddpc	r8,8000053c <ROSA_tcbInstall+0x11c>
8000048e:	30 09       	mov	r9,0
80000490:	91 09       	st.w	r8[0x0],r9
80000492:	c4 38       	rjmp	80000518 <ROSA_tcbInstall+0xf8>
	}
	else
	{
		tcb * iterator = TCBLIST;
80000494:	4a 78       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
80000496:	70 08       	ld.w	r8,r8[0x0]
80000498:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
8000049c:	c0 68       	rjmp	800004a8 <ROSA_tcbInstall+0x88>
		{
			iterator = iterator->nexttcb;
8000049e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004a2:	70 08       	ld.w	r8,r8[0x0]
800004a4:	ef 48 ff fc 	st.w	r7[-4],r8
		ROUNDROBINEND = NULL;
	}
	else
	{
		tcb * iterator = TCBLIST;
		while(iterator && iterator->effective_priority <= tcbTask->effective_priority && iterator!=TCBLIST_end)
800004a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ac:	58 08       	cp.w	r8,0
800004ae:	c1 30       	breq	800004d4 <ROSA_tcbInstall+0xb4>
800004b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004b4:	f1 39 00 65 	ld.ub	r9,r8[101]
800004b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004bc:	f1 38 00 65 	ld.ub	r8,r8[101]
800004c0:	f0 09 18 00 	cp.b	r9,r8
800004c4:	e0 8b 00 08 	brhi	800004d4 <ROSA_tcbInstall+0xb4>
800004c8:	49 b8       	lddpc	r8,80000534 <ROSA_tcbInstall+0x114>
800004ca:	70 08       	ld.w	r8,r8[0x0]
800004cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004d0:	10 39       	cp.w	r9,r8
800004d2:	ce 61       	brne	8000049e <ROSA_tcbInstall+0x7e>
		{
			iterator = iterator->nexttcb;
		}

		insert_after(iterator->prevtcb, tcbTask);
800004d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d8:	71 c8       	ld.w	r8,r8[0x70]
800004da:	ee fb ff f8 	ld.w	r11,r7[-8]
800004de:	10 9c       	mov	r12,r8
800004e0:	f0 1f 00 16 	mcall	80000538 <ROSA_tcbInstall+0x118>
		//insert_by_priority(TCBLIST, tcbTask);
		if(TCBLIST->prevtcb == tcbTask)
800004e4:	49 38       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
800004e6:	70 08       	ld.w	r8,r8[0x0]
800004e8:	71 c9       	ld.w	r9,r8[0x70]
800004ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004ee:	10 39       	cp.w	r9,r8
800004f0:	c0 51       	brne	800004fa <ROSA_tcbInstall+0xda>
		{
			TCBLIST_end = tcbTask;
800004f2:	49 18       	lddpc	r8,80000534 <ROSA_tcbInstall+0x114>
800004f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004f8:	91 09       	st.w	r8[0x0],r9
		}
		if (TCBLIST->effective_priority == tcbTask->effective_priority)
800004fa:	48 e8       	lddpc	r8,80000530 <ROSA_tcbInstall+0x110>
800004fc:	70 08       	ld.w	r8,r8[0x0]
800004fe:	f1 39 00 65 	ld.ub	r9,r8[101]
80000502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000506:	f1 38 00 65 	ld.ub	r8,r8[101]
8000050a:	f0 09 18 00 	cp.b	r9,r8
8000050e:	c0 51       	brne	80000518 <ROSA_tcbInstall+0xf8>
			ROUNDROBINEND = tcbTask;		
80000510:	48 b8       	lddpc	r8,8000053c <ROSA_tcbInstall+0x11c>
80000512:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000516:	91 09       	st.w	r8[0x0],r9
	}
	if (endCritical)
80000518:	48 a8       	lddpc	r8,80000540 <ROSA_tcbInstall+0x120>
8000051a:	70 08       	ld.w	r8,r8[0x0]
8000051c:	58 08       	cp.w	r8,0
8000051e:	c0 30       	breq	80000524 <ROSA_tcbInstall+0x104>
		interruptEnable();
80000520:	f0 1f 00 09 	mcall	80000544 <ROSA_tcbInstall+0x124>
}
80000524:	2f ed       	sub	sp,-8
80000526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000052a:	00 00       	add	r0,r0
8000052c:	80 00       	ld.sh	r0,r0[0x0]
8000052e:	1d 66       	ld.uh	r6,--lr
80000530:	00 00       	add	r0,r0
80000532:	05 68       	ld.uh	r8,--r2
80000534:	00 00       	add	r0,r0
80000536:	05 70       	ld.ub	r0,--r2
80000538:	80 00       	ld.sh	r0,r0[0x0]
8000053a:	00 08       	add	r8,r0
8000053c:	00 00       	add	r0,r0
8000053e:	05 28       	ld.uh	r8,r2++
80000540:	00 00       	add	r0,r0
80000542:	00 08       	add	r8,r0
80000544:	80 00       	ld.sh	r0,r0[0x0]
80000546:	1d 6a       	ld.uh	r10,--lr

80000548 <ROSA_tcbUninstall>:

// removes a tcb from the ready list
void ROSA_tcbUninstall(tcb * tcbTask)
{
80000548:	eb cd 40 80 	pushm	r7,lr
8000054c:	1a 97       	mov	r7,sp
8000054e:	20 1d       	sub	sp,4
80000550:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
80000554:	f0 1f 00 35 	mcall	80000628 <ROSA_tcbUninstall+0xe0>
	// if empty OR if only one element
	if(TCBLIST == TCBLIST_end)
80000558:	4b 58       	lddpc	r8,8000062c <ROSA_tcbUninstall+0xe4>
8000055a:	70 09       	ld.w	r9,r8[0x0]
8000055c:	4b 58       	lddpc	r8,80000630 <ROSA_tcbUninstall+0xe8>
8000055e:	70 08       	ld.w	r8,r8[0x0]
80000560:	10 39       	cp.w	r9,r8
80000562:	c0 81       	brne	80000572 <ROSA_tcbUninstall+0x2a>
	{
		TCBLIST = NULL;
80000564:	4b 28       	lddpc	r8,8000062c <ROSA_tcbUninstall+0xe4>
80000566:	30 09       	mov	r9,0
80000568:	91 09       	st.w	r8[0x0],r9
		TCBLIST_end = NULL;
8000056a:	4b 28       	lddpc	r8,80000630 <ROSA_tcbUninstall+0xe8>
8000056c:	30 09       	mov	r9,0
8000056e:	91 09       	st.w	r8[0x0],r9
80000570:	c5 38       	rjmp	80000616 <ROSA_tcbUninstall+0xce>
		//ROUNDROBINEND=NULL;
	}
	else 
	{
		if(TCBLIST->effective_priority == tcbTask->effective_priority)
80000572:	4a f8       	lddpc	r8,8000062c <ROSA_tcbUninstall+0xe4>
80000574:	70 08       	ld.w	r8,r8[0x0]
80000576:	f1 39 00 65 	ld.ub	r9,r8[101]
8000057a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000057e:	f1 38 00 65 	ld.ub	r8,r8[101]
80000582:	f0 09 18 00 	cp.b	r9,r8
80000586:	c1 91       	brne	800005b8 <ROSA_tcbUninstall+0x70>
		{ 
			if(ROUNDROBINEND->prevtcb = TCBLIST)
80000588:	4a b8       	lddpc	r8,80000634 <ROSA_tcbUninstall+0xec>
8000058a:	70 08       	ld.w	r8,r8[0x0]
8000058c:	4a 89       	lddpc	r9,8000062c <ROSA_tcbUninstall+0xe4>
8000058e:	72 09       	ld.w	r9,r9[0x0]
80000590:	f1 49 00 70 	st.w	r8[112],r9
80000594:	71 c8       	ld.w	r8,r8[0x70]
80000596:	58 08       	cp.w	r8,0
80000598:	c0 50       	breq	800005a2 <ROSA_tcbUninstall+0x5a>
			{
				ROUNDROBINEND = NULL;
8000059a:	4a 78       	lddpc	r8,80000634 <ROSA_tcbUninstall+0xec>
8000059c:	30 09       	mov	r9,0
8000059e:	91 09       	st.w	r8[0x0],r9
800005a0:	c0 c8       	rjmp	800005b8 <ROSA_tcbUninstall+0x70>
			}					
			else if(ROUNDROBINEND == tcbTask)
800005a2:	4a 58       	lddpc	r8,80000634 <ROSA_tcbUninstall+0xec>
800005a4:	70 09       	ld.w	r9,r8[0x0]
800005a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005aa:	10 39       	cp.w	r9,r8
800005ac:	c0 61       	brne	800005b8 <ROSA_tcbUninstall+0x70>
			{	
				ROUNDROBINEND = tcbTask->prevtcb;
800005ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b2:	71 c9       	ld.w	r9,r8[0x70]
800005b4:	4a 08       	lddpc	r8,80000634 <ROSA_tcbUninstall+0xec>
800005b6:	91 09       	st.w	r8[0x0],r9
			}
		}
		if(TCBLIST_end == tcbTask)
800005b8:	49 e8       	lddpc	r8,80000630 <ROSA_tcbUninstall+0xe8>
800005ba:	70 09       	ld.w	r9,r8[0x0]
800005bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005c0:	10 39       	cp.w	r9,r8
800005c2:	c0 71       	brne	800005d0 <ROSA_tcbUninstall+0x88>
		{
			TCBLIST_end = tcbTask->prevtcb;
800005c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005c8:	71 c9       	ld.w	r9,r8[0x70]
800005ca:	49 a8       	lddpc	r8,80000630 <ROSA_tcbUninstall+0xe8>
800005cc:	91 09       	st.w	r8[0x0],r9
800005ce:	c0 c8       	rjmp	800005e6 <ROSA_tcbUninstall+0x9e>
		}
		else if(TCBLIST == tcbTask)
800005d0:	49 78       	lddpc	r8,8000062c <ROSA_tcbUninstall+0xe4>
800005d2:	70 09       	ld.w	r9,r8[0x0]
800005d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005d8:	10 39       	cp.w	r9,r8
800005da:	c0 61       	brne	800005e6 <ROSA_tcbUninstall+0x9e>
		{
			TCBLIST = tcbTask->nexttcb;
800005dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005e0:	70 09       	ld.w	r9,r8[0x0]
800005e2:	49 38       	lddpc	r8,8000062c <ROSA_tcbUninstall+0xe4>
800005e4:	91 09       	st.w	r8[0x0],r9
		}
	
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
800005e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005ea:	71 c8       	ld.w	r8,r8[0x70]
800005ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005f0:	72 09       	ld.w	r9,r9[0x0]
800005f2:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
800005f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005f8:	70 08       	ld.w	r8,r8[0x0]
800005fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005fe:	73 c9       	ld.w	r9,r9[0x70]
80000600:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
80000604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000608:	30 09       	mov	r9,0
8000060a:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
8000060c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000610:	30 09       	mov	r9,0
80000612:	f1 49 00 70 	st.w	r8[112],r9
	}
	if (endCritical)
80000616:	48 98       	lddpc	r8,80000638 <ROSA_tcbUninstall+0xf0>
80000618:	70 08       	ld.w	r8,r8[0x0]
8000061a:	58 08       	cp.w	r8,0
8000061c:	c0 30       	breq	80000622 <ROSA_tcbUninstall+0xda>
		interruptEnable();
8000061e:	f0 1f 00 08 	mcall	8000063c <ROSA_tcbUninstall+0xf4>
}
80000622:	2f fd       	sub	sp,-4
80000624:	e3 cd 80 80 	ldm	sp++,r7,pc
80000628:	80 00       	ld.sh	r0,r0[0x0]
8000062a:	1d 66       	ld.uh	r6,--lr
8000062c:	00 00       	add	r0,r0
8000062e:	05 68       	ld.uh	r8,--r2
80000630:	00 00       	add	r0,r0
80000632:	05 70       	ld.ub	r0,--r2
80000634:	00 00       	add	r0,r0
80000636:	05 28       	ld.uh	r8,r2++
80000638:	00 00       	add	r0,r0
8000063a:	00 08       	add	r8,r0
8000063c:	80 00       	ld.sh	r0,r0[0x0]
8000063e:	1d 6a       	ld.uh	r10,--lr

80000640 <ROSA_tcbSuspend>:

void ROSA_tcbSuspend(tcb * tcbTask)
{
80000640:	eb cd 40 80 	pushm	r7,lr
80000644:	1a 97       	mov	r7,sp
80000646:	20 2d       	sub	sp,8
80000648:	ef 4c ff f8 	st.w	r7[-8],r12
	interruptDisable();
8000064c:	f0 1f 00 3b 	mcall	80000738 <ROSA_tcbSuspend+0xf8>
	// check if tcbTask is null is missing
	if(SUSPENDEDLIST == NULL)
80000650:	4b b8       	lddpc	r8,8000073c <ROSA_tcbSuspend+0xfc>
80000652:	70 08       	ld.w	r8,r8[0x0]
80000654:	58 08       	cp.w	r8,0
80000656:	c1 51       	brne	80000680 <ROSA_tcbSuspend+0x40>
	{
		SUSPENDEDLIST = tcbTask;
80000658:	4b 98       	lddpc	r8,8000073c <ROSA_tcbSuspend+0xfc>
8000065a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000065e:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = tcbTask;
80000660:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000664:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000668:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = tcbTask;
8000066a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000066e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000672:	f1 49 00 70 	st.w	r8[112],r9
		SUSPENDEDLIST_end = tcbTask;
80000676:	4b 38       	lddpc	r8,80000740 <ROSA_tcbSuspend+0x100>
80000678:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000067c:	91 09       	st.w	r8[0x0],r9
8000067e:	c5 48       	rjmp	80000726 <ROSA_tcbSuspend+0xe6>
	}
	// add before the beginning
	else if(tcbTask->back_online_time < SUSPENDEDLIST->back_online_time)
80000680:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000684:	f0 ea 00 68 	ld.d	r10,r8[104]
80000688:	4a d8       	lddpc	r8,8000073c <ROSA_tcbSuspend+0xfc>
8000068a:	70 08       	ld.w	r8,r8[0x0]
8000068c:	f0 e8 00 68 	ld.d	r8,r8[104]
80000690:	10 3a       	cp.w	r10,r8
80000692:	f2 0b 13 00 	cpc	r11,r9
80000696:	c0 d2       	brcc	800006b0 <ROSA_tcbSuspend+0x70>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
80000698:	4a a8       	lddpc	r8,80000740 <ROSA_tcbSuspend+0x100>
8000069a:	70 08       	ld.w	r8,r8[0x0]
8000069c:	ee fb ff f8 	ld.w	r11,r7[-8]
800006a0:	10 9c       	mov	r12,r8
800006a2:	f0 1f 00 29 	mcall	80000744 <ROSA_tcbSuspend+0x104>
		SUSPENDEDLIST = tcbTask;
800006a6:	4a 68       	lddpc	r8,8000073c <ROSA_tcbSuspend+0xfc>
800006a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006ac:	91 09       	st.w	r8[0x0],r9
800006ae:	c3 c8       	rjmp	80000726 <ROSA_tcbSuspend+0xe6>
	}
	// add after the end
	else if(tcbTask->back_online_time >= SUSPENDEDLIST_end->back_online_time)
800006b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006b4:	f0 ea 00 68 	ld.d	r10,r8[104]
800006b8:	4a 28       	lddpc	r8,80000740 <ROSA_tcbSuspend+0x100>
800006ba:	70 08       	ld.w	r8,r8[0x0]
800006bc:	f0 e8 00 68 	ld.d	r8,r8[104]
800006c0:	10 3a       	cp.w	r10,r8
800006c2:	f2 0b 13 00 	cpc	r11,r9
800006c6:	c0 d3       	brcs	800006e0 <ROSA_tcbSuspend+0xa0>
	{
		insert_after(SUSPENDEDLIST_end, tcbTask);
800006c8:	49 e8       	lddpc	r8,80000740 <ROSA_tcbSuspend+0x100>
800006ca:	70 08       	ld.w	r8,r8[0x0]
800006cc:	ee fb ff f8 	ld.w	r11,r7[-8]
800006d0:	10 9c       	mov	r12,r8
800006d2:	f0 1f 00 1d 	mcall	80000744 <ROSA_tcbSuspend+0x104>
		SUSPENDEDLIST_end = tcbTask;
800006d6:	49 b8       	lddpc	r8,80000740 <ROSA_tcbSuspend+0x100>
800006d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800006dc:	91 09       	st.w	r8[0x0],r9
800006de:	c2 48       	rjmp	80000726 <ROSA_tcbSuspend+0xe6>
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
800006e0:	49 78       	lddpc	r8,8000073c <ROSA_tcbSuspend+0xfc>
800006e2:	70 08       	ld.w	r8,r8[0x0]
800006e4:	ef 48 ff fc 	st.w	r7[-4],r8
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time)
800006e8:	c0 68       	rjmp	800006f4 <ROSA_tcbSuspend+0xb4>
		{
			iterator = iterator->nexttcb;
800006ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ee:	70 08       	ld.w	r8,r8[0x0]
800006f0:	ef 48 ff fc 	st.w	r7[-4],r8
		SUSPENDEDLIST_end = tcbTask;
	}
	else
	{
		tcb * iterator = SUSPENDEDLIST;
		while(iterator && iterator->back_online_time <= tcbTask->back_online_time)
800006f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f8:	58 08       	cp.w	r8,0
800006fa:	c0 e0       	breq	80000716 <ROSA_tcbSuspend+0xd6>
800006fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000700:	f0 ea 00 68 	ld.d	r10,r8[104]
80000704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000708:	f0 e8 00 68 	ld.d	r8,r8[104]
8000070c:	10 3a       	cp.w	r10,r8
8000070e:	f2 0b 13 00 	cpc	r11,r9
80000712:	fe 98 ff ec 	brls	800006ea <ROSA_tcbSuspend+0xaa>
		{
			iterator = iterator->nexttcb;
		}
		
		insert_after(iterator->prevtcb, tcbTask);
80000716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000071a:	71 c8       	ld.w	r8,r8[0x70]
8000071c:	ee fb ff f8 	ld.w	r11,r7[-8]
80000720:	10 9c       	mov	r12,r8
80000722:	f0 1f 00 09 	mcall	80000744 <ROSA_tcbSuspend+0x104>
		//else
		//{
			//insert_after(iterator->prevtcb, tcbTask);
		//}
	}
	if (endCritical)
80000726:	48 98       	lddpc	r8,80000748 <ROSA_tcbSuspend+0x108>
80000728:	70 08       	ld.w	r8,r8[0x0]
8000072a:	58 08       	cp.w	r8,0
8000072c:	c0 30       	breq	80000732 <ROSA_tcbSuspend+0xf2>
		interruptEnable();
8000072e:	f0 1f 00 08 	mcall	8000074c <ROSA_tcbSuspend+0x10c>
}
80000732:	2f ed       	sub	sp,-8
80000734:	e3 cd 80 80 	ldm	sp++,r7,pc
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	1d 66       	ld.uh	r6,--lr
8000073c:	00 00       	add	r0,r0
8000073e:	05 6c       	ld.uh	r12,--r2
80000740:	00 00       	add	r0,r0
80000742:	05 74       	ld.ub	r4,--r2
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	00 08       	add	r8,r0
80000748:	00 00       	add	r0,r0
8000074a:	00 08       	add	r8,r0
8000074c:	80 00       	ld.sh	r0,r0[0x0]
8000074e:	1d 6a       	ld.uh	r10,--lr

80000750 <ROSA_tcbUnsuspend>:

void ROSA_tcbUnsuspend(tcb * tcbTask)
{
80000750:	eb cd 40 80 	pushm	r7,lr
80000754:	1a 97       	mov	r7,sp
80000756:	20 1d       	sub	sp,4
80000758:	ef 4c ff fc 	st.w	r7[-4],r12
	interruptDisable();
8000075c:	f0 1f 00 24 	mcall	800007ec <ROSA_tcbUnsuspend+0x9c>
	// if empty OR if only one element
	if(SUSPENDEDLIST == SUSPENDEDLIST_end)
80000760:	4a 48       	lddpc	r8,800007f0 <ROSA_tcbUnsuspend+0xa0>
80000762:	70 09       	ld.w	r9,r8[0x0]
80000764:	4a 48       	lddpc	r8,800007f4 <ROSA_tcbUnsuspend+0xa4>
80000766:	70 08       	ld.w	r8,r8[0x0]
80000768:	10 39       	cp.w	r9,r8
8000076a:	c0 81       	brne	8000077a <ROSA_tcbUnsuspend+0x2a>
	{
		SUSPENDEDLIST = NULL;
8000076c:	4a 18       	lddpc	r8,800007f0 <ROSA_tcbUnsuspend+0xa0>
8000076e:	30 09       	mov	r9,0
80000770:	91 09       	st.w	r8[0x0],r9
		SUSPENDEDLIST_end = NULL;
80000772:	4a 18       	lddpc	r8,800007f4 <ROSA_tcbUnsuspend+0xa4>
80000774:	30 09       	mov	r9,0
80000776:	91 09       	st.w	r8[0x0],r9
80000778:	c3 08       	rjmp	800007d8 <ROSA_tcbUnsuspend+0x88>
	}
	else
	{
		if(SUSPENDEDLIST == tcbTask)
8000077a:	49 e8       	lddpc	r8,800007f0 <ROSA_tcbUnsuspend+0xa0>
8000077c:	70 09       	ld.w	r9,r8[0x0]
8000077e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000782:	10 39       	cp.w	r9,r8
80000784:	c0 71       	brne	80000792 <ROSA_tcbUnsuspend+0x42>
		{
			SUSPENDEDLIST = tcbTask->nexttcb;
80000786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000078a:	70 09       	ld.w	r9,r8[0x0]
8000078c:	49 98       	lddpc	r8,800007f0 <ROSA_tcbUnsuspend+0xa0>
8000078e:	91 09       	st.w	r8[0x0],r9
80000790:	c0 c8       	rjmp	800007a8 <ROSA_tcbUnsuspend+0x58>
		}
		else if(SUSPENDEDLIST_end == tcbTask)
80000792:	49 98       	lddpc	r8,800007f4 <ROSA_tcbUnsuspend+0xa4>
80000794:	70 09       	ld.w	r9,r8[0x0]
80000796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000079a:	10 39       	cp.w	r9,r8
8000079c:	c0 61       	brne	800007a8 <ROSA_tcbUnsuspend+0x58>
		{
			SUSPENDEDLIST_end = tcbTask->prevtcb;
8000079e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a2:	71 c9       	ld.w	r9,r8[0x70]
800007a4:	49 48       	lddpc	r8,800007f4 <ROSA_tcbUnsuspend+0xa4>
800007a6:	91 09       	st.w	r8[0x0],r9
		}
		
		tcbTask->prevtcb->nexttcb = tcbTask->nexttcb;
800007a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ac:	71 c8       	ld.w	r8,r8[0x70]
800007ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007b2:	72 09       	ld.w	r9,r9[0x0]
800007b4:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb->prevtcb = tcbTask->prevtcb;
800007b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ba:	70 08       	ld.w	r8,r8[0x0]
800007bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800007c0:	73 c9       	ld.w	r9,r9[0x70]
800007c2:	f1 49 00 70 	st.w	r8[112],r9
	
		tcbTask->nexttcb = NULL;
800007c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007ca:	30 09       	mov	r9,0
800007cc:	91 09       	st.w	r8[0x0],r9
		tcbTask->prevtcb = NULL;
800007ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007d2:	30 09       	mov	r9,0
800007d4:	f1 49 00 70 	st.w	r8[112],r9
	}
	if (endCritical)
800007d8:	48 88       	lddpc	r8,800007f8 <ROSA_tcbUnsuspend+0xa8>
800007da:	70 08       	ld.w	r8,r8[0x0]
800007dc:	58 08       	cp.w	r8,0
800007de:	c0 30       	breq	800007e4 <ROSA_tcbUnsuspend+0x94>
		interruptEnable();
800007e0:	f0 1f 00 07 	mcall	800007fc <ROSA_tcbUnsuspend+0xac>
}
800007e4:	2f fd       	sub	sp,-4
800007e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800007ea:	00 00       	add	r0,r0
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	1d 66       	ld.uh	r6,--lr
800007f0:	00 00       	add	r0,r0
800007f2:	05 6c       	ld.uh	r12,--r2
800007f4:	00 00       	add	r0,r0
800007f6:	05 74       	ld.ub	r4,--r2
800007f8:	00 00       	add	r0,r0
800007fa:	00 08       	add	r8,r0
800007fc:	80 00       	ld.sh	r0,r0[0x0]
800007fe:	1d 6a       	ld.uh	r10,--lr

80000800 <ROSA_taskCreate>:
		//TCBLIST = tcbTask;
	//}
//}

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
80000800:	eb cd 40 80 	pushm	r7,lr
80000804:	1a 97       	mov	r7,sp
80000806:	20 7d       	sub	sp,28
80000808:	ef 4c ff f4 	st.w	r7[-12],r12
8000080c:	ef 4b ff f0 	st.w	r7[-16],r11
80000810:	ef 4a ff ec 	st.w	r7[-20],r10
80000814:	ef 49 ff e8 	st.w	r7[-24],r9
80000818:	ef 68 ff e4 	st.b	r7[-28],r8
	endCritical = 0;
8000081c:	4a b8       	lddpc	r8,800008c8 <ROSA_taskCreate+0xc8>
8000081e:	30 09       	mov	r9,0
80000820:	91 09       	st.w	r8[0x0],r9
	interruptDisable();
80000822:	f0 1f 00 2b 	mcall	800008cc <ROSA_taskCreate+0xcc>
	int16_t result = -1;
80000826:	3f f8       	mov	r8,-1
80000828:	ef 58 ff fa 	st.h	r7[-6],r8
	
	(*th) = (tcb*)calloc(1,sizeof(tcb));
8000082c:	37 4b       	mov	r11,116
8000082e:	30 1c       	mov	r12,1
80000830:	f0 1f 00 28 	mcall	800008d0 <ROSA_taskCreate+0xd0>
80000834:	18 98       	mov	r8,r12
80000836:	10 99       	mov	r9,r8
80000838:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000083c:	91 09       	st.w	r8[0x0],r9
	int* dynamic_stack = (int*)calloc(stackSize, sizeof(int));
8000083e:	30 4b       	mov	r11,4
80000840:	ee fc ff e8 	ld.w	r12,r7[-24]
80000844:	f0 1f 00 23 	mcall	800008d0 <ROSA_taskCreate+0xd0>
80000848:	18 98       	mov	r8,r12
8000084a:	ef 48 ff fc 	st.w	r7[-4],r8
	(*th)->priority = priority;
8000084e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000852:	70 09       	ld.w	r9,r8[0x0]
80000854:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000858:	f3 68 00 64 	st.b	r9[100],r8
	(*th)->effective_priority = priority;
8000085c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000860:	70 09       	ld.w	r9,r8[0x0]
80000862:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80000866:	f3 68 00 65 	st.b	r9[101],r8
	(*th)->status = 1;
8000086a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000086e:	70 09       	ld.w	r9,r8[0x0]
80000870:	30 18       	mov	r8,1
80000872:	f3 68 00 66 	st.b	r9[102],r8
	(*th)->back_online_time = 0;
80000876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000087a:	70 0a       	ld.w	r10,r8[0x0]
8000087c:	30 08       	mov	r8,0
8000087e:	30 09       	mov	r9,0
80000880:	f4 e9 00 68 	st.d	r10[104],r8
		
	ROSA_tcbCreate(*th, id, taskFunc, dynamic_stack, stackSize);
80000884:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000888:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000088c:	72 0c       	ld.w	r12,r9[0x0]
8000088e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000892:	ee fa ff ec 	ld.w	r10,r7[-20]
80000896:	ee fb ff f0 	ld.w	r11,r7[-16]
8000089a:	f0 1f 00 0f 	mcall	800008d4 <ROSA_taskCreate+0xd4>
	ROSA_tcbInstall(*th);
8000089e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800008a2:	70 08       	ld.w	r8,r8[0x0]
800008a4:	10 9c       	mov	r12,r8
800008a6:	f0 1f 00 0d 	mcall	800008d8 <ROSA_taskCreate+0xd8>
	if (endCritical)
800008aa:	48 88       	lddpc	r8,800008c8 <ROSA_taskCreate+0xc8>
800008ac:	70 08       	ld.w	r8,r8[0x0]
800008ae:	58 08       	cp.w	r8,0
800008b0:	c0 60       	breq	800008bc <ROSA_taskCreate+0xbc>
	{
		endCritical = 1;
800008b2:	48 68       	lddpc	r8,800008c8 <ROSA_taskCreate+0xc8>
800008b4:	30 19       	mov	r9,1
800008b6:	91 09       	st.w	r8[0x0],r9
		interruptEnable();
800008b8:	f0 1f 00 09 	mcall	800008dc <ROSA_taskCreate+0xdc>
	}
	return result;
800008bc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
800008c0:	10 9c       	mov	r12,r8
800008c2:	2f 9d       	sub	sp,-28
800008c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800008c8:	00 00       	add	r0,r0
800008ca:	00 08       	add	r8,r0
800008cc:	80 00       	ld.sh	r0,r0[0x0]
800008ce:	1d 66       	ld.uh	r6,--lr
800008d0:	80 00       	ld.sh	r0,r0[0x0]
800008d2:	13 f0       	ld.ub	r0,r9[0x7]
800008d4:	80 00       	ld.sh	r0,r0[0x0]
800008d6:	03 50       	ld.sh	r0,--r1
800008d8:	80 00       	ld.sh	r0,r0[0x0]
800008da:	04 20       	rsub	r0,r2
800008dc:	80 00       	ld.sh	r0,r0[0x0]
800008de:	1d 6a       	ld.uh	r10,--lr

800008e0 <ROSA_delay>:
	return result;
}


int16_t ROSA_delay(uint64_t ticks)
{
800008e0:	eb cd 40 c0 	pushm	r6-r7,lr
800008e4:	1a 97       	mov	r7,sp
800008e6:	20 2d       	sub	sp,8
800008e8:	ee eb ff f8 	st.d	r7[-8],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
800008ec:	f0 1f 00 15 	mcall	80000940 <ROSA_delay+0x60>
	endCritical = 0;
800008f0:	49 58       	lddpc	r8,80000944 <ROSA_delay+0x64>
800008f2:	30 09       	mov	r9,0
800008f4:	91 09       	st.w	r8[0x0],r9
	ROSA_tcbUninstall(EXECTASK);
800008f6:	49 58       	lddpc	r8,80000948 <ROSA_delay+0x68>
800008f8:	70 08       	ld.w	r8,r8[0x0]
800008fa:	10 9c       	mov	r12,r8
800008fc:	f0 1f 00 14 	mcall	8000094c <ROSA_delay+0x6c>
	EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
80000900:	49 28       	lddpc	r8,80000948 <ROSA_delay+0x68>
80000902:	70 06       	ld.w	r6,r8[0x0]
80000904:	f0 1f 00 13 	mcall	80000950 <ROSA_delay+0x70>
80000908:	14 98       	mov	r8,r10
8000090a:	16 99       	mov	r9,r11
8000090c:	10 9a       	mov	r10,r8
8000090e:	12 9b       	mov	r11,r9
80000910:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000914:	f4 08 00 08 	add	r8,r10,r8
80000918:	f6 09 00 49 	adc	r9,r11,r9
8000091c:	ec e9 00 68 	st.d	r6[104],r8
	ROSA_tcbSuspend(EXECTASK);
80000920:	48 a8       	lddpc	r8,80000948 <ROSA_delay+0x68>
80000922:	70 08       	ld.w	r8,r8[0x0]
80000924:	10 9c       	mov	r12,r8
80000926:	f0 1f 00 0c 	mcall	80000954 <ROSA_delay+0x74>
	endCritical = 1;
8000092a:	48 78       	lddpc	r8,80000944 <ROSA_delay+0x64>
8000092c:	30 19       	mov	r9,1
8000092e:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
80000930:	f0 1f 00 0a 	mcall	80000958 <ROSA_delay+0x78>
	ROSA_yield();
80000934:	f0 1f 00 0a 	mcall	8000095c <ROSA_delay+0x7c>
}
80000938:	2f ed       	sub	sp,-8
8000093a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000093e:	00 00       	add	r0,r0
80000940:	80 00       	ld.sh	r0,r0[0x0]
80000942:	1d 66       	ld.uh	r6,--lr
80000944:	00 00       	add	r0,r0
80000946:	00 08       	add	r8,r0
80000948:	00 00       	add	r0,r0
8000094a:	05 98       	ld.ub	r8,r2[0x1]
8000094c:	80 00       	ld.sh	r0,r0[0x0]
8000094e:	05 48       	ld.w	r8,--r2
80000950:	80 00       	ld.sh	r0,r0[0x0]
80000952:	0c e4       	st.h	--r6,r4
80000954:	80 00       	ld.sh	r0,r0[0x0]
80000956:	06 40       	or	r0,r3
80000958:	80 00       	ld.sh	r0,r0[0x0]
8000095a:	1d 6a       	ld.uh	r10,--lr
8000095c:	80 00       	ld.sh	r0,r0[0x0]
8000095e:	0a ba       	st.h	r5++,r10

80000960 <ROSA_delayUntil>:

int16_t ROSA_delayUntil(uint64_t* lastWakeTime, uint64_t ticks)
{
80000960:	eb cd 40 80 	pushm	r7,lr
80000964:	1a 97       	mov	r7,sp
80000966:	20 3d       	sub	sp,12
80000968:	ef 4c ff fc 	st.w	r7[-4],r12
8000096c:	ee eb ff f4 	st.d	r7[-12],r10
	//remove_tcb(EXECTASK);
	//EXECTASK->back_online_time=lastWakeTime+ticks;
	//*lastWakeTime=*lastWakeTime+ticks;
	//insert_by_back_online_time(suspended_list, EXECTASK);
	interruptDisable();
80000970:	f0 1f 00 1b 	mcall	800009dc <ROSA_delayUntil+0x7c>
	endCritical = 0;
80000974:	49 b8       	lddpc	r8,800009e0 <ROSA_delayUntil+0x80>
80000976:	30 09       	mov	r9,0
80000978:	91 09       	st.w	r8[0x0],r9
	ROSA_tcbUninstall(EXECTASK);
8000097a:	49 b8       	lddpc	r8,800009e4 <ROSA_delayUntil+0x84>
8000097c:	70 08       	ld.w	r8,r8[0x0]
8000097e:	10 9c       	mov	r12,r8
80000980:	f0 1f 00 1a 	mcall	800009e8 <ROSA_delayUntil+0x88>
	EXECTASK->back_online_time=*lastWakeTime+ticks;
80000984:	49 88       	lddpc	r8,800009e4 <ROSA_delayUntil+0x84>
80000986:	70 0c       	ld.w	r12,r8[0x0]
80000988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000098c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000990:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000994:	f4 08 00 08 	add	r8,r10,r8
80000998:	f6 09 00 49 	adc	r9,r11,r9
8000099c:	f8 e9 00 68 	st.d	r12[104],r8
	*lastWakeTime=*lastWakeTime+ticks;
800009a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009a4:	f0 ea 00 00 	ld.d	r10,r8[0]
800009a8:	ee e8 ff f4 	ld.d	r8,r7[-12]
800009ac:	f4 08 00 08 	add	r8,r10,r8
800009b0:	f6 09 00 49 	adc	r9,r11,r9
800009b4:	ee fa ff fc 	ld.w	r10,r7[-4]
800009b8:	f4 e9 00 00 	st.d	r10[0],r8
	//EXECTASK->back_online_time=ROSA_getTickCount()+ticks;
	ROSA_tcbSuspend(EXECTASK);
800009bc:	48 a8       	lddpc	r8,800009e4 <ROSA_delayUntil+0x84>
800009be:	70 08       	ld.w	r8,r8[0x0]
800009c0:	10 9c       	mov	r12,r8
800009c2:	f0 1f 00 0b 	mcall	800009ec <ROSA_delayUntil+0x8c>
	endCritical = 1;
800009c6:	48 78       	lddpc	r8,800009e0 <ROSA_delayUntil+0x80>
800009c8:	30 19       	mov	r9,1
800009ca:	91 09       	st.w	r8[0x0],r9
	interruptEnable();
800009cc:	f0 1f 00 09 	mcall	800009f0 <ROSA_delayUntil+0x90>
	ROSA_yield();
800009d0:	f0 1f 00 09 	mcall	800009f4 <ROSA_delayUntil+0x94>
}
800009d4:	2f dd       	sub	sp,-12
800009d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800009da:	00 00       	add	r0,r0
800009dc:	80 00       	ld.sh	r0,r0[0x0]
800009de:	1d 66       	ld.uh	r6,--lr
800009e0:	00 00       	add	r0,r0
800009e2:	00 08       	add	r8,r0
800009e4:	00 00       	add	r0,r0
800009e6:	05 98       	ld.ub	r8,r2[0x1]
800009e8:	80 00       	ld.sh	r0,r0[0x0]
800009ea:	05 48       	ld.w	r8,--r2
800009ec:	80 00       	ld.sh	r0,r0[0x0]
800009ee:	06 40       	or	r0,r3
800009f0:	80 00       	ld.sh	r0,r0[0x0]
800009f2:	1d 6a       	ld.uh	r10,--lr
800009f4:	80 00       	ld.sh	r0,r0[0x0]
800009f6:	0a ba       	st.h	r5++,r10

800009f8 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
800009f8:	4b 5c       	lddpc	r12,80000acc <_yield+0xa>
	lda.w r11,EXECTASK
800009fa:	4b 6b       	lddpc	r11,80000ad0 <_yield+0xe>
	ld.w r12,r12[0x0]
800009fc:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
800009fe:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000a00:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000a02:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000a04:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000a08:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
80000a0a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
80000a0c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
80000a0e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000a12:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000a14:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000a16:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000a18:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
80000a1a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
80000a1c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
80000a1e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000a20:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000a22:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000a24:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000a26:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000a28:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000a2a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
80000a2c:	1c 9f       	mov	pc,lr

80000a2e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
80000a2e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000a30:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000a32:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000a34:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000a38:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
80000a3c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000a40:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000a44:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000a48:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
80000a4c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
80000a50:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
80000a54:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
80000a58:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
80000a5a:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
80000a5c:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
80000a5e:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
80000a60:	1c 9f       	mov	pc,lr

80000a62 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
80000a62:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000a64:	49 bc       	lddpc	r12,80000ad0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000a66:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
80000a68:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
80000a6a:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
80000a6c:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
80000a6e:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
80000a70:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
80000a72:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
80000a74:	33 40       	mov	r0,52
	add r0,r12
80000a76:	18 00       	add	r0,r12
	stmts r0,r0-r11
80000a78:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
80000a7c:	1a 90       	mov	r0,sp
	st.w --sp,r0
80000a7e:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80000a80:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
80000a84:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
80000a86:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
80000a88:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
80000a8a:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
80000a8c:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
80000a8e:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
80000a90:	1c 9f       	mov	pc,lr

80000a92 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80000a92:	49 0c       	lddpc	r12,80000ad0 <_yield+0xe>
	ld.w r12,r12[0x0]
80000a94:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
80000a96:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
80000a98:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
80000a9a:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
80000a9e:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
80000aa0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80000aa2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
80000aa4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80000aa6:	33 40       	mov	r0,52
	add r0,r12
80000aa8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80000aaa:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80000aae:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000ab0:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000ab2:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000ab4:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000ab6:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000ab8:	d6 13       	rets

80000aba <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
80000aba:	d4 01       	pushm	lr
	lda.w lr,_yield
80000abc:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000ac0:	d7 33       	scall

80000ac2 <_yield>:
_yield:
	call contextSave
80000ac2:	cd 0f       	rcall	80000a62 <contextSave>
	call scheduler
80000ac4:	f0 1f 00 04 	mcall	80000ad4 <_yield+0x12>
	call contextRestore
80000ac8:	ce 5f       	rcall	80000a92 <contextRestore>
80000aca:	00 00       	add	r0,r0
80000acc:	00 00       	add	r0,r0
80000ace:	05 68       	ld.uh	r8,--r2
80000ad0:	00 00       	add	r0,r0
80000ad2:	05 98       	ld.ub	r8,r2[0x1]
80000ad4:	80 00       	ld.sh	r0,r0[0x0]
80000ad6:	0a d8       	st.w	--r5,r8

80000ad8 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
80000ad8:	eb cd 40 80 	pushm	r7,lr
80000adc:	1a 97       	mov	r7,sp
80000ade:	20 3d       	sub	sp,12
	endCritical = 0;
80000ae0:	4b a8       	lddpc	r8,80000bc8 <scheduler+0xf0>
80000ae2:	30 09       	mov	r9,0
80000ae4:	91 09       	st.w	r8[0x0],r9
	//interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
80000ae6:	4b a8       	lddpc	r8,80000bcc <scheduler+0xf4>
80000ae8:	70 08       	ld.w	r8,r8[0x0]
80000aea:	ef 48 ff f4 	st.w	r7[-12],r8
	uint64_t current_time = ROSA_getTickCount();
80000aee:	f0 1f 00 39 	mcall	80000bd0 <scheduler+0xf8>
80000af2:	14 98       	mov	r8,r10
80000af4:	16 99       	mov	r9,r11
80000af6:	ee e9 ff f8 	st.d	r7[-8],r8
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000afa:	c0 d8       	rjmp	80000b14 <scheduler+0x3c>
	{
		ROSA_tcbUnsuspend(iterator);
80000afc:	ee fc ff f4 	ld.w	r12,r7[-12]
80000b00:	f0 1f 00 35 	mcall	80000bd4 <scheduler+0xfc>
		ROSA_tcbInstall(iterator);
80000b04:	ee fc ff f4 	ld.w	r12,r7[-12]
80000b08:	f0 1f 00 34 	mcall	80000bd8 <scheduler+0x100>
		iterator = SUSPENDEDLIST;
80000b0c:	4b 08       	lddpc	r8,80000bcc <scheduler+0xf4>
80000b0e:	70 08       	ld.w	r8,r8[0x0]
80000b10:	ef 48 ff f4 	st.w	r7[-12],r8
{
	endCritical = 0;
	//interruptDisable();
	tcb * iterator = SUSPENDEDLIST;
	uint64_t current_time = ROSA_getTickCount();
	while( iterator != NULL && iterator->back_online_time <= current_time ) //for every suspended task that is now ready
80000b14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b18:	58 08       	cp.w	r8,0
80000b1a:	c0 c0       	breq	80000b32 <scheduler+0x5a>
80000b1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b20:	f0 ea 00 68 	ld.d	r10,r8[104]
80000b24:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000b28:	10 3a       	cp.w	r10,r8
80000b2a:	f2 0b 13 00 	cpc	r11,r9
80000b2e:	fe 98 ff e7 	brls	80000afc <scheduler+0x24>
	{
		ROSA_tcbUnsuspend(iterator);
		ROSA_tcbInstall(iterator);
		iterator = SUSPENDEDLIST;
	}
	if(roundRobinTicks != 0 && ROUNDROBINEND != NULL && EXECTASK->effective_priority == ROUNDROBINEND->effective_priority && (idle_task_handle != EXECTASK))
80000b32:	4a b8       	lddpc	r8,80000bdc <scheduler+0x104>
80000b34:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b38:	58 08       	cp.w	r8,0
80000b3a:	5c 29       	cpc	r9
80000b3c:	c3 b0       	breq	80000bb2 <scheduler+0xda>
80000b3e:	4a 98       	lddpc	r8,80000be0 <scheduler+0x108>
80000b40:	70 08       	ld.w	r8,r8[0x0]
80000b42:	58 08       	cp.w	r8,0
80000b44:	c3 70       	breq	80000bb2 <scheduler+0xda>
80000b46:	4a 88       	lddpc	r8,80000be4 <scheduler+0x10c>
80000b48:	70 08       	ld.w	r8,r8[0x0]
80000b4a:	f1 39 00 65 	ld.ub	r9,r8[101]
80000b4e:	4a 58       	lddpc	r8,80000be0 <scheduler+0x108>
80000b50:	70 08       	ld.w	r8,r8[0x0]
80000b52:	f1 38 00 65 	ld.ub	r8,r8[101]
80000b56:	f0 09 18 00 	cp.b	r9,r8
80000b5a:	c2 c1       	brne	80000bb2 <scheduler+0xda>
80000b5c:	4a 38       	lddpc	r8,80000be8 <scheduler+0x110>
80000b5e:	70 09       	ld.w	r9,r8[0x0]
80000b60:	4a 18       	lddpc	r8,80000be4 <scheduler+0x10c>
80000b62:	70 08       	ld.w	r8,r8[0x0]
80000b64:	10 39       	cp.w	r9,r8
80000b66:	c2 60       	breq	80000bb2 <scheduler+0xda>
	{
		roundRobinCounter++;
80000b68:	4a 18       	lddpc	r8,80000bec <scheduler+0x114>
80000b6a:	f0 ea 00 00 	ld.d	r10,r8[0]
80000b6e:	30 18       	mov	r8,1
80000b70:	30 09       	mov	r9,0
80000b72:	f4 08 00 08 	add	r8,r10,r8
80000b76:	f6 09 00 49 	adc	r9,r11,r9
80000b7a:	49 da       	lddpc	r10,80000bec <scheduler+0x114>
80000b7c:	f4 e9 00 00 	st.d	r10[0],r8
		if(roundRobinCounter >= roundRobinTicks)
80000b80:	49 b8       	lddpc	r8,80000bec <scheduler+0x114>
80000b82:	f0 ea 00 00 	ld.d	r10,r8[0]
80000b86:	49 68       	lddpc	r8,80000bdc <scheduler+0x104>
80000b88:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b8c:	10 3a       	cp.w	r10,r8
80000b8e:	f2 0b 13 00 	cpc	r11,r9
80000b92:	c1 03       	brcs	80000bb2 <scheduler+0xda>
		{
			roundRobinCounter = 0;
80000b94:	49 6a       	lddpc	r10,80000bec <scheduler+0x114>
80000b96:	30 08       	mov	r8,0
80000b98:	30 09       	mov	r9,0
80000b9a:	f4 e9 00 00 	st.d	r10[0],r8
			ROSA_tcbUninstall(EXECTASK);
80000b9e:	49 28       	lddpc	r8,80000be4 <scheduler+0x10c>
80000ba0:	70 08       	ld.w	r8,r8[0x0]
80000ba2:	10 9c       	mov	r12,r8
80000ba4:	f0 1f 00 13 	mcall	80000bf0 <scheduler+0x118>
			//insert_after(ROUNDROBINEND, EXECTASK);
			//ROUNDROBINEND = EXECTASK;
			ROSA_tcbInstall(EXECTASK);
80000ba8:	48 f8       	lddpc	r8,80000be4 <scheduler+0x10c>
80000baa:	70 08       	ld.w	r8,r8[0x0]
80000bac:	10 9c       	mov	r12,r8
80000bae:	f0 1f 00 0b 	mcall	80000bd8 <scheduler+0x100>
		}
	}
	//Find the next task to execute
	//EXECTASK = EXECTASK->nexttcb;
	
	EXECTASK=TCBLIST;
80000bb2:	49 18       	lddpc	r8,80000bf4 <scheduler+0x11c>
80000bb4:	70 09       	ld.w	r9,r8[0x0]
80000bb6:	48 c8       	lddpc	r8,80000be4 <scheduler+0x10c>
80000bb8:	91 09       	st.w	r8[0x0],r9
	endCritical = 1;
80000bba:	48 48       	lddpc	r8,80000bc8 <scheduler+0xf0>
80000bbc:	30 19       	mov	r9,1
80000bbe:	91 09       	st.w	r8[0x0],r9
	//interruptEnable();
}
80000bc0:	2f dd       	sub	sp,-12
80000bc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80000bc6:	00 00       	add	r0,r0
80000bc8:	00 00       	add	r0,r0
80000bca:	00 08       	add	r8,r0
80000bcc:	00 00       	add	r0,r0
80000bce:	05 6c       	ld.uh	r12,--r2
80000bd0:	80 00       	ld.sh	r0,r0[0x0]
80000bd2:	0c e4       	st.h	--r6,r4
80000bd4:	80 00       	ld.sh	r0,r0[0x0]
80000bd6:	07 50       	ld.sh	r0,--r3
80000bd8:	80 00       	ld.sh	r0,r0[0x0]
80000bda:	04 20       	rsub	r0,r2
80000bdc:	00 00       	add	r0,r0
80000bde:	00 0c       	add	r12,r0
80000be0:	00 00       	add	r0,r0
80000be2:	05 28       	ld.uh	r8,r2++
80000be4:	00 00       	add	r0,r0
80000be6:	05 98       	ld.ub	r8,r2[0x1]
80000be8:	00 00       	add	r0,r0
80000bea:	05 64       	ld.uh	r4,--r2
80000bec:	00 00       	add	r0,r0
80000bee:	05 20       	ld.uh	r0,r2++
80000bf0:	80 00       	ld.sh	r0,r0[0x0]
80000bf2:	05 48       	ld.w	r8,--r2
80000bf4:	00 00       	add	r0,r0
80000bf6:	05 68       	ld.uh	r8,--r2

80000bf8 <C.0.9448>:
80000bf8:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000c08 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000c08:	eb cd 40 80 	pushm	r7,lr
80000c0c:	1a 97       	mov	r7,sp
80000c0e:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000c10:	fe 78 38 00 	mov	r8,-51200
80000c14:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c1c:	70 88       	ld.w	r8,r8[0x20]
80000c1e:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
80000c22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000c26:	e2 18 00 10 	andl	r8,0x10,COH
80000c2a:	c0 30       	breq	80000c30 <timerISR+0x28>
	{
		ROSA_yieldFromISR();
80000c2c:	f0 1f 00 03 	mcall	80000c38 <timerISR+0x30>
	}
}
80000c30:	2f ed       	sub	sp,-8
80000c32:	e3 cd 40 80 	ldm	sp++,r7,lr
80000c36:	d6 03       	rete
80000c38:	80 00       	ld.sh	r0,r0[0x0]
80000c3a:	02 4c       	or	r12,r1

80000c3c <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000c3c:	eb cd 40 80 	pushm	r7,lr
80000c40:	1a 97       	mov	r7,sp
80000c42:	20 7d       	sub	sp,28
80000c44:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000c48:	4a 48       	lddpc	r8,80000cd8 <timerPeriodSet+0x9c>
80000c4a:	ee ca 00 18 	sub	r10,r7,24
80000c4e:	10 9b       	mov	r11,r8
80000c50:	f6 e8 00 00 	ld.d	r8,r11[0]
80000c54:	f4 e9 00 00 	st.d	r10[0],r8
80000c58:	f6 e8 00 08 	ld.d	r8,r11[8]
80000c5c:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000c60:	30 48       	mov	r8,4
80000c62:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c6a:	20 18       	sub	r8,1
80000c6c:	a3 68       	lsl	r8,0x2
80000c6e:	ee 08 00 08 	add	r8,r7,r8
80000c72:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000c76:	e0 68 1b 00 	mov	r8,6912
80000c7a:	ea 18 00 b7 	orh	r8,0xb7
80000c7e:	f0 09 0c 08 	divs	r8,r8,r9
80000c82:	10 99       	mov	r9,r8
80000c84:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c88:	b1 39       	mul	r9,r8
80000c8a:	e0 68 4d d3 	mov	r8,19923
80000c8e:	ea 18 10 62 	orh	r8,0x1062
80000c92:	f2 08 06 48 	mulu.d	r8,r9,r8
80000c96:	f2 08 16 06 	lsr	r8,r9,0x6
80000c9a:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000c9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000ca2:	f0 1f 00 0f 	mcall	80000cdc <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000ca6:	ee fc ff f8 	ld.w	r12,r7[-8]
80000caa:	f0 1f 00 0e 	mcall	80000ce0 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000cae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000cb6:	f2 08 02 4a 	mul	r10,r9,r8
80000cba:	e0 68 9f 81 	mov	r8,40833
80000cbe:	ea 18 16 5e 	orh	r8,0x165e
80000cc2:	f4 08 04 48 	muls.d	r8,r10,r8
80000cc6:	b5 49       	asr	r9,0x14
80000cc8:	f4 08 14 1f 	asr	r8,r10,0x1f
80000ccc:	f2 08 01 08 	sub	r8,r9,r8
}
80000cd0:	10 9c       	mov	r12,r8
80000cd2:	2f 9d       	sub	sp,-28
80000cd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cd8:	80 00       	ld.sh	r0,r0[0x0]
80000cda:	0b f8       	ld.ub	r8,r5[0x7]
80000cdc:	80 00       	ld.sh	r0,r0[0x0]
80000cde:	13 2c       	ld.uh	r12,r9++
80000ce0:	80 00       	ld.sh	r0,r0[0x0]
80000ce2:	13 16       	ld.sh	r6,r9++

80000ce4 <ROSA_getTickCount>:
 * Comment:
 * 	returns the current number of system ticks since start.
 *
 **********************************************************/
int64_t ROSA_getTickCount(void)
{
80000ce4:	eb cd 40 80 	pushm	r7,lr
80000ce8:	1a 97       	mov	r7,sp
	return system_ticks;
80000cea:	48 48       	lddpc	r8,80000cf8 <ROSA_getTickCount+0x14>
80000cec:	f0 e8 00 00 	ld.d	r8,r8[0]
80000cf0:	10 9a       	mov	r10,r8
80000cf2:	12 9b       	mov	r11,r9
80000cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000cf8:	00 00       	add	r0,r0
80000cfa:	05 84       	ld.ub	r4,r2[0x0]

80000cfc <buttonInit>:
80000cfc:	eb cd 40 80 	pushm	r7,lr
80000d00:	1a 97       	mov	r7,sp
80000d02:	30 1b       	mov	r11,1
80000d04:	35 8c       	mov	r12,88
80000d06:	f0 1f 00 07 	mcall	80000d20 <buttonInit+0x24>
80000d0a:	30 1b       	mov	r11,1
80000d0c:	35 5c       	mov	r12,85
80000d0e:	f0 1f 00 05 	mcall	80000d20 <buttonInit+0x24>
80000d12:	30 1b       	mov	r11,1
80000d14:	35 2c       	mov	r12,82
80000d16:	f0 1f 00 03 	mcall	80000d20 <buttonInit+0x24>
80000d1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d1e:	00 00       	add	r0,r0
80000d20:	80 00       	ld.sh	r0,r0[0x0]
80000d22:	0d 5c       	ld.sh	r12,--r6

80000d24 <joystickInit>:
80000d24:	eb cd 40 80 	pushm	r7,lr
80000d28:	1a 97       	mov	r7,sp
80000d2a:	30 1b       	mov	r11,1
80000d2c:	31 bc       	mov	r12,27
80000d2e:	f0 1f 00 0b 	mcall	80000d58 <joystickInit+0x34>
80000d32:	30 1b       	mov	r11,1
80000d34:	31 9c       	mov	r12,25
80000d36:	f0 1f 00 09 	mcall	80000d58 <joystickInit+0x34>
80000d3a:	30 1b       	mov	r11,1
80000d3c:	31 cc       	mov	r12,28
80000d3e:	f0 1f 00 07 	mcall	80000d58 <joystickInit+0x34>
80000d42:	30 1b       	mov	r11,1
80000d44:	31 4c       	mov	r12,20
80000d46:	f0 1f 00 05 	mcall	80000d58 <joystickInit+0x34>
80000d4a:	30 1b       	mov	r11,1
80000d4c:	31 ac       	mov	r12,26
80000d4e:	f0 1f 00 03 	mcall	80000d58 <joystickInit+0x34>
80000d52:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d56:	00 00       	add	r0,r0
80000d58:	80 00       	ld.sh	r0,r0[0x0]
80000d5a:	0d 5c       	ld.sh	r12,--r6

80000d5c <gpioInit>:
80000d5c:	eb cd 40 80 	pushm	r7,lr
80000d60:	1a 97       	mov	r7,sp
80000d62:	20 7d       	sub	sp,28
80000d64:	ef 4c ff ec 	st.w	r7[-20],r12
80000d68:	ef 4b ff e8 	st.w	r7[-24],r11
80000d6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d70:	a5 58       	asr	r8,0x5
80000d72:	ef 48 ff f4 	st.w	r7[-12],r8
80000d76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000d7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000d7e:	ef 48 ff fc 	st.w	r7[-4],r8
80000d82:	30 19       	mov	r9,1
80000d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d88:	f2 08 09 48 	lsl	r8,r9,r8
80000d8c:	ef 48 ff f8 	st.w	r7[-8],r8
80000d90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000d94:	a9 68       	lsl	r8,0x8
80000d96:	e0 28 f0 00 	sub	r8,61440
80000d9a:	ef 48 ff f0 	st.w	r7[-16],r8
80000d9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000da2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000da6:	91 19       	st.w	r8[0x4],r9
80000da8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000db0:	91 69       	st.w	r8[0x18],r9
80000db2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000db6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dba:	91 a9       	st.w	r8[0x28],r9
80000dbc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000dc0:	ef 48 ff e4 	st.w	r7[-28],r8
80000dc4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000dc8:	58 08       	cp.w	r8,0
80000dca:	c0 60       	breq	80000dd6 <gpioInit+0x7a>
80000dcc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000dd0:	58 18       	cp.w	r8,1
80000dd2:	c0 90       	breq	80000de4 <gpioInit+0x88>
80000dd4:	c0 f8       	rjmp	80000df2 <gpioInit+0x96>
80000dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000dda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dde:	f1 49 00 44 	st.w	r8[68],r9
80000de2:	c0 e8       	rjmp	80000dfe <gpioInit+0xa2>
80000de4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000de8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dec:	f1 49 00 48 	st.w	r8[72],r9
80000df0:	c0 78       	rjmp	80000dfe <gpioInit+0xa2>
80000df2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000df6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000dfa:	f1 49 00 48 	st.w	r8[72],r9
80000dfe:	2f 9d       	sub	sp,-28
80000e00:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e04 <gpioClear>:
80000e04:	eb cd 40 80 	pushm	r7,lr
80000e08:	1a 97       	mov	r7,sp
80000e0a:	20 5d       	sub	sp,20
80000e0c:	ef 4c ff ec 	st.w	r7[-20],r12
80000e10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e14:	a5 58       	asr	r8,0x5
80000e16:	ef 48 ff f4 	st.w	r7[-12],r8
80000e1a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e22:	ef 48 ff fc 	st.w	r7[-4],r8
80000e26:	30 19       	mov	r9,1
80000e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e2c:	f2 08 09 48 	lsl	r8,r9,r8
80000e30:	ef 48 ff f8 	st.w	r7[-8],r8
80000e34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e38:	a9 68       	lsl	r8,0x8
80000e3a:	e0 28 f0 00 	sub	r8,61440
80000e3e:	ef 48 ff f0 	st.w	r7[-16],r8
80000e42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e4a:	f1 49 00 58 	st.w	r8[88],r9
80000e4e:	2f bd       	sub	sp,-20
80000e50:	e3 cd 80 80 	ldm	sp++,r7,pc

80000e54 <gpioSet>:
80000e54:	eb cd 40 80 	pushm	r7,lr
80000e58:	1a 97       	mov	r7,sp
80000e5a:	20 5d       	sub	sp,20
80000e5c:	ef 4c ff ec 	st.w	r7[-20],r12
80000e60:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e64:	a5 58       	asr	r8,0x5
80000e66:	ef 48 ff f4 	st.w	r7[-12],r8
80000e6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e72:	ef 48 ff fc 	st.w	r7[-4],r8
80000e76:	30 19       	mov	r9,1
80000e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000e7c:	f2 08 09 48 	lsl	r8,r9,r8
80000e80:	ef 48 ff f8 	st.w	r7[-8],r8
80000e84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000e88:	a9 68       	lsl	r8,0x8
80000e8a:	e0 28 f0 00 	sub	r8,61440
80000e8e:	ef 48 ff f0 	st.w	r7[-16],r8
80000e92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000e96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000e9a:	f1 49 00 54 	st.w	r8[84],r9
80000e9e:	2f bd       	sub	sp,-20
80000ea0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ea4 <gpioToggle>:
80000ea4:	eb cd 40 80 	pushm	r7,lr
80000ea8:	1a 97       	mov	r7,sp
80000eaa:	20 5d       	sub	sp,20
80000eac:	ef 4c ff ec 	st.w	r7[-20],r12
80000eb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000eb4:	a5 58       	asr	r8,0x5
80000eb6:	ef 48 ff f4 	st.w	r7[-12],r8
80000eba:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000ebe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000ec2:	ef 48 ff fc 	st.w	r7[-4],r8
80000ec6:	30 19       	mov	r9,1
80000ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ecc:	f2 08 09 48 	lsl	r8,r9,r8
80000ed0:	ef 48 ff f8 	st.w	r7[-8],r8
80000ed4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ed8:	a9 68       	lsl	r8,0x8
80000eda:	e0 28 f0 00 	sub	r8,61440
80000ede:	ef 48 ff f0 	st.w	r7[-16],r8
80000ee2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ee6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000eea:	f1 49 00 5c 	st.w	r8[92],r9
80000eee:	2f bd       	sub	sp,-20
80000ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80000ef4 <ledInit>:
80000ef4:	eb cd 40 80 	pushm	r7,lr
80000ef8:	1a 97       	mov	r7,sp
80000efa:	20 9d       	sub	sp,36
80000efc:	49 e8       	lddpc	r8,80000f74 <ledInit+0x80>
80000efe:	ee cb 00 24 	sub	r11,r7,36
80000f02:	10 9a       	mov	r10,r8
80000f04:	f4 e8 00 00 	ld.d	r8,r10[0]
80000f08:	f6 e9 00 00 	st.d	r11[0],r8
80000f0c:	f4 e8 00 08 	ld.d	r8,r10[8]
80000f10:	f6 e9 00 08 	st.d	r11[8],r8
80000f14:	f4 e8 00 10 	ld.d	r8,r10[16]
80000f18:	f6 e9 00 10 	st.d	r11[16],r8
80000f1c:	f4 e8 00 18 	ld.d	r8,r10[24]
80000f20:	f6 e9 00 18 	st.d	r11[24],r8
80000f24:	30 08       	mov	r8,0
80000f26:	ef 48 ff fc 	st.w	r7[-4],r8
80000f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f2e:	a3 68       	lsl	r8,0x2
80000f30:	ee 08 00 08 	add	r8,r7,r8
80000f34:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f38:	10 9c       	mov	r12,r8
80000f3a:	f0 1f 00 10 	mcall	80000f78 <ledInit+0x84>
80000f3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f42:	a3 68       	lsl	r8,0x2
80000f44:	ee 08 00 08 	add	r8,r7,r8
80000f48:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80000f4c:	30 0b       	mov	r11,0
80000f4e:	10 9c       	mov	r12,r8
80000f50:	f0 1f 00 0b 	mcall	80000f7c <ledInit+0x88>
80000f54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f58:	58 78       	cp.w	r8,7
80000f5a:	5f 18       	srne	r8
80000f5c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000f60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f64:	2f f8       	sub	r8,-1
80000f66:	ef 48 ff fc 	st.w	r7[-4],r8
80000f6a:	58 09       	cp.w	r9,0
80000f6c:	cd f1       	brne	80000f2a <ledInit+0x36>
80000f6e:	2f 7d       	sub	sp,-36
80000f70:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f74:	80 00       	ld.sh	r0,r0[0x0]
80000f76:	20 00       	sub	r0,0
80000f78:	80 00       	ld.sh	r0,r0[0x0]
80000f7a:	0f a0       	ld.ub	r0,r7[0x2]
80000f7c:	80 00       	ld.sh	r0,r0[0x0]
80000f7e:	0d 5c       	ld.sh	r12,--r6

80000f80 <ledOn>:
80000f80:	eb cd 40 80 	pushm	r7,lr
80000f84:	1a 97       	mov	r7,sp
80000f86:	20 1d       	sub	sp,4
80000f88:	ef 4c ff fc 	st.w	r7[-4],r12
80000f8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000f90:	f0 1f 00 03 	mcall	80000f9c <ledOn+0x1c>
80000f94:	2f fd       	sub	sp,-4
80000f96:	e3 cd 80 80 	ldm	sp++,r7,pc
80000f9a:	00 00       	add	r0,r0
80000f9c:	80 00       	ld.sh	r0,r0[0x0]
80000f9e:	0e 04       	add	r4,r7

80000fa0 <ledOff>:
80000fa0:	eb cd 40 80 	pushm	r7,lr
80000fa4:	1a 97       	mov	r7,sp
80000fa6:	20 1d       	sub	sp,4
80000fa8:	ef 4c ff fc 	st.w	r7[-4],r12
80000fac:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fb0:	f0 1f 00 03 	mcall	80000fbc <ledOff+0x1c>
80000fb4:	2f fd       	sub	sp,-4
80000fb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fba:	00 00       	add	r0,r0
80000fbc:	80 00       	ld.sh	r0,r0[0x0]
80000fbe:	0e 54       	eor	r4,r7

80000fc0 <ledToggle>:
80000fc0:	eb cd 40 80 	pushm	r7,lr
80000fc4:	1a 97       	mov	r7,sp
80000fc6:	20 1d       	sub	sp,4
80000fc8:	ef 4c ff fc 	st.w	r7[-4],r12
80000fcc:	ee fc ff fc 	ld.w	r12,r7[-4]
80000fd0:	f0 1f 00 03 	mcall	80000fdc <ledToggle+0x1c>
80000fd4:	2f fd       	sub	sp,-4
80000fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000fda:	00 00       	add	r0,r0
80000fdc:	80 00       	ld.sh	r0,r0[0x0]
80000fde:	0e a4       	st.w	r7++,r4

80000fe0 <potInit>:
80000fe0:	d3 01       	pushm	r11-r12
80000fe2:	e0 6c 10 00 	mov	r12,4096
80000fe6:	ea 1c ff ff 	orh	r12,0xffff
80000fea:	31 6b       	mov	r11,22
80000fec:	99 2b       	st.w	r12[0x8],r11
80000fee:	99 6b       	st.w	r12[0x18],r11
80000ff0:	99 6b       	st.w	r12[0x18],r11
80000ff2:	e0 6c 3c 00 	mov	r12,15360
80000ff6:	ea 1c ff ff 	orh	r12,0xffff
80000ffa:	30 1b       	mov	r11,1
80000ffc:	99 0b       	st.w	r12[0x0],r11
80000ffe:	e0 6b 0f 1f 	mov	r11,3871
80001002:	b1 6b       	lsl	r11,0x10
80001004:	99 1b       	st.w	r12[0x4],r11
80001006:	30 2b       	mov	r11,2
80001008:	99 4b       	st.w	r12[0x10],r11
8000100a:	d3 02       	popm	r11-r12
8000100c:	1c 9f       	mov	pc,lr

8000100e <potGetValue>:
8000100e:	d1 81       	pushm	r10-r11
80001010:	e0 6c 3c 00 	mov	r12,15360
80001014:	ea 1c ff ff 	orh	r12,0xffff
80001018:	30 2b       	mov	r11,2
8000101a:	99 0b       	st.w	r12[0x0],r11

8000101c <a1>:
8000101c:	78 7a       	ld.w	r10,r12[0x1c]
8000101e:	16 7a       	tst	r10,r11
80001020:	cf e0       	breq	8000101c <a1>
80001022:	78 dc       	ld.w	r12,r12[0x34]
80001024:	d1 82       	popm	r10-r11
80001026:	1c 9f       	mov	pc,lr

80001028 <usartReset>:
80001028:	eb cd 40 80 	pushm	r7,lr
8000102c:	1a 97       	mov	r7,sp
8000102e:	20 3d       	sub	sp,12
80001030:	ef 4c ff f8 	st.w	r7[-8],r12
80001034:	f0 1f 00 16 	mcall	8000108c <usartReset+0x64>
80001038:	18 98       	mov	r8,r12
8000103a:	ef 48 ff fc 	st.w	r7[-4],r8
8000103e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001042:	58 08       	cp.w	r8,0
80001044:	c0 30       	breq	8000104a <usartReset+0x22>
80001046:	f0 1f 00 13 	mcall	80001090 <usartReset+0x68>
8000104a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000104e:	3f f8       	mov	r8,-1
80001050:	93 38       	st.w	r9[0xc],r8
80001052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001056:	70 58       	ld.w	r8,r8[0x14]
80001058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000105c:	58 08       	cp.w	r8,0
8000105e:	c0 30       	breq	80001064 <usartReset+0x3c>
80001060:	f0 1f 00 0d 	mcall	80001094 <usartReset+0x6c>
80001064:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001068:	30 08       	mov	r8,0
8000106a:	93 18       	st.w	r9[0x4],r8
8000106c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001070:	30 08       	mov	r8,0
80001072:	93 98       	st.w	r9[0x24],r8
80001074:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001078:	30 08       	mov	r8,0
8000107a:	93 a8       	st.w	r9[0x28],r8
8000107c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001080:	ea 68 61 0c 	mov	r8,680204
80001084:	93 08       	st.w	r9[0x0],r8
80001086:	2f dd       	sub	sp,-12
80001088:	e3 cd 80 80 	ldm	sp++,r7,pc
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	1d 6e       	ld.uh	lr,--lr
80001090:	80 00       	ld.sh	r0,r0[0x0]
80001092:	1d 66       	ld.uh	r6,--lr
80001094:	80 00       	ld.sh	r0,r0[0x0]
80001096:	1d 6a       	ld.uh	r10,--lr

80001098 <usartSetBaudrate>:
80001098:	eb cd 40 80 	pushm	r7,lr
8000109c:	1a 97       	mov	r7,sp
8000109e:	20 bd       	sub	sp,44
800010a0:	ef 4c ff ec 	st.w	r7[-20],r12
800010a4:	ef 4b ff e8 	st.w	r7[-24],r11
800010a8:	ef 4a ff e4 	st.w	r7[-28],r10
800010ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010b0:	f0 09 15 04 	lsl	r9,r8,0x4
800010b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010b8:	10 39       	cp.w	r9,r8
800010ba:	e0 8b 00 06 	brhi	800010c6 <usartSetBaudrate+0x2e>
800010be:	31 09       	mov	r9,16
800010c0:	ef 49 ff d4 	st.w	r7[-44],r9
800010c4:	c0 48       	rjmp	800010cc <usartSetBaudrate+0x34>
800010c6:	30 88       	mov	r8,8
800010c8:	ef 48 ff d4 	st.w	r7[-44],r8
800010cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800010d0:	ef 49 ff f0 	st.w	r7[-16],r9
800010d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800010d8:	f0 0a 15 03 	lsl	r10,r8,0x3
800010dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010e4:	f2 08 02 48 	mul	r8,r9,r8
800010e8:	a1 98       	lsr	r8,0x1
800010ea:	10 0a       	add	r10,r8
800010ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800010f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800010f4:	f2 08 02 48 	mul	r8,r9,r8
800010f8:	f4 08 0d 08 	divu	r8,r10,r8
800010fc:	ef 48 ff f4 	st.w	r7[-12],r8
80001100:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001104:	a3 98       	lsr	r8,0x3
80001106:	ef 48 ff f8 	st.w	r7[-8],r8
8000110a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000110e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80001112:	ef 48 ff fc 	st.w	r7[-4],r8
80001116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000111a:	58 08       	cp.w	r8,0
8000111c:	c0 70       	breq	8000112a <usartSetBaudrate+0x92>
8000111e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001122:	e0 48 ff ff 	cp.w	r8,65535
80001126:	e0 88 00 06 	brls	80001132 <usartSetBaudrate+0x9a>
8000112a:	30 18       	mov	r8,1
8000112c:	ef 48 ff d8 	st.w	r7[-40],r8
80001130:	c2 c8       	rjmp	80001188 <usartSetBaudrate+0xf0>
80001132:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001136:	70 18       	ld.w	r8,r8[0x4]
80001138:	10 99       	mov	r9,r8
8000113a:	e4 19 ff f7 	andh	r9,0xfff7
8000113e:	e0 19 fe cf 	andl	r9,0xfecf
80001142:	ef 49 ff dc 	st.w	r7[-36],r9
80001146:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000114a:	59 08       	cp.w	r8,16
8000114c:	c0 60       	breq	80001158 <usartSetBaudrate+0xc0>
8000114e:	e8 68 00 00 	mov	r8,524288
80001152:	ef 48 ff e0 	st.w	r7[-32],r8
80001156:	c0 48       	rjmp	8000115e <usartSetBaudrate+0xc6>
80001158:	30 09       	mov	r9,0
8000115a:	ef 49 ff e0 	st.w	r7[-32],r9
8000115e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80001162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001166:	10 49       	or	r9,r8
80001168:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000116c:	91 19       	st.w	r8[0x4],r9
8000116e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001172:	f0 09 15 10 	lsl	r9,r8,0x10
80001176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000117a:	10 49       	or	r9,r8
8000117c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001180:	91 89       	st.w	r8[0x20],r9
80001182:	30 09       	mov	r9,0
80001184:	ef 49 ff d8 	st.w	r7[-40],r9
80001188:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000118c:	10 9c       	mov	r12,r8
8000118e:	2f 5d       	sub	sp,-44
80001190:	e3 cd 80 80 	ldm	sp++,r7,pc

80001194 <usartInit>:
80001194:	eb cd 40 80 	pushm	r7,lr
80001198:	1a 97       	mov	r7,sp
8000119a:	20 4d       	sub	sp,16
8000119c:	ef 4c ff f8 	st.w	r7[-8],r12
800011a0:	ef 4b ff f4 	st.w	r7[-12],r11
800011a4:	ef 4a ff f0 	st.w	r7[-16],r10
800011a8:	fe 78 10 00 	mov	r8,-61440
800011ac:	ef 48 ff fc 	st.w	r7[-4],r8
800011b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011b4:	30 18       	mov	r8,1
800011b6:	93 28       	st.w	r9[0x8],r8
800011b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800011bc:	30 28       	mov	r8,2
800011be:	93 28       	st.w	r9[0x8],r8
800011c0:	ee fc ff f8 	ld.w	r12,r7[-8]
800011c4:	f0 1f 00 3b 	mcall	800012b0 <usartInit+0x11c>
800011c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011d0:	70 08       	ld.w	r8,r8[0x0]
800011d2:	12 9a       	mov	r10,r9
800011d4:	10 9b       	mov	r11,r8
800011d6:	ee fc ff f8 	ld.w	r12,r7[-8]
800011da:	f0 1f 00 37 	mcall	800012b4 <usartInit+0x120>
800011de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800011e2:	11 c9       	ld.ub	r9,r8[0x4]
800011e4:	30 98       	mov	r8,9
800011e6:	f0 09 18 00 	cp.b	r9,r8
800011ea:	c0 a1       	brne	800011fe <usartInit+0x6a>
800011ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011f0:	70 18       	ld.w	r8,r8[0x4]
800011f2:	10 99       	mov	r9,r8
800011f4:	b1 b9       	sbr	r9,0x11
800011f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800011fa:	91 19       	st.w	r8[0x4],r9
800011fc:	c0 d8       	rjmp	80001216 <usartInit+0x82>
800011fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001202:	70 19       	ld.w	r9,r8[0x4]
80001204:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001208:	11 c8       	ld.ub	r8,r8[0x4]
8000120a:	20 58       	sub	r8,5
8000120c:	a7 68       	lsl	r8,0x6
8000120e:	10 49       	or	r9,r8
80001210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001214:	91 19       	st.w	r8[0x4],r9
80001216:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000121a:	70 1a       	ld.w	r10,r8[0x4]
8000121c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001220:	11 d8       	ld.ub	r8,r8[0x5]
80001222:	f0 09 15 09 	lsl	r9,r8,0x9
80001226:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000122a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000122e:	af 68       	lsl	r8,0xe
80001230:	f3 e8 10 08 	or	r8,r9,r8
80001234:	f5 e8 10 09 	or	r9,r10,r8
80001238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000123c:	91 19       	st.w	r8[0x4],r9
8000123e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001242:	90 39       	ld.sh	r9,r8[0x6]
80001244:	30 28       	mov	r8,2
80001246:	f0 09 19 00 	cp.h	r9,r8
8000124a:	e0 88 00 14 	brls	80001272 <usartInit+0xde>
8000124e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001252:	70 18       	ld.w	r8,r8[0x4]
80001254:	10 99       	mov	r9,r8
80001256:	ad b9       	sbr	r9,0xd
80001258:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000125c:	91 19       	st.w	r8[0x4],r9
8000125e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001262:	90 38       	ld.sh	r8,r8[0x6]
80001264:	5c 78       	castu.h	r8
80001266:	20 28       	sub	r8,2
80001268:	10 99       	mov	r9,r8
8000126a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000126e:	91 a9       	st.w	r8[0x28],r9
80001270:	c0 d8       	rjmp	8000128a <usartInit+0xf6>
80001272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001276:	70 19       	ld.w	r9,r8[0x4]
80001278:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000127c:	90 38       	ld.sh	r8,r8[0x6]
8000127e:	5c 78       	castu.h	r8
80001280:	ad 68       	lsl	r8,0xc
80001282:	10 49       	or	r9,r8
80001284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001288:	91 19       	st.w	r8[0x4],r9
8000128a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000128e:	70 18       	ld.w	r8,r8[0x4]
80001290:	10 99       	mov	r9,r8
80001292:	e0 19 ff f0 	andl	r9,0xfff0
80001296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000129a:	91 19       	st.w	r8[0x4],r9
8000129c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800012a0:	35 08       	mov	r8,80
800012a2:	93 08       	st.w	r9[0x0],r8
800012a4:	30 08       	mov	r8,0
800012a6:	10 9c       	mov	r12,r8
800012a8:	2f cd       	sub	sp,-16
800012aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800012ae:	00 00       	add	r0,r0
800012b0:	80 00       	ld.sh	r0,r0[0x0]
800012b2:	10 28       	rsub	r8,r8
800012b4:	80 00       	ld.sh	r0,r0[0x0]
800012b6:	10 98       	mov	r8,r8

800012b8 <timerInit>:
800012b8:	d5 01       	pushm	r11,lr
800012ba:	d2 01       	pushm	r12
800012bc:	f0 1f 00 28 	mcall	8000135c <timerClearInterrupt+0x10>
800012c0:	f0 1f 00 28 	mcall	80001360 <timerClearInterrupt+0x14>
800012c4:	e0 6c 38 00 	mov	r12,14336
800012c8:	ea 1c ff ff 	orh	r12,0xffff
800012cc:	e0 6b c0 00 	mov	r11,49152
800012d0:	ea 1b 00 00 	orh	r11,0x0
800012d4:	99 1b       	st.w	r12[0x4],r11
800012d6:	30 1b       	mov	r11,1
800012d8:	a5 6b       	lsl	r11,0x4
800012da:	99 9b       	st.w	r12[0x24],r11
800012dc:	d2 02       	popm	r12
800012de:	f0 1f 00 22 	mcall	80001364 <timerClearInterrupt+0x18>
800012e2:	d5 02       	popm	r11,lr
800012e4:	1c 9f       	mov	pc,lr

800012e6 <timerReset>:
800012e6:	d3 01       	pushm	r11-r12
800012e8:	e0 6c 38 00 	mov	r12,14336
800012ec:	ea 1c ff ff 	orh	r12,0xffff
800012f0:	30 5b       	mov	r11,5
800012f2:	99 0b       	st.w	r12[0x0],r11
800012f4:	e0 6b 00 14 	mov	r11,20
800012f8:	ea 1b 00 00 	orh	r11,0x0
800012fc:	76 0b       	ld.w	r11,r11[0x0]
800012fe:	99 7b       	st.w	r12[0x1c],r11
80001300:	d3 02       	popm	r11-r12
80001302:	1c 9f       	mov	pc,lr

80001304 <timerStop>:
80001304:	d3 01       	pushm	r11-r12
80001306:	e0 6c 38 00 	mov	r12,14336
8000130a:	ea 1c ff ff 	orh	r12,0xffff
8000130e:	30 2b       	mov	r11,2
80001310:	99 0b       	st.w	r12[0x0],r11
80001312:	d3 02       	popm	r11-r12
80001314:	1c 9f       	mov	pc,lr

80001316 <timerRCSet>:
80001316:	d3 01       	pushm	r11-r12
80001318:	49 4b       	lddpc	r11,80001368 <timerClearInterrupt+0x1c>
8000131a:	97 0c       	st.w	r11[0x0],r12
8000131c:	e0 6c 38 00 	mov	r12,14336
80001320:	ea 1c ff ff 	orh	r12,0xffff
80001324:	76 0b       	ld.w	r11,r11[0x0]
80001326:	99 7b       	st.w	r12[0x1c],r11
80001328:	d3 02       	popm	r11-r12
8000132a:	1c 9f       	mov	pc,lr

8000132c <timerPrescaleSet>:
8000132c:	d3 81       	pushm	r10-r12
8000132e:	49 0b       	lddpc	r11,8000136c <timerClearInterrupt+0x20>
80001330:	97 0c       	st.w	r11[0x0],r12
80001332:	e0 6c 38 00 	mov	r12,14336
80001336:	ea 1c ff ff 	orh	r12,0xffff
8000133a:	78 1a       	ld.w	r10,r12[0x4]
8000133c:	3f 8b       	mov	r11,-8
8000133e:	16 6a       	and	r10,r11
80001340:	48 bb       	lddpc	r11,8000136c <timerClearInterrupt+0x20>
80001342:	76 0b       	ld.w	r11,r11[0x0]
80001344:	14 4b       	or	r11,r10
80001346:	99 1b       	st.w	r12[0x4],r11
80001348:	d3 82       	popm	r10-r12
8000134a:	1c 9f       	mov	pc,lr

8000134c <timerClearInterrupt>:
8000134c:	d2 01       	pushm	r12
8000134e:	e0 6c 38 00 	mov	r12,14336
80001352:	ea 1c ff ff 	orh	r12,0xffff
80001356:	78 8c       	ld.w	r12,r12[0x20]
80001358:	d2 02       	popm	r12
8000135a:	1c 9f       	mov	pc,lr
8000135c:	80 00       	ld.sh	r0,r0[0x0]
8000135e:	1d 66       	ld.uh	r6,--lr
80001360:	80 00       	ld.sh	r0,r0[0x0]
80001362:	13 4c       	ld.w	r12,--r9
80001364:	80 00       	ld.sh	r0,r0[0x0]
80001366:	0c 3c       	cp.w	r12,r6
80001368:	00 00       	add	r0,r0
8000136a:	00 14       	sub	r4,r0
8000136c:	00 00       	add	r0,r0
8000136e:	00 18       	sub	r8,r0

80001370 <_stext>:
80001370:	49 7d       	lddpc	sp,800013cc <udata_end+0x4>
80001372:	49 80       	lddpc	r0,800013d0 <udata_end+0x8>
80001374:	1a d0       	st.w	--sp,r0
80001376:	e5 cd 20 00 	ldmts	sp,sp
8000137a:	1b 00       	ld.w	r0,sp++
8000137c:	49 60       	lddpc	r0,800013d4 <udata_end+0xc>
8000137e:	e3 b0 00 01 	mtsr	0x4,r0
80001382:	d5 53       	csrf	0x15
80001384:	e0 6c 0c 00 	mov	r12,3072
80001388:	ea 1c ff ff 	orh	r12,0xffff
8000138c:	e0 6b 01 07 	mov	r11,263
80001390:	99 ab       	st.w	r12[0x28],r11
80001392:	30 4b       	mov	r11,4
80001394:	99 0b       	st.w	r12[0x0],r11
80001396:	e0 6a 00 80 	mov	r10,128

8000139a <xw8>:
8000139a:	79 5b       	ld.w	r11,r12[0x54]
8000139c:	14 7b       	tst	r11,r10
8000139e:	cf e0       	breq	8000139a <xw8>
800013a0:	30 5b       	mov	r11,5
800013a2:	99 0b       	st.w	r12[0x0],r11

800013a4 <idata_>:
800013a4:	48 d0       	lddpc	r0,800013d8 <udata_end+0x10>
800013a6:	48 e1       	lddpc	r1,800013dc <udata_end+0x14>
800013a8:	02 30       	cp.w	r0,r1
800013aa:	c0 62       	brcc	800013b6 <idata_end>
800013ac:	48 d2       	lddpc	r2,800013e0 <udata_end+0x18>

800013ae <idata_loop>:
800013ae:	05 04       	ld.w	r4,r2++
800013b0:	00 a4       	st.w	r0++,r4
800013b2:	02 30       	cp.w	r0,r1
800013b4:	cf d3       	brcs	800013ae <idata_loop>

800013b6 <idata_end>:
800013b6:	48 c0       	lddpc	r0,800013e4 <udata_end+0x1c>
800013b8:	48 c1       	lddpc	r1,800013e8 <udata_end+0x20>
800013ba:	02 30       	cp.w	r0,r1
800013bc:	c0 62       	brcc	800013c8 <udata_end>
800013be:	30 02       	mov	r2,0
800013c0:	30 03       	mov	r3,0

800013c2 <udata_loop>:
800013c2:	00 a2       	st.w	r0++,r2
800013c4:	02 30       	cp.w	r0,r1
800013c6:	cf e3       	brcs	800013c2 <udata_loop>

800013c8 <udata_end>:
800013c8:	48 9f       	lddpc	pc,800013ec <udata_end+0x24>
800013ca:	00 00       	add	r0,r0
800013cc:	00 01       	add	r1,r0
800013ce:	00 00       	add	r0,r0
800013d0:	00 00       	add	r0,r0
800013d2:	f0 00       	*unknown*
800013d4:	80 00       	ld.sh	r0,r0[0x0]
800013d6:	1c 00       	add	r0,lr
800013d8:	00 00       	add	r0,r0
800013da:	00 08       	add	r8,r0
800013dc:	00 00       	add	r0,r0
800013de:	05 20       	ld.uh	r0,r2++
800013e0:	80 00       	ld.sh	r0,r0[0x0]
800013e2:	20 88       	sub	r8,8
800013e4:	00 00       	add	r0,r0
800013e6:	05 20       	ld.uh	r0,r2++
800013e8:	00 00       	add	r0,r0
800013ea:	05 a0       	ld.ub	r0,r2[0x2]
800013ec:	80 00       	ld.sh	r0,r0[0x0]
800013ee:	01 b0       	ld.ub	r0,r0[0x3]

800013f0 <calloc>:
800013f0:	d4 01       	pushm	lr
800013f2:	48 48       	lddpc	r8,80001400 <calloc+0x10>
800013f4:	16 9a       	mov	r10,r11
800013f6:	18 9b       	mov	r11,r12
800013f8:	70 0c       	ld.w	r12,r8[0x0]
800013fa:	f0 1f 00 03 	mcall	80001404 <calloc+0x14>
800013fe:	d8 02       	popm	pc
80001400:	00 00       	add	r0,r0
80001402:	01 0c       	ld.w	r12,r0++
80001404:	80 00       	ld.sh	r0,r0[0x0]
80001406:	14 08       	add	r8,r10

80001408 <_calloc_r>:
80001408:	d4 21       	pushm	r4-r7,lr
8000140a:	f4 0b 02 4b 	mul	r11,r10,r11
8000140e:	f0 1f 00 15 	mcall	80001460 <_calloc_r+0x58>
80001412:	18 97       	mov	r7,r12
80001414:	c2 30       	breq	8000145a <_calloc_r+0x52>
80001416:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000141a:	e0 1a ff fc 	andl	r10,0xfffc
8000141e:	20 4a       	sub	r10,4
80001420:	e0 4a 00 24 	cp.w	r10,36
80001424:	e0 8b 00 18 	brhi	80001454 <_calloc_r+0x4c>
80001428:	18 98       	mov	r8,r12
8000142a:	59 3a       	cp.w	r10,19
8000142c:	e0 88 00 0f 	brls	8000144a <_calloc_r+0x42>
80001430:	30 09       	mov	r9,0
80001432:	10 a9       	st.w	r8++,r9
80001434:	10 a9       	st.w	r8++,r9
80001436:	59 ba       	cp.w	r10,27
80001438:	e0 88 00 09 	brls	8000144a <_calloc_r+0x42>
8000143c:	10 a9       	st.w	r8++,r9
8000143e:	10 a9       	st.w	r8++,r9
80001440:	e0 4a 00 24 	cp.w	r10,36
80001444:	c0 31       	brne	8000144a <_calloc_r+0x42>
80001446:	10 a9       	st.w	r8++,r9
80001448:	10 a9       	st.w	r8++,r9
8000144a:	30 09       	mov	r9,0
8000144c:	10 a9       	st.w	r8++,r9
8000144e:	91 19       	st.w	r8[0x4],r9
80001450:	91 09       	st.w	r8[0x0],r9
80001452:	c0 48       	rjmp	8000145a <_calloc_r+0x52>
80001454:	30 0b       	mov	r11,0
80001456:	f0 1f 00 04 	mcall	80001464 <_calloc_r+0x5c>
8000145a:	0e 9c       	mov	r12,r7
8000145c:	d8 22       	popm	r4-r7,pc
8000145e:	00 00       	add	r0,r0
80001460:	80 00       	ld.sh	r0,r0[0x0]
80001462:	14 68       	and	r8,r10
80001464:	80 00       	ld.sh	r0,r0[0x0]
80001466:	18 b8       	st.h	r12++,r8

80001468 <_malloc_r>:
80001468:	d4 31       	pushm	r0-r7,lr
8000146a:	f6 c8 ff f5 	sub	r8,r11,-11
8000146e:	18 95       	mov	r5,r12
80001470:	10 97       	mov	r7,r8
80001472:	e0 17 ff f8 	andl	r7,0xfff8
80001476:	59 68       	cp.w	r8,22
80001478:	f9 b7 08 10 	movls	r7,16
8000147c:	16 37       	cp.w	r7,r11
8000147e:	5f 38       	srlo	r8
80001480:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001484:	c0 50       	breq	8000148e <_malloc_r+0x26>
80001486:	30 c8       	mov	r8,12
80001488:	99 38       	st.w	r12[0xc],r8
8000148a:	e0 8f 01 f3 	bral	80001870 <_malloc_r+0x408>
8000148e:	f0 1f 00 50 	mcall	800015cc <_malloc_r+0x164>
80001492:	e0 47 01 f7 	cp.w	r7,503
80001496:	e0 8b 00 1c 	brhi	800014ce <_malloc_r+0x66>
8000149a:	ee 03 16 03 	lsr	r3,r7,0x3
8000149e:	4c d8       	lddpc	r8,800015d0 <_malloc_r+0x168>
800014a0:	f0 03 00 38 	add	r8,r8,r3<<0x3
800014a4:	70 36       	ld.w	r6,r8[0xc]
800014a6:	10 36       	cp.w	r6,r8
800014a8:	c0 61       	brne	800014b4 <_malloc_r+0x4c>
800014aa:	ec c8 ff f8 	sub	r8,r6,-8
800014ae:	70 36       	ld.w	r6,r8[0xc]
800014b0:	10 36       	cp.w	r6,r8
800014b2:	c0 c0       	breq	800014ca <_malloc_r+0x62>
800014b4:	6c 18       	ld.w	r8,r6[0x4]
800014b6:	e0 18 ff fc 	andl	r8,0xfffc
800014ba:	6c 3a       	ld.w	r10,r6[0xc]
800014bc:	ec 08 00 09 	add	r9,r6,r8
800014c0:	0a 9c       	mov	r12,r5
800014c2:	6c 28       	ld.w	r8,r6[0x8]
800014c4:	95 28       	st.w	r10[0x8],r8
800014c6:	91 3a       	st.w	r8[0xc],r10
800014c8:	c4 68       	rjmp	80001554 <_malloc_r+0xec>
800014ca:	2f e3       	sub	r3,-2
800014cc:	c4 c8       	rjmp	80001564 <_malloc_r+0xfc>
800014ce:	ee 03 16 09 	lsr	r3,r7,0x9
800014d2:	c0 41       	brne	800014da <_malloc_r+0x72>
800014d4:	ee 03 16 03 	lsr	r3,r7,0x3
800014d8:	c2 68       	rjmp	80001524 <_malloc_r+0xbc>
800014da:	58 43       	cp.w	r3,4
800014dc:	e0 8b 00 06 	brhi	800014e8 <_malloc_r+0x80>
800014e0:	ee 03 16 06 	lsr	r3,r7,0x6
800014e4:	2c 83       	sub	r3,-56
800014e6:	c1 f8       	rjmp	80001524 <_malloc_r+0xbc>
800014e8:	59 43       	cp.w	r3,20
800014ea:	e0 8b 00 04 	brhi	800014f2 <_malloc_r+0x8a>
800014ee:	2a 53       	sub	r3,-91
800014f0:	c1 a8       	rjmp	80001524 <_malloc_r+0xbc>
800014f2:	e0 43 00 54 	cp.w	r3,84
800014f6:	e0 8b 00 06 	brhi	80001502 <_malloc_r+0x9a>
800014fa:	ee 03 16 0c 	lsr	r3,r7,0xc
800014fe:	29 23       	sub	r3,-110
80001500:	c1 28       	rjmp	80001524 <_malloc_r+0xbc>
80001502:	e0 43 01 54 	cp.w	r3,340
80001506:	e0 8b 00 06 	brhi	80001512 <_malloc_r+0xaa>
8000150a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000150e:	28 93       	sub	r3,-119
80001510:	c0 a8       	rjmp	80001524 <_malloc_r+0xbc>
80001512:	e0 43 05 54 	cp.w	r3,1364
80001516:	e0 88 00 04 	brls	8000151e <_malloc_r+0xb6>
8000151a:	37 e3       	mov	r3,126
8000151c:	c0 48       	rjmp	80001524 <_malloc_r+0xbc>
8000151e:	ee 03 16 12 	lsr	r3,r7,0x12
80001522:	28 43       	sub	r3,-124
80001524:	4a ba       	lddpc	r10,800015d0 <_malloc_r+0x168>
80001526:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000152a:	74 36       	ld.w	r6,r10[0xc]
8000152c:	c1 98       	rjmp	8000155e <_malloc_r+0xf6>
8000152e:	6c 19       	ld.w	r9,r6[0x4]
80001530:	e0 19 ff fc 	andl	r9,0xfffc
80001534:	f2 07 01 0b 	sub	r11,r9,r7
80001538:	58 fb       	cp.w	r11,15
8000153a:	e0 8a 00 04 	brle	80001542 <_malloc_r+0xda>
8000153e:	20 13       	sub	r3,1
80001540:	c1 18       	rjmp	80001562 <_malloc_r+0xfa>
80001542:	6c 38       	ld.w	r8,r6[0xc]
80001544:	58 0b       	cp.w	r11,0
80001546:	c0 b5       	brlt	8000155c <_malloc_r+0xf4>
80001548:	6c 2a       	ld.w	r10,r6[0x8]
8000154a:	ec 09 00 09 	add	r9,r6,r9
8000154e:	0a 9c       	mov	r12,r5
80001550:	91 2a       	st.w	r8[0x8],r10
80001552:	95 38       	st.w	r10[0xc],r8
80001554:	72 18       	ld.w	r8,r9[0x4]
80001556:	a1 a8       	sbr	r8,0x0
80001558:	93 18       	st.w	r9[0x4],r8
8000155a:	cb c8       	rjmp	800016d2 <_malloc_r+0x26a>
8000155c:	10 96       	mov	r6,r8
8000155e:	14 36       	cp.w	r6,r10
80001560:	ce 71       	brne	8000152e <_malloc_r+0xc6>
80001562:	2f f3       	sub	r3,-1
80001564:	49 ba       	lddpc	r10,800015d0 <_malloc_r+0x168>
80001566:	f4 cc ff f8 	sub	r12,r10,-8
8000156a:	78 26       	ld.w	r6,r12[0x8]
8000156c:	18 36       	cp.w	r6,r12
8000156e:	c6 e0       	breq	8000164a <_malloc_r+0x1e2>
80001570:	6c 19       	ld.w	r9,r6[0x4]
80001572:	e0 19 ff fc 	andl	r9,0xfffc
80001576:	f2 07 01 08 	sub	r8,r9,r7
8000157a:	58 f8       	cp.w	r8,15
8000157c:	e0 89 00 90 	brgt	8000169c <_malloc_r+0x234>
80001580:	99 3c       	st.w	r12[0xc],r12
80001582:	99 2c       	st.w	r12[0x8],r12
80001584:	58 08       	cp.w	r8,0
80001586:	c0 55       	brlt	80001590 <_malloc_r+0x128>
80001588:	ec 09 00 09 	add	r9,r6,r9
8000158c:	0a 9c       	mov	r12,r5
8000158e:	ce 3b       	rjmp	80001554 <_malloc_r+0xec>
80001590:	e0 49 01 ff 	cp.w	r9,511
80001594:	e0 8b 00 13 	brhi	800015ba <_malloc_r+0x152>
80001598:	a3 99       	lsr	r9,0x3
8000159a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000159e:	70 2b       	ld.w	r11,r8[0x8]
800015a0:	8d 38       	st.w	r6[0xc],r8
800015a2:	8d 2b       	st.w	r6[0x8],r11
800015a4:	97 36       	st.w	r11[0xc],r6
800015a6:	91 26       	st.w	r8[0x8],r6
800015a8:	a3 49       	asr	r9,0x2
800015aa:	74 18       	ld.w	r8,r10[0x4]
800015ac:	30 1b       	mov	r11,1
800015ae:	f6 09 09 49 	lsl	r9,r11,r9
800015b2:	f1 e9 10 09 	or	r9,r8,r9
800015b6:	95 19       	st.w	r10[0x4],r9
800015b8:	c4 98       	rjmp	8000164a <_malloc_r+0x1e2>
800015ba:	f2 0a 16 09 	lsr	r10,r9,0x9
800015be:	58 4a       	cp.w	r10,4
800015c0:	e0 8b 00 0a 	brhi	800015d4 <_malloc_r+0x16c>
800015c4:	f2 0a 16 06 	lsr	r10,r9,0x6
800015c8:	2c 8a       	sub	r10,-56
800015ca:	c2 38       	rjmp	80001610 <_malloc_r+0x1a8>
800015cc:	80 00       	ld.sh	r0,r0[0x0]
800015ce:	18 c6       	st.b	r12++,r6
800015d0:	00 00       	add	r0,r0
800015d2:	01 10       	ld.sh	r0,r0++
800015d4:	59 4a       	cp.w	r10,20
800015d6:	e0 8b 00 04 	brhi	800015de <_malloc_r+0x176>
800015da:	2a 5a       	sub	r10,-91
800015dc:	c1 a8       	rjmp	80001610 <_malloc_r+0x1a8>
800015de:	e0 4a 00 54 	cp.w	r10,84
800015e2:	e0 8b 00 06 	brhi	800015ee <_malloc_r+0x186>
800015e6:	f2 0a 16 0c 	lsr	r10,r9,0xc
800015ea:	29 2a       	sub	r10,-110
800015ec:	c1 28       	rjmp	80001610 <_malloc_r+0x1a8>
800015ee:	e0 4a 01 54 	cp.w	r10,340
800015f2:	e0 8b 00 06 	brhi	800015fe <_malloc_r+0x196>
800015f6:	f2 0a 16 0f 	lsr	r10,r9,0xf
800015fa:	28 9a       	sub	r10,-119
800015fc:	c0 a8       	rjmp	80001610 <_malloc_r+0x1a8>
800015fe:	e0 4a 05 54 	cp.w	r10,1364
80001602:	e0 88 00 04 	brls	8000160a <_malloc_r+0x1a2>
80001606:	37 ea       	mov	r10,126
80001608:	c0 48       	rjmp	80001610 <_malloc_r+0x1a8>
8000160a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000160e:	28 4a       	sub	r10,-124
80001610:	4c 8b       	lddpc	r11,80001730 <_malloc_r+0x2c8>
80001612:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80001616:	68 28       	ld.w	r8,r4[0x8]
80001618:	08 38       	cp.w	r8,r4
8000161a:	c0 e1       	brne	80001636 <_malloc_r+0x1ce>
8000161c:	76 19       	ld.w	r9,r11[0x4]
8000161e:	a3 4a       	asr	r10,0x2
80001620:	30 1e       	mov	lr,1
80001622:	fc 0a 09 4a 	lsl	r10,lr,r10
80001626:	f3 ea 10 0a 	or	r10,r9,r10
8000162a:	10 99       	mov	r9,r8
8000162c:	97 1a       	st.w	r11[0x4],r10
8000162e:	c0 a8       	rjmp	80001642 <_malloc_r+0x1da>
80001630:	70 28       	ld.w	r8,r8[0x8]
80001632:	08 38       	cp.w	r8,r4
80001634:	c0 60       	breq	80001640 <_malloc_r+0x1d8>
80001636:	70 1a       	ld.w	r10,r8[0x4]
80001638:	e0 1a ff fc 	andl	r10,0xfffc
8000163c:	14 39       	cp.w	r9,r10
8000163e:	cf 93       	brcs	80001630 <_malloc_r+0x1c8>
80001640:	70 39       	ld.w	r9,r8[0xc]
80001642:	8d 39       	st.w	r6[0xc],r9
80001644:	8d 28       	st.w	r6[0x8],r8
80001646:	91 36       	st.w	r8[0xc],r6
80001648:	93 26       	st.w	r9[0x8],r6
8000164a:	e6 08 14 02 	asr	r8,r3,0x2
8000164e:	30 1b       	mov	r11,1
80001650:	4b 84       	lddpc	r4,80001730 <_malloc_r+0x2c8>
80001652:	f6 08 09 4b 	lsl	r11,r11,r8
80001656:	68 18       	ld.w	r8,r4[0x4]
80001658:	10 3b       	cp.w	r11,r8
8000165a:	e0 8b 00 6f 	brhi	80001738 <_malloc_r+0x2d0>
8000165e:	f7 e8 00 09 	and	r9,r11,r8
80001662:	c0 b1       	brne	80001678 <_malloc_r+0x210>
80001664:	e0 13 ff fc 	andl	r3,0xfffc
80001668:	a1 7b       	lsl	r11,0x1
8000166a:	2f c3       	sub	r3,-4
8000166c:	c0 38       	rjmp	80001672 <_malloc_r+0x20a>
8000166e:	2f c3       	sub	r3,-4
80001670:	a1 7b       	lsl	r11,0x1
80001672:	f7 e8 00 09 	and	r9,r11,r8
80001676:	cf c0       	breq	8000166e <_malloc_r+0x206>
80001678:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000167c:	06 92       	mov	r2,r3
8000167e:	1c 91       	mov	r1,lr
80001680:	62 36       	ld.w	r6,r1[0xc]
80001682:	c2 e8       	rjmp	800016de <_malloc_r+0x276>
80001684:	6c 1a       	ld.w	r10,r6[0x4]
80001686:	e0 1a ff fc 	andl	r10,0xfffc
8000168a:	f4 07 01 08 	sub	r8,r10,r7
8000168e:	58 f8       	cp.w	r8,15
80001690:	e0 8a 00 15 	brle	800016ba <_malloc_r+0x252>
80001694:	6c 3a       	ld.w	r10,r6[0xc]
80001696:	6c 29       	ld.w	r9,r6[0x8]
80001698:	95 29       	st.w	r10[0x8],r9
8000169a:	93 3a       	st.w	r9[0xc],r10
8000169c:	0e 99       	mov	r9,r7
8000169e:	ec 07 00 07 	add	r7,r6,r7
800016a2:	a1 a9       	sbr	r9,0x0
800016a4:	99 37       	st.w	r12[0xc],r7
800016a6:	99 27       	st.w	r12[0x8],r7
800016a8:	8d 19       	st.w	r6[0x4],r9
800016aa:	ee 08 09 08 	st.w	r7[r8],r8
800016ae:	8f 2c       	st.w	r7[0x8],r12
800016b0:	8f 3c       	st.w	r7[0xc],r12
800016b2:	a1 a8       	sbr	r8,0x0
800016b4:	0a 9c       	mov	r12,r5
800016b6:	8f 18       	st.w	r7[0x4],r8
800016b8:	c0 d8       	rjmp	800016d2 <_malloc_r+0x26a>
800016ba:	6c 39       	ld.w	r9,r6[0xc]
800016bc:	58 08       	cp.w	r8,0
800016be:	c0 f5       	brlt	800016dc <_malloc_r+0x274>
800016c0:	ec 0a 00 0a 	add	r10,r6,r10
800016c4:	74 18       	ld.w	r8,r10[0x4]
800016c6:	a1 a8       	sbr	r8,0x0
800016c8:	0a 9c       	mov	r12,r5
800016ca:	95 18       	st.w	r10[0x4],r8
800016cc:	6c 28       	ld.w	r8,r6[0x8]
800016ce:	93 28       	st.w	r9[0x8],r8
800016d0:	91 39       	st.w	r8[0xc],r9
800016d2:	f0 1f 00 19 	mcall	80001734 <_malloc_r+0x2cc>
800016d6:	ec cc ff f8 	sub	r12,r6,-8
800016da:	d8 32       	popm	r0-r7,pc
800016dc:	12 96       	mov	r6,r9
800016de:	02 36       	cp.w	r6,r1
800016e0:	cd 21       	brne	80001684 <_malloc_r+0x21c>
800016e2:	2f f2       	sub	r2,-1
800016e4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800016e8:	c0 30       	breq	800016ee <_malloc_r+0x286>
800016ea:	2f 81       	sub	r1,-8
800016ec:	cc ab       	rjmp	80001680 <_malloc_r+0x218>
800016ee:	1c 98       	mov	r8,lr
800016f0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800016f4:	c0 81       	brne	80001704 <_malloc_r+0x29c>
800016f6:	68 19       	ld.w	r9,r4[0x4]
800016f8:	f6 08 11 ff 	rsub	r8,r11,-1
800016fc:	f3 e8 00 08 	and	r8,r9,r8
80001700:	89 18       	st.w	r4[0x4],r8
80001702:	c0 78       	rjmp	80001710 <_malloc_r+0x2a8>
80001704:	f0 c9 00 08 	sub	r9,r8,8
80001708:	20 13       	sub	r3,1
8000170a:	70 08       	ld.w	r8,r8[0x0]
8000170c:	12 38       	cp.w	r8,r9
8000170e:	cf 10       	breq	800016f0 <_malloc_r+0x288>
80001710:	a1 7b       	lsl	r11,0x1
80001712:	68 18       	ld.w	r8,r4[0x4]
80001714:	10 3b       	cp.w	r11,r8
80001716:	e0 8b 00 11 	brhi	80001738 <_malloc_r+0x2d0>
8000171a:	58 0b       	cp.w	r11,0
8000171c:	c0 e0       	breq	80001738 <_malloc_r+0x2d0>
8000171e:	04 93       	mov	r3,r2
80001720:	c0 38       	rjmp	80001726 <_malloc_r+0x2be>
80001722:	2f c3       	sub	r3,-4
80001724:	a1 7b       	lsl	r11,0x1
80001726:	f7 e8 00 09 	and	r9,r11,r8
8000172a:	ca 71       	brne	80001678 <_malloc_r+0x210>
8000172c:	cf bb       	rjmp	80001722 <_malloc_r+0x2ba>
8000172e:	00 00       	add	r0,r0
80001730:	00 00       	add	r0,r0
80001732:	01 10       	ld.sh	r0,r0++
80001734:	80 00       	ld.sh	r0,r0[0x0]
80001736:	18 c8       	st.b	r12++,r8
80001738:	68 23       	ld.w	r3,r4[0x8]
8000173a:	66 12       	ld.w	r2,r3[0x4]
8000173c:	e0 12 ff fc 	andl	r2,0xfffc
80001740:	0e 32       	cp.w	r2,r7
80001742:	5f 39       	srlo	r9
80001744:	e4 07 01 08 	sub	r8,r2,r7
80001748:	58 f8       	cp.w	r8,15
8000174a:	5f aa       	srle	r10
8000174c:	f5 e9 10 09 	or	r9,r10,r9
80001750:	e0 80 00 a2 	breq	80001894 <_malloc_r+0x42c>
80001754:	4c 88       	lddpc	r8,80001874 <_malloc_r+0x40c>
80001756:	70 01       	ld.w	r1,r8[0x0]
80001758:	4c 88       	lddpc	r8,80001878 <_malloc_r+0x410>
8000175a:	2f 01       	sub	r1,-16
8000175c:	70 08       	ld.w	r8,r8[0x0]
8000175e:	0e 01       	add	r1,r7
80001760:	5b f8       	cp.w	r8,-1
80001762:	c0 40       	breq	8000176a <_malloc_r+0x302>
80001764:	28 11       	sub	r1,-127
80001766:	e0 11 ff 80 	andl	r1,0xff80
8000176a:	02 9b       	mov	r11,r1
8000176c:	0a 9c       	mov	r12,r5
8000176e:	f0 1f 00 44 	mcall	8000187c <_malloc_r+0x414>
80001772:	18 96       	mov	r6,r12
80001774:	5b fc       	cp.w	r12,-1
80001776:	c6 e0       	breq	80001852 <_malloc_r+0x3ea>
80001778:	e6 02 00 08 	add	r8,r3,r2
8000177c:	10 3c       	cp.w	r12,r8
8000177e:	c0 32       	brcc	80001784 <_malloc_r+0x31c>
80001780:	08 33       	cp.w	r3,r4
80001782:	c6 81       	brne	80001852 <_malloc_r+0x3ea>
80001784:	4b fa       	lddpc	r10,80001880 <_malloc_r+0x418>
80001786:	74 09       	ld.w	r9,r10[0x0]
80001788:	e2 09 00 09 	add	r9,r1,r9
8000178c:	95 09       	st.w	r10[0x0],r9
8000178e:	10 36       	cp.w	r6,r8
80001790:	c0 a1       	brne	800017a4 <_malloc_r+0x33c>
80001792:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80001796:	c0 71       	brne	800017a4 <_malloc_r+0x33c>
80001798:	e2 02 00 02 	add	r2,r1,r2
8000179c:	68 28       	ld.w	r8,r4[0x8]
8000179e:	a1 a2       	sbr	r2,0x0
800017a0:	91 12       	st.w	r8[0x4],r2
800017a2:	c4 c8       	rjmp	8000183a <_malloc_r+0x3d2>
800017a4:	4b 5a       	lddpc	r10,80001878 <_malloc_r+0x410>
800017a6:	74 0b       	ld.w	r11,r10[0x0]
800017a8:	5b fb       	cp.w	r11,-1
800017aa:	c0 31       	brne	800017b0 <_malloc_r+0x348>
800017ac:	95 06       	st.w	r10[0x0],r6
800017ae:	c0 68       	rjmp	800017ba <_malloc_r+0x352>
800017b0:	ec 09 00 09 	add	r9,r6,r9
800017b4:	4b 3a       	lddpc	r10,80001880 <_malloc_r+0x418>
800017b6:	10 19       	sub	r9,r8
800017b8:	95 09       	st.w	r10[0x0],r9
800017ba:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800017be:	f0 09 11 08 	rsub	r9,r8,8
800017c2:	58 08       	cp.w	r8,0
800017c4:	f2 08 17 10 	movne	r8,r9
800017c8:	ed d8 e1 06 	addne	r6,r6,r8
800017cc:	28 08       	sub	r8,-128
800017ce:	ec 01 00 01 	add	r1,r6,r1
800017d2:	0a 9c       	mov	r12,r5
800017d4:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800017d8:	f0 01 01 01 	sub	r1,r8,r1
800017dc:	02 9b       	mov	r11,r1
800017de:	f0 1f 00 28 	mcall	8000187c <_malloc_r+0x414>
800017e2:	4a 88       	lddpc	r8,80001880 <_malloc_r+0x418>
800017e4:	5b fc       	cp.w	r12,-1
800017e6:	ec 0c 17 00 	moveq	r12,r6
800017ea:	f9 b1 00 00 	moveq	r1,0
800017ee:	70 09       	ld.w	r9,r8[0x0]
800017f0:	0c 1c       	sub	r12,r6
800017f2:	89 26       	st.w	r4[0x8],r6
800017f4:	02 0c       	add	r12,r1
800017f6:	12 01       	add	r1,r9
800017f8:	a1 ac       	sbr	r12,0x0
800017fa:	91 01       	st.w	r8[0x0],r1
800017fc:	8d 1c       	st.w	r6[0x4],r12
800017fe:	08 33       	cp.w	r3,r4
80001800:	c1 d0       	breq	8000183a <_malloc_r+0x3d2>
80001802:	58 f2       	cp.w	r2,15
80001804:	e0 8b 00 05 	brhi	8000180e <_malloc_r+0x3a6>
80001808:	30 18       	mov	r8,1
8000180a:	8d 18       	st.w	r6[0x4],r8
8000180c:	c2 38       	rjmp	80001852 <_malloc_r+0x3ea>
8000180e:	30 59       	mov	r9,5
80001810:	20 c2       	sub	r2,12
80001812:	e0 12 ff f8 	andl	r2,0xfff8
80001816:	e6 02 00 08 	add	r8,r3,r2
8000181a:	91 29       	st.w	r8[0x8],r9
8000181c:	91 19       	st.w	r8[0x4],r9
8000181e:	66 18       	ld.w	r8,r3[0x4]
80001820:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80001824:	e5 e8 10 08 	or	r8,r2,r8
80001828:	87 18       	st.w	r3[0x4],r8
8000182a:	58 f2       	cp.w	r2,15
8000182c:	e0 88 00 07 	brls	8000183a <_malloc_r+0x3d2>
80001830:	e6 cb ff f8 	sub	r11,r3,-8
80001834:	0a 9c       	mov	r12,r5
80001836:	f0 1f 00 14 	mcall	80001884 <_malloc_r+0x41c>
8000183a:	49 49       	lddpc	r9,80001888 <_malloc_r+0x420>
8000183c:	72 0a       	ld.w	r10,r9[0x0]
8000183e:	49 18       	lddpc	r8,80001880 <_malloc_r+0x418>
80001840:	70 08       	ld.w	r8,r8[0x0]
80001842:	14 38       	cp.w	r8,r10
80001844:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001848:	49 19       	lddpc	r9,8000188c <_malloc_r+0x424>
8000184a:	72 0a       	ld.w	r10,r9[0x0]
8000184c:	14 38       	cp.w	r8,r10
8000184e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001852:	68 28       	ld.w	r8,r4[0x8]
80001854:	70 18       	ld.w	r8,r8[0x4]
80001856:	e0 18 ff fc 	andl	r8,0xfffc
8000185a:	0e 38       	cp.w	r8,r7
8000185c:	5f 39       	srlo	r9
8000185e:	0e 18       	sub	r8,r7
80001860:	58 f8       	cp.w	r8,15
80001862:	5f aa       	srle	r10
80001864:	f5 e9 10 09 	or	r9,r10,r9
80001868:	c1 60       	breq	80001894 <_malloc_r+0x42c>
8000186a:	0a 9c       	mov	r12,r5
8000186c:	f0 1f 00 09 	mcall	80001890 <_malloc_r+0x428>
80001870:	d8 3a       	popm	r0-r7,pc,r12=0
80001872:	00 00       	add	r0,r0
80001874:	00 00       	add	r0,r0
80001876:	05 34       	ld.ub	r4,r2++
80001878:	00 00       	add	r0,r0
8000187a:	05 1c       	ld.sh	r12,r2++
8000187c:	80 00       	ld.sh	r0,r0[0x0]
8000187e:	18 cc       	st.b	r12++,r12
80001880:	00 00       	add	r0,r0
80001882:	05 38       	ld.ub	r8,r2++
80001884:	80 00       	ld.sh	r0,r0[0x0]
80001886:	19 e8       	ld.ub	r8,r12[0x6]
80001888:	00 00       	add	r0,r0
8000188a:	05 30       	ld.ub	r0,r2++
8000188c:	00 00       	add	r0,r0
8000188e:	05 2c       	ld.uh	r12,r2++
80001890:	80 00       	ld.sh	r0,r0[0x0]
80001892:	18 c8       	st.b	r12++,r8
80001894:	68 26       	ld.w	r6,r4[0x8]
80001896:	a1 a8       	sbr	r8,0x0
80001898:	0e 99       	mov	r9,r7
8000189a:	a1 a9       	sbr	r9,0x0
8000189c:	8d 19       	st.w	r6[0x4],r9
8000189e:	ec 07 00 07 	add	r7,r6,r7
800018a2:	0a 9c       	mov	r12,r5
800018a4:	89 27       	st.w	r4[0x8],r7
800018a6:	8f 18       	st.w	r7[0x4],r8
800018a8:	f0 1f 00 03 	mcall	800018b4 <_malloc_r+0x44c>
800018ac:	ec cc ff f8 	sub	r12,r6,-8
800018b0:	d8 32       	popm	r0-r7,pc
800018b2:	00 00       	add	r0,r0
800018b4:	80 00       	ld.sh	r0,r0[0x0]
800018b6:	18 c8       	st.b	r12++,r8

800018b8 <memset>:
800018b8:	18 98       	mov	r8,r12
800018ba:	c0 38       	rjmp	800018c0 <memset+0x8>
800018bc:	10 cb       	st.b	r8++,r11
800018be:	20 1a       	sub	r10,1
800018c0:	58 0a       	cp.w	r10,0
800018c2:	cf d1       	brne	800018bc <memset+0x4>
800018c4:	5e fc       	retal	r12

800018c6 <__malloc_lock>:
800018c6:	5e fc       	retal	r12

800018c8 <__malloc_unlock>:
800018c8:	5e fc       	retal	r12
800018ca:	d7 03       	nop

800018cc <_sbrk_r>:
800018cc:	d4 21       	pushm	r4-r7,lr
800018ce:	30 08       	mov	r8,0
800018d0:	18 97       	mov	r7,r12
800018d2:	48 76       	lddpc	r6,800018ec <_sbrk_r+0x20>
800018d4:	16 9c       	mov	r12,r11
800018d6:	8d 08       	st.w	r6[0x0],r8
800018d8:	f0 1f 00 06 	mcall	800018f0 <_sbrk_r+0x24>
800018dc:	5b fc       	cp.w	r12,-1
800018de:	c0 51       	brne	800018e8 <_sbrk_r+0x1c>
800018e0:	6c 08       	ld.w	r8,r6[0x0]
800018e2:	58 08       	cp.w	r8,0
800018e4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800018e8:	d8 22       	popm	r4-r7,pc
800018ea:	00 00       	add	r0,r0
800018ec:	00 00       	add	r0,r0
800018ee:	05 9c       	ld.ub	r12,r2[0x1]
800018f0:	80 00       	ld.sh	r0,r0[0x0]
800018f2:	18 f4       	st.b	--r12,r4

800018f4 <_sbrk>:
800018f4:	d4 01       	pushm	lr
800018f6:	48 c8       	lddpc	r8,80001924 <_sbrk+0x30>
800018f8:	70 09       	ld.w	r9,r8[0x0]
800018fa:	58 09       	cp.w	r9,0
800018fc:	c0 31       	brne	80001902 <_sbrk+0xe>
800018fe:	48 b9       	lddpc	r9,80001928 <_sbrk+0x34>
80001900:	91 09       	st.w	r8[0x0],r9
80001902:	48 99       	lddpc	r9,80001924 <_sbrk+0x30>
80001904:	48 aa       	lddpc	r10,8000192c <_sbrk+0x38>
80001906:	72 08       	ld.w	r8,r9[0x0]
80001908:	f0 0c 00 0c 	add	r12,r8,r12
8000190c:	14 3c       	cp.w	r12,r10
8000190e:	e0 8b 00 04 	brhi	80001916 <_sbrk+0x22>
80001912:	93 0c       	st.w	r9[0x0],r12
80001914:	c0 68       	rjmp	80001920 <_sbrk+0x2c>
80001916:	f0 1f 00 07 	mcall	80001930 <_sbrk+0x3c>
8000191a:	30 c8       	mov	r8,12
8000191c:	99 08       	st.w	r12[0x0],r8
8000191e:	3f f8       	mov	r8,-1
80001920:	10 9c       	mov	r12,r8
80001922:	d8 02       	popm	pc
80001924:	00 00       	add	r0,r0
80001926:	05 60       	ld.uh	r0,--r2
80001928:	00 00       	add	r0,r0
8000192a:	05 a0       	ld.ub	r0,r2[0x2]
8000192c:	00 00       	add	r0,r0
8000192e:	e0 00       	*unknown*
80001930:	80 00       	ld.sh	r0,r0[0x0]
80001932:	19 34       	ld.ub	r4,r12++

80001934 <__errno>:
80001934:	48 28       	lddpc	r8,8000193c <__errno+0x8>
80001936:	70 0c       	ld.w	r12,r8[0x0]
80001938:	2f 4c       	sub	r12,-12
8000193a:	5e fc       	retal	r12
8000193c:	00 00       	add	r0,r0
8000193e:	01 0c       	ld.w	r12,r0++

80001940 <_malloc_trim_r>:
80001940:	d4 21       	pushm	r4-r7,lr
80001942:	16 95       	mov	r5,r11
80001944:	18 97       	mov	r7,r12
80001946:	f0 1f 00 23 	mcall	800019d0 <_malloc_trim_r+0x90>
8000194a:	4a 34       	lddpc	r4,800019d4 <_malloc_trim_r+0x94>
8000194c:	68 28       	ld.w	r8,r4[0x8]
8000194e:	70 16       	ld.w	r6,r8[0x4]
80001950:	e0 16 ff fc 	andl	r6,0xfffc
80001954:	ec c8 ff 91 	sub	r8,r6,-111
80001958:	f0 05 01 05 	sub	r5,r8,r5
8000195c:	e0 15 ff 80 	andl	r5,0xff80
80001960:	ea c5 00 80 	sub	r5,r5,128
80001964:	e0 45 00 7f 	cp.w	r5,127
80001968:	e0 8a 00 23 	brle	800019ae <_malloc_trim_r+0x6e>
8000196c:	30 0b       	mov	r11,0
8000196e:	0e 9c       	mov	r12,r7
80001970:	f0 1f 00 1a 	mcall	800019d8 <_malloc_trim_r+0x98>
80001974:	68 28       	ld.w	r8,r4[0x8]
80001976:	0c 08       	add	r8,r6
80001978:	10 3c       	cp.w	r12,r8
8000197a:	c1 a1       	brne	800019ae <_malloc_trim_r+0x6e>
8000197c:	ea 0b 11 00 	rsub	r11,r5,0
80001980:	0e 9c       	mov	r12,r7
80001982:	f0 1f 00 16 	mcall	800019d8 <_malloc_trim_r+0x98>
80001986:	5b fc       	cp.w	r12,-1
80001988:	c1 71       	brne	800019b6 <_malloc_trim_r+0x76>
8000198a:	30 0b       	mov	r11,0
8000198c:	0e 9c       	mov	r12,r7
8000198e:	f0 1f 00 13 	mcall	800019d8 <_malloc_trim_r+0x98>
80001992:	68 28       	ld.w	r8,r4[0x8]
80001994:	f8 08 01 09 	sub	r9,r12,r8
80001998:	58 f9       	cp.w	r9,15
8000199a:	e0 8a 00 0a 	brle	800019ae <_malloc_trim_r+0x6e>
8000199e:	a1 a9       	sbr	r9,0x0
800019a0:	91 19       	st.w	r8[0x4],r9
800019a2:	48 f8       	lddpc	r8,800019dc <_malloc_trim_r+0x9c>
800019a4:	70 09       	ld.w	r9,r8[0x0]
800019a6:	48 f8       	lddpc	r8,800019e0 <_malloc_trim_r+0xa0>
800019a8:	f8 09 01 09 	sub	r9,r12,r9
800019ac:	91 09       	st.w	r8[0x0],r9
800019ae:	0e 9c       	mov	r12,r7
800019b0:	f0 1f 00 0d 	mcall	800019e4 <_malloc_trim_r+0xa4>
800019b4:	d8 2a       	popm	r4-r7,pc,r12=0
800019b6:	68 28       	ld.w	r8,r4[0x8]
800019b8:	0a 16       	sub	r6,r5
800019ba:	a1 a6       	sbr	r6,0x0
800019bc:	91 16       	st.w	r8[0x4],r6
800019be:	48 98       	lddpc	r8,800019e0 <_malloc_trim_r+0xa0>
800019c0:	70 09       	ld.w	r9,r8[0x0]
800019c2:	0a 19       	sub	r9,r5
800019c4:	0e 9c       	mov	r12,r7
800019c6:	91 09       	st.w	r8[0x0],r9
800019c8:	f0 1f 00 07 	mcall	800019e4 <_malloc_trim_r+0xa4>
800019cc:	da 2a       	popm	r4-r7,pc,r12=1
800019ce:	00 00       	add	r0,r0
800019d0:	80 00       	ld.sh	r0,r0[0x0]
800019d2:	18 c6       	st.b	r12++,r6
800019d4:	00 00       	add	r0,r0
800019d6:	01 10       	ld.sh	r0,r0++
800019d8:	80 00       	ld.sh	r0,r0[0x0]
800019da:	18 cc       	st.b	r12++,r12
800019dc:	00 00       	add	r0,r0
800019de:	05 1c       	ld.sh	r12,r2++
800019e0:	00 00       	add	r0,r0
800019e2:	05 38       	ld.ub	r8,r2++
800019e4:	80 00       	ld.sh	r0,r0[0x0]
800019e6:	18 c8       	st.b	r12++,r8

800019e8 <_free_r>:
800019e8:	d4 21       	pushm	r4-r7,lr
800019ea:	16 96       	mov	r6,r11
800019ec:	18 97       	mov	r7,r12
800019ee:	58 0b       	cp.w	r11,0
800019f0:	e0 80 00 c8 	breq	80001b80 <_free_r+0x198>
800019f4:	f0 1f 00 4c 	mcall	80001b24 <_free_r+0x13c>
800019f8:	20 86       	sub	r6,8
800019fa:	4c ca       	lddpc	r10,80001b28 <_free_r+0x140>
800019fc:	6c 18       	ld.w	r8,r6[0x4]
800019fe:	74 2e       	ld.w	lr,r10[0x8]
80001a00:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001a04:	a1 c8       	cbr	r8,0x0
80001a06:	ec 08 00 09 	add	r9,r6,r8
80001a0a:	72 1b       	ld.w	r11,r9[0x4]
80001a0c:	e0 1b ff fc 	andl	r11,0xfffc
80001a10:	1c 39       	cp.w	r9,lr
80001a12:	c1 d1       	brne	80001a4c <_free_r+0x64>
80001a14:	f6 08 00 08 	add	r8,r11,r8
80001a18:	58 0c       	cp.w	r12,0
80001a1a:	c0 81       	brne	80001a2a <_free_r+0x42>
80001a1c:	6c 09       	ld.w	r9,r6[0x0]
80001a1e:	12 16       	sub	r6,r9
80001a20:	12 08       	add	r8,r9
80001a22:	6c 3b       	ld.w	r11,r6[0xc]
80001a24:	6c 29       	ld.w	r9,r6[0x8]
80001a26:	97 29       	st.w	r11[0x8],r9
80001a28:	93 3b       	st.w	r9[0xc],r11
80001a2a:	10 99       	mov	r9,r8
80001a2c:	95 26       	st.w	r10[0x8],r6
80001a2e:	a1 a9       	sbr	r9,0x0
80001a30:	8d 19       	st.w	r6[0x4],r9
80001a32:	4b f9       	lddpc	r9,80001b2c <_free_r+0x144>
80001a34:	72 09       	ld.w	r9,r9[0x0]
80001a36:	12 38       	cp.w	r8,r9
80001a38:	c0 63       	brcs	80001a44 <_free_r+0x5c>
80001a3a:	4b e8       	lddpc	r8,80001b30 <_free_r+0x148>
80001a3c:	0e 9c       	mov	r12,r7
80001a3e:	70 0b       	ld.w	r11,r8[0x0]
80001a40:	f0 1f 00 3d 	mcall	80001b34 <_free_r+0x14c>
80001a44:	0e 9c       	mov	r12,r7
80001a46:	f0 1f 00 3d 	mcall	80001b38 <_free_r+0x150>
80001a4a:	d8 22       	popm	r4-r7,pc
80001a4c:	93 1b       	st.w	r9[0x4],r11
80001a4e:	58 0c       	cp.w	r12,0
80001a50:	c0 30       	breq	80001a56 <_free_r+0x6e>
80001a52:	30 0c       	mov	r12,0
80001a54:	c1 08       	rjmp	80001a74 <_free_r+0x8c>
80001a56:	6c 0e       	ld.w	lr,r6[0x0]
80001a58:	f4 c5 ff f8 	sub	r5,r10,-8
80001a5c:	1c 16       	sub	r6,lr
80001a5e:	1c 08       	add	r8,lr
80001a60:	6c 2e       	ld.w	lr,r6[0x8]
80001a62:	0a 3e       	cp.w	lr,r5
80001a64:	f9 bc 00 01 	moveq	r12,1
80001a68:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001a6c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001a70:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001a74:	f2 0b 00 0e 	add	lr,r9,r11
80001a78:	7c 1e       	ld.w	lr,lr[0x4]
80001a7a:	ed be 00 00 	bld	lr,0x0
80001a7e:	c1 30       	breq	80001aa4 <_free_r+0xbc>
80001a80:	16 08       	add	r8,r11
80001a82:	58 0c       	cp.w	r12,0
80001a84:	c0 c1       	brne	80001a9c <_free_r+0xb4>
80001a86:	4a 9e       	lddpc	lr,80001b28 <_free_r+0x140>
80001a88:	72 2b       	ld.w	r11,r9[0x8]
80001a8a:	2f 8e       	sub	lr,-8
80001a8c:	1c 3b       	cp.w	r11,lr
80001a8e:	c0 71       	brne	80001a9c <_free_r+0xb4>
80001a90:	97 36       	st.w	r11[0xc],r6
80001a92:	97 26       	st.w	r11[0x8],r6
80001a94:	8d 2b       	st.w	r6[0x8],r11
80001a96:	8d 3b       	st.w	r6[0xc],r11
80001a98:	30 1c       	mov	r12,1
80001a9a:	c0 58       	rjmp	80001aa4 <_free_r+0xbc>
80001a9c:	72 2b       	ld.w	r11,r9[0x8]
80001a9e:	72 39       	ld.w	r9,r9[0xc]
80001aa0:	93 2b       	st.w	r9[0x8],r11
80001aa2:	97 39       	st.w	r11[0xc],r9
80001aa4:	10 99       	mov	r9,r8
80001aa6:	ec 08 09 08 	st.w	r6[r8],r8
80001aaa:	a1 a9       	sbr	r9,0x0
80001aac:	8d 19       	st.w	r6[0x4],r9
80001aae:	58 0c       	cp.w	r12,0
80001ab0:	c6 51       	brne	80001b7a <_free_r+0x192>
80001ab2:	e0 48 01 ff 	cp.w	r8,511
80001ab6:	e0 8b 00 13 	brhi	80001adc <_free_r+0xf4>
80001aba:	a3 98       	lsr	r8,0x3
80001abc:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001ac0:	72 2b       	ld.w	r11,r9[0x8]
80001ac2:	8d 39       	st.w	r6[0xc],r9
80001ac4:	8d 2b       	st.w	r6[0x8],r11
80001ac6:	97 36       	st.w	r11[0xc],r6
80001ac8:	93 26       	st.w	r9[0x8],r6
80001aca:	a3 48       	asr	r8,0x2
80001acc:	74 19       	ld.w	r9,r10[0x4]
80001ace:	30 1b       	mov	r11,1
80001ad0:	f6 08 09 48 	lsl	r8,r11,r8
80001ad4:	f3 e8 10 08 	or	r8,r9,r8
80001ad8:	95 18       	st.w	r10[0x4],r8
80001ada:	c5 08       	rjmp	80001b7a <_free_r+0x192>
80001adc:	f0 0b 16 09 	lsr	r11,r8,0x9
80001ae0:	58 4b       	cp.w	r11,4
80001ae2:	e0 8b 00 06 	brhi	80001aee <_free_r+0x106>
80001ae6:	f0 0b 16 06 	lsr	r11,r8,0x6
80001aea:	2c 8b       	sub	r11,-56
80001aec:	c2 b8       	rjmp	80001b42 <_free_r+0x15a>
80001aee:	59 4b       	cp.w	r11,20
80001af0:	e0 8b 00 04 	brhi	80001af8 <_free_r+0x110>
80001af4:	2a 5b       	sub	r11,-91
80001af6:	c2 68       	rjmp	80001b42 <_free_r+0x15a>
80001af8:	e0 4b 00 54 	cp.w	r11,84
80001afc:	e0 8b 00 06 	brhi	80001b08 <_free_r+0x120>
80001b00:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001b04:	29 2b       	sub	r11,-110
80001b06:	c1 e8       	rjmp	80001b42 <_free_r+0x15a>
80001b08:	e0 4b 01 54 	cp.w	r11,340
80001b0c:	e0 8b 00 06 	brhi	80001b18 <_free_r+0x130>
80001b10:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001b14:	28 9b       	sub	r11,-119
80001b16:	c1 68       	rjmp	80001b42 <_free_r+0x15a>
80001b18:	e0 4b 05 54 	cp.w	r11,1364
80001b1c:	e0 88 00 10 	brls	80001b3c <_free_r+0x154>
80001b20:	37 eb       	mov	r11,126
80001b22:	c1 08       	rjmp	80001b42 <_free_r+0x15a>
80001b24:	80 00       	ld.sh	r0,r0[0x0]
80001b26:	18 c6       	st.b	r12++,r6
80001b28:	00 00       	add	r0,r0
80001b2a:	01 10       	ld.sh	r0,r0++
80001b2c:	00 00       	add	r0,r0
80001b2e:	05 18       	ld.sh	r8,r2++
80001b30:	00 00       	add	r0,r0
80001b32:	05 34       	ld.ub	r4,r2++
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	19 40       	ld.w	r0,--r12
80001b38:	80 00       	ld.sh	r0,r0[0x0]
80001b3a:	18 c8       	st.b	r12++,r8
80001b3c:	f0 0b 16 12 	lsr	r11,r8,0x12
80001b40:	28 4b       	sub	r11,-124
80001b42:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001b46:	78 29       	ld.w	r9,r12[0x8]
80001b48:	18 39       	cp.w	r9,r12
80001b4a:	c0 e1       	brne	80001b66 <_free_r+0x17e>
80001b4c:	74 18       	ld.w	r8,r10[0x4]
80001b4e:	a3 4b       	asr	r11,0x2
80001b50:	30 1c       	mov	r12,1
80001b52:	f8 0b 09 4b 	lsl	r11,r12,r11
80001b56:	f1 eb 10 0b 	or	r11,r8,r11
80001b5a:	12 98       	mov	r8,r9
80001b5c:	95 1b       	st.w	r10[0x4],r11
80001b5e:	c0 a8       	rjmp	80001b72 <_free_r+0x18a>
80001b60:	72 29       	ld.w	r9,r9[0x8]
80001b62:	18 39       	cp.w	r9,r12
80001b64:	c0 60       	breq	80001b70 <_free_r+0x188>
80001b66:	72 1a       	ld.w	r10,r9[0x4]
80001b68:	e0 1a ff fc 	andl	r10,0xfffc
80001b6c:	14 38       	cp.w	r8,r10
80001b6e:	cf 93       	brcs	80001b60 <_free_r+0x178>
80001b70:	72 38       	ld.w	r8,r9[0xc]
80001b72:	8d 38       	st.w	r6[0xc],r8
80001b74:	8d 29       	st.w	r6[0x8],r9
80001b76:	93 36       	st.w	r9[0xc],r6
80001b78:	91 26       	st.w	r8[0x8],r6
80001b7a:	0e 9c       	mov	r12,r7
80001b7c:	f0 1f 00 02 	mcall	80001b84 <_free_r+0x19c>
80001b80:	d8 22       	popm	r4-r7,pc
80001b82:	00 00       	add	r0,r0
80001b84:	80 00       	ld.sh	r0,r0[0x0]
80001b86:	18 c8       	st.b	r12++,r8

Disassembly of section .exception:

80001c00 <_evba>:
	...

80001c28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001c28:	c7 a8       	rjmp	80001d1c <privilegedCalls>
	...

80001d00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001d00:	1c 9f       	mov	pc,lr

80001d02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001d02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001d06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001d0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001d0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001d12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001d14:	c0 31       	brne	80001d1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001d16:	4b 9c       	lddpc	r12,80001df8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001d18:	18 9f       	mov	pc,r12

80001d1a <_int0_exit>:
_int0_exit:
	rete
80001d1a:	d6 03       	rete

80001d1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001d1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001d1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001d20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001d22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001d24:	9b 3c       	st.w	sp[0xc],r12

80001d26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001d26:	4b 6c       	lddpc	r12,80001dfc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001d28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001d2a:	c0 61       	brne	80001d36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001d2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001d2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001d30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d32:	d3 02       	popm	r11-r12
	rete
80001d34:	d6 03       	rete

80001d36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001d36:	4b 3c       	lddpc	r12,80001e00 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001d38:	18 3b       	cp.w	r11,r12
	brne privexception
80001d3a:	c0 61       	brne	80001d46 <privexception>
	ld.w r12,sp[USERSR]
80001d3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001d3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001d40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001d42:	d3 02       	popm	r11-r12
	rete
80001d44:	d6 03       	rete

80001d46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001d46:	c0 08       	rjmp	80001d46 <privexception>

80001d48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001d48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001d4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001d4e:	4a ec       	lddpc	r12,80001e04 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001d50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001d52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001d54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001d58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001d5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001d60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001d62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001d64:	1c 9f       	mov	pc,lr

80001d66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001d66:	d3 03       	ssrf	0x10
	mov pc,lr
80001d68:	1c 9f       	mov	pc,lr

80001d6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001d6a:	d5 03       	csrf	0x10
	mov pc,lr
80001d6c:	1c 9f       	mov	pc,lr

80001d6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001d6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001d72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001d74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001d78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001d7c:	1c 9f       	mov	pc,lr

80001d7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001d7e:	4a 3c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001d80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001d82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001d84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001d86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001d88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001d8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001d8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001d8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001d90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001d92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001d94:	33 40       	mov	r0,52
	add r0,r12
80001d96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001d98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001d9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001d9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001da2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001da4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001da6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001da8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001daa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001dac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001dae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001db2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001db4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001db6:	1c 9f       	mov	pc,lr

80001db8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001db8:	49 4c       	lddpc	r12,80001e08 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001dba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001dbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001dbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001dc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001dc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001dc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001dc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001dca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001dcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001dce:	33 40       	mov	r0,52
	add r0,r12
80001dd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001dd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001dd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001dd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001dda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001ddc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001dde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001de0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001de2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001de4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001de6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001de8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001dea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001dec:	d4 01       	pushm	lr
	call timerStart
80001dee:	f0 1f 00 08 	mcall	80001e0c <contextRestoreFromISR+0x54>
	popm lr
80001df2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001df4:	1c 9f       	mov	pc,lr
80001df6:	00 00       	add	r0,r0
80001df8:	80 00       	ld.sh	r0,r0[0x0]
80001dfa:	0c 08       	add	r8,r6
80001dfc:	80 00       	ld.sh	r0,r0[0x0]
80001dfe:	1d 66       	ld.uh	r6,--lr
80001e00:	80 00       	ld.sh	r0,r0[0x0]
80001e02:	1d 6a       	ld.uh	r10,--lr
80001e04:	80 00       	ld.sh	r0,r0[0x0]
80001e06:	1c 00       	add	r0,lr
80001e08:	00 00       	add	r0,r0
80001e0a:	05 98       	ld.ub	r8,r2[0x1]
80001e0c:	80 00       	ld.sh	r0,r0[0x0]
80001e0e:	12 e6       	st.h	--r9,r6
	...
